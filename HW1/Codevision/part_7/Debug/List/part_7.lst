
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\HW1_matin_fazel_9825583\Codevision\part_7\Debug\List\part_7.asm Fri Feb 25 19:11:31 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _digit:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;flash unsigned char digit[] = {0x3f,0x06,0x5B,0x4f,0x66,0x6D,0x7D,0x07,
                 ;                                 0x7F,0x6F};
                 ;
                 ;void one(void);
                 ;void two(void);
                 ;void three(void);
                 ;void four(void);
                 ;void five(void);
                 ;void six(void);
                 ;
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0010 one();
00004a d007      	RCALL _one
                 ; 0000 0011 two();
00004b d020      	RCALL _two
                 ; 0000 0012 four();
00004c d03a      	RCALL _four
                 ; 0000 0013 five();
00004d d050      	RCALL _five
                 ; 0000 0014 while (1)
                 _0x3:
                 ; 0000 0015       {
                 ; 0000 0016         three();
00004e d02f      	RCALL _three
                 ; 0000 0017         six();
00004f d06b      	RCALL _six
                 ; 0000 0018 
                 ; 0000 0019       }
000050 cffd      	RJMP _0x3
                 ; 0000 001A }
                 _0x6:
000051 cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;
                 ;void one(void)
                 ; 0000 001E {
                 _one:
                 ; .FSTART _one
                 ; 0000 001F int i;
                 ; 0000 0020 DDRB = 0xFF;
000052 931a      	ST   -Y,R17
000053 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000054 efef      	LDI  R30,LOW(255)
000055 bbe7      	OUT  0x17,R30
                 ; 0000 0021  for(i=0;i<4;i++)
                +
000056 e000     +LDI R16 , LOW ( 0 )
000057 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8:
                +
000058 3004     +CPI R16 , LOW ( 4 )
000059 e0e0     +LDI R30 , HIGH ( 4 )
00005a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
00005b f47c      	BRGE _0x9
                 ; 0000 0022  {
                 ; 0000 0023    PORTB = 0xFF;
00005c efef      	LDI  R30,LOW(255)
00005d bbe8      	OUT  0x18,R30
                 ; 0000 0024    delay_ms(500);
00005e efa4      	LDI  R26,LOW(500)
00005f e0b1      	LDI  R27,HIGH(500)
000060 940e 011e 	CALL _delay_ms
                 ; 0000 0025    PORTB = 0x00;
000062 e0e0      	LDI  R30,LOW(0)
000063 bbe8      	OUT  0x18,R30
                 ; 0000 0026    delay_ms(500);
000064 efa4      	LDI  R26,LOW(500)
000065 e0b1      	LDI  R27,HIGH(500)
000066 940e 011e 	CALL _delay_ms
                 ; 0000 0027  }
                +
000068 5f0f     +SUBI R16 , LOW ( - 1 )
000069 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00006a cfed      	RJMP _0x8
                 _0x9:
                 ; 0000 0028 
                 ; 0000 0029 }
00006b c02f      	RJMP _0x2000002
                 ; .FEND
                 ;
                 ;
                 ;void two(void)
                 ; 0000 002D {
                 _two:
                 ; .FSTART _two
                 ; 0000 002E char i;
                 ; 0000 002F DDRB = 0xFF;
00006c 931a      	ST   -Y,R17
                 ;	i -> R17
00006d efef      	LDI  R30,LOW(255)
00006e bbe7      	OUT  0x17,R30
                 ; 0000 0030 
                 ; 0000 0031 for(i =0;i<8;i++)
00006f e010      	LDI  R17,LOW(0)
                 _0xB:
000070 3018      	CPI  R17,8
000071 f458      	BRSH _0xC
                 ; 0000 0032 {
                 ; 0000 0033     PORTB = (1<<i);
000072 2fe1      	MOV  R30,R17
000073 e0a1      	LDI  R26,LOW(1)
000074 940e 012c 	CALL __LSLB12
000076 bbe8      	OUT  0x18,R30
                 ; 0000 0034     delay_ms(3000/8);
000077 e7a7      	LDI  R26,LOW(375)
000078 e0b1      	LDI  R27,HIGH(375)
000079 940e 011e 	CALL _delay_ms
                 ; 0000 0035 }
00007b 5f1f      	SUBI R17,-1
00007c cff3      	RJMP _0xB
                 _0xC:
                 ; 0000 0036 
                 ; 0000 0037 }
00007d c007      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;
                 ;void three(void)
                 ; 0000 003B {
                 _three:
                 ; .FSTART _three
                 ; 0000 003C  char data;
                 ; 0000 003D  DDRA = 0x00;
00007e 931a      	ST   -Y,R17
                 ;	data -> R17
00007f e0e0      	LDI  R30,LOW(0)
000080 bbea      	OUT  0x1A,R30
                 ; 0000 003E  DDRB = 0xFF;
000081 efef      	LDI  R30,LOW(255)
000082 bbe7      	OUT  0x17,R30
                 ; 0000 003F  data = PINA;
000083 b319      	IN   R17,25
                 ; 0000 0040  PORTB = data;
000084 bb18      	OUT  0x18,R17
                 ; 0000 0041 
                 ; 0000 0042 }
                 _0x2000003:
000085 9119      	LD   R17,Y+
000086 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void four(void)
                 ; 0000 0046 {
                 _four:
                 ; .FSTART _four
                 ; 0000 0047  int i;
                 ; 0000 0048 
                 ; 0000 0049  DDRC = 0xFF;
000087 931a      	ST   -Y,R17
000088 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000089 efef      	LDI  R30,LOW(255)
00008a bbe4      	OUT  0x14,R30
                 ; 0000 004A  DDRD = 0xFF;
00008b bbe1      	OUT  0x11,R30
                 ; 0000 004B 
                 ; 0000 004C  PORTD = 0x00;
00008c e0e0      	LDI  R30,LOW(0)
00008d bbe2      	OUT  0x12,R30
                 ; 0000 004D 
                 ; 0000 004E  for(i = 9;i>=0;i--)
                +
00008e e009     +LDI R16 , LOW ( 9 )
00008f e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 _0xE:
000090 2311      	TST  R17
000091 f04a      	BRMI _0xF
                 ; 0000 004F  {
                 ; 0000 0050   PORTC = digit[i];
000092 01f8      	MOVW R30,R16
000093 d04f      	RCALL SUBOPT_0x0
                 ; 0000 0051   delay_ms(1000);
000094 eea8      	LDI  R26,LOW(1000)
000095 e0b3      	LDI  R27,HIGH(1000)
000096 940e 011e 	CALL _delay_ms
                 ; 0000 0052 
                 ; 0000 0053  }
                +
000098 5001     +SUBI R16 , LOW ( 1 )
000099 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00009a cff5      	RJMP _0xE
                 _0xF:
                 ; 0000 0054 
                 ; 0000 0055 }
                 _0x2000002:
00009b 9109      	LD   R16,Y+
00009c 9119      	LD   R17,Y+
00009d 9508      	RET
                 ; .FEND
                 ;
                 ;void five(void)
                 ; 0000 0058 {
                 _five:
                 ; .FSTART _five
                 ; 0000 0059 int data,i,j;
                 ; 0000 005A DDRA = 0x00;
00009e 940e 0175 	CALL __SAVELOCR6
                 ;	data -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bbea      	OUT  0x1A,R30
                 ; 0000 005B DDRD = 0xff;
0000a2 efef      	LDI  R30,LOW(255)
0000a3 d044      	RCALL SUBOPT_0x1
                 ; 0000 005C 
                 ; 0000 005D data = PINA;
                 ; 0000 005E data = data * 10;
                 ; 0000 005F 
                 ; 0000 0060 for(i =data;i>=0;i--)
                 _0x11:
0000a4 2333      	TST  R19
0000a5 f0a2      	BRMI _0x12
                 ; 0000 0061 {
                 ; 0000 0062   PORTD = 0b00001110;
0000a6 e0ee      	LDI  R30,LOW(14)
0000a7 bbe2      	OUT  0x12,R30
                 ; 0000 0063   PORTC = digit[i/1000];
0000a8 d04a      	RCALL SUBOPT_0x2
                 ; 0000 0064   delay_ms(200);
0000a9 d04f      	RCALL SUBOPT_0x3
                 ; 0000 0065 
                 ; 0000 0066   PORTD = 0b00001101;
0000aa e0ed      	LDI  R30,LOW(13)
0000ab bbe2      	OUT  0x12,R30
                 ; 0000 0067   PORTC = digit[(i/100)%10];
0000ac d050      	RCALL SUBOPT_0x4
                 ; 0000 0068   delay_ms(200);
0000ad d04b      	RCALL SUBOPT_0x3
                 ; 0000 0069 
                 ; 0000 006A   PORTD = 0b00001011;
0000ae e0eb      	LDI  R30,LOW(11)
0000af bbe2      	OUT  0x12,R30
                 ; 0000 006B   PORTC = digit[(i/10)%10] | 0b10000000;
0000b0 d057      	RCALL SUBOPT_0x5
                 ; 0000 006C   delay_ms(200);
                 ; 0000 006D 
                 ; 0000 006E   PORTD = 0b00000111;
0000b1 e0e7      	LDI  R30,LOW(7)
0000b2 bbe2      	OUT  0x12,R30
                 ; 0000 006F   PORTC = digit[i%10];
0000b3 d064      	RCALL SUBOPT_0x6
                 ; 0000 0070   delay_ms(200);
0000b4 d044      	RCALL SUBOPT_0x3
                 ; 0000 0071 
                 ; 0000 0072   i--;
                +
0000b5 5021     +SUBI R18 , LOW ( 1 )
0000b6 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 0073 }
                +
0000b7 5021     +SUBI R18 , LOW ( 1 )
0000b8 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
0000b9 cfea      	RJMP _0x11
                 _0x12:
                 ; 0000 0074 
                 ; 0000 0075 }
0000ba c024      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;
                 ;void six(void)
                 ; 0000 0079 {
                 _six:
                 ; .FSTART _six
                 ; 0000 007A int data,i,j;
                 ; 0000 007B DDRA = 0x00;
0000bb 940e 0175 	CALL __SAVELOCR6
                 ;	data -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
0000bd e0e0      	LDI  R30,LOW(0)
0000be bbea      	OUT  0x1A,R30
                 ; 0000 007C DDRD = 0x0f;
0000bf e0ef      	LDI  R30,LOW(15)
0000c0 d027      	RCALL SUBOPT_0x1
                 ; 0000 007D 
                 ; 0000 007E data = PINA;
                 ; 0000 007F data = data * 10;
                 ; 0000 0080 
                 ; 0000 0081 for(i =data;i>=0;i--)
                 _0x14:
0000c1 2333      	TST  R19
0000c2 f0e2      	BRMI _0x15
                 ; 0000 0082 {
                 ; 0000 0083   if (PIND.7 == 1)
0000c3 9b87      	SBIS 0x10,7
0000c4 c002      	RJMP _0x16
                 ; 0000 0084     PORTD = 0b00001110;
0000c5 e0ee      	LDI  R30,LOW(14)
0000c6 bbe2      	OUT  0x12,R30
                 ; 0000 0085   PORTC = digit[i/1000];
                 _0x16:
0000c7 d02b      	RCALL SUBOPT_0x2
                 ; 0000 0086   delay_ms(200);
0000c8 d030      	RCALL SUBOPT_0x3
                 ; 0000 0087 
                 ; 0000 0088   if (PIND.6 == 1)
0000c9 9b86      	SBIS 0x10,6
0000ca c002      	RJMP _0x17
                 ; 0000 0089     PORTD = 0b00001101;
0000cb e0ed      	LDI  R30,LOW(13)
0000cc bbe2      	OUT  0x12,R30
                 ; 0000 008A   PORTC = digit[(i/100)%10];
                 _0x17:
0000cd d02f      	RCALL SUBOPT_0x4
                 ; 0000 008B   delay_ms(200);
0000ce d02a      	RCALL SUBOPT_0x3
                 ; 0000 008C 
                 ; 0000 008D   if (PIND.5 == 1)
0000cf 9b85      	SBIS 0x10,5
0000d0 c002      	RJMP _0x18
                 ; 0000 008E     PORTD = 0b00001011;
0000d1 e0eb      	LDI  R30,LOW(11)
0000d2 bbe2      	OUT  0x12,R30
                 ; 0000 008F   PORTC = digit[(i/10)%10]| 0b10000000;
                 _0x18:
0000d3 d034      	RCALL SUBOPT_0x5
                 ; 0000 0090   delay_ms(200);
                 ; 0000 0091 
                 ; 0000 0092   if (PIND.4 == 1)
0000d4 9b84      	SBIS 0x10,4
0000d5 c002      	RJMP _0x19
                 ; 0000 0093     PORTD = 0b00000111;
0000d6 e0e7      	LDI  R30,LOW(7)
0000d7 bbe2      	OUT  0x12,R30
                 ; 0000 0094   PORTC = digit[i%10];
                 _0x19:
0000d8 d03f      	RCALL SUBOPT_0x6
                 ; 0000 0095   delay_ms(200);
0000d9 d01f      	RCALL SUBOPT_0x3
                 ; 0000 0096 
                 ; 0000 0097   i--;
                +
0000da 5021     +SUBI R18 , LOW ( 1 )
0000db 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 0098 }
                +
0000dc 5021     +SUBI R18 , LOW ( 1 )
0000dd 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
0000de cfe2      	RJMP _0x14
                 _0x15:
                 ; 0000 0099 }
                 _0x2000001:
0000df 940e 017c 	CALL __LOADLOCR6
0000e1 9626      	ADIW R28,6
0000e2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0000e3 5aec      	SUBI R30,LOW(-_digit*2)
0000e4 4fff      	SBCI R31,HIGH(-_digit*2)
0000e5 9004      	LPM  R0,Z
0000e6 ba05      	OUT  0x15,R0
0000e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0000e8 bbe1      	OUT  0x11,R30
0000e9 b309      	IN   R16,25
0000ea 2711      	CLR  R17
0000eb 01f8      	MOVW R30,R16
0000ec e0aa      	LDI  R26,LOW(10)
0000ed e0b0      	LDI  R27,HIGH(10)
0000ee 940e 013c 	CALL __MULW12
0000f0 018f      	MOVW R16,R30
0000f1 0198      	MOVW R18,R16
0000f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0000f3 01d9      	MOVW R26,R18
0000f4 eee8      	LDI  R30,LOW(1000)
0000f5 e0f3      	LDI  R31,HIGH(1000)
0000f6 940e 0154 	CALL __DIVW21
0000f8 cfea      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
0000f9 eca8      	LDI  R26,LOW(200)
0000fa e0b0      	LDI  R27,0
0000fb 940c 011e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0000fd 01d9      	MOVW R26,R18
0000fe e6e4      	LDI  R30,LOW(100)
0000ff e0f0      	LDI  R31,HIGH(100)
000100 940e 0154 	CALL __DIVW21
000102 01df      	MOVW R26,R30
000103 e0ea      	LDI  R30,LOW(10)
000104 e0f0      	LDI  R31,HIGH(10)
000105 940e 0159 	CALL __MODW21
000107 cfdb      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
000108 01d9      	MOVW R26,R18
000109 e0ea      	LDI  R30,LOW(10)
00010a e0f0      	LDI  R31,HIGH(10)
00010b 940e 0154 	CALL __DIVW21
00010d 01df      	MOVW R26,R30
00010e e0ea      	LDI  R30,LOW(10)
00010f e0f0      	LDI  R31,HIGH(10)
000110 940e 0159 	CALL __MODW21
000112 5aec      	SUBI R30,LOW(-_digit*2)
000113 4fff      	SBCI R31,HIGH(-_digit*2)
000114 91e4      	LPM  R30,Z
000115 68e0      	ORI  R30,0x80
000116 bbe5      	OUT  0x15,R30
000117 cfe1      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000118 01d9      	MOVW R26,R18
000119 e0ea      	LDI  R30,LOW(10)
00011a e0f0      	LDI  R31,HIGH(10)
00011b 940e 0159 	CALL __MODW21
00011d cfc5      	RJMP SUBOPT_0x0
                 
                 
                 	.CSEG
                 _delay_ms:
00011e 9610      	adiw r26,0
00011f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000120 ed80     +LDI R24 , LOW ( 0x7D0 )
000121 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000122 9701     +SBIW R24 , 1
000123 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000124 95a8      	wdr
000125 9711      	sbiw r26,1
000126 f7c9      	brne __delay_ms0
                 __delay_ms1:
000127 9508      	ret
                 
                 __ANEGW1:
000128 95f1      	NEG  R31
000129 95e1      	NEG  R30
00012a 40f0      	SBCI R31,0
00012b 9508      	RET
                 
                 __LSLB12:
00012c 23ee      	TST  R30
00012d 2e0e      	MOV  R0,R30
00012e 2fea      	MOV  R30,R26
00012f f019      	BREQ __LSLB12R
                 __LSLB12L:
000130 0fee      	LSL  R30
000131 940a      	DEC  R0
000132 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000133 9508      	RET
                 
                 __MULW12U:
000134 9ffa      	MUL  R31,R26
000135 2df0      	MOV  R31,R0
000136 9feb      	MUL  R30,R27
000137 0df0      	ADD  R31,R0
000138 9fea      	MUL  R30,R26
000139 2de0      	MOV  R30,R0
00013a 0df1      	ADD  R31,R1
00013b 9508      	RET
                 
                 __MULW12:
00013c d02a      	RCALL __CHKSIGNW
00013d dff6      	RCALL __MULW12U
00013e f40e      	BRTC __MULW121
00013f dfe8      	RCALL __ANEGW1
                 __MULW121:
000140 9508      	RET
                 
                 __DIVW21U:
000141 2400      	CLR  R0
000142 2411      	CLR  R1
000143 e190      	LDI  R25,16
                 __DIVW21U1:
000144 0faa      	LSL  R26
000145 1fbb      	ROL  R27
000146 1c00      	ROL  R0
000147 1c11      	ROL  R1
000148 1a0e      	SUB  R0,R30
000149 0a1f      	SBC  R1,R31
00014a f418      	BRCC __DIVW21U2
00014b 0e0e      	ADD  R0,R30
00014c 1e1f      	ADC  R1,R31
00014d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00014e 60a1      	SBR  R26,1
                 __DIVW21U3:
00014f 959a      	DEC  R25
000150 f799      	BRNE __DIVW21U1
000151 01fd      	MOVW R30,R26
000152 01d0      	MOVW R26,R0
000153 9508      	RET
                 
                 __DIVW21:
000154 d012      	RCALL __CHKSIGNW
000155 dfeb      	RCALL __DIVW21U
000156 f40e      	BRTC __DIVW211
000157 dfd0      	RCALL __ANEGW1
                 __DIVW211:
000158 9508      	RET
                 
                 __MODW21:
000159 94e8      	CLT
00015a ffb7      	SBRS R27,7
00015b c004      	RJMP __MODW211
00015c 95a0      	COM  R26
00015d 95b0      	COM  R27
00015e 9611      	ADIW R26,1
00015f 9468      	SET
                 __MODW211:
000160 fdf7      	SBRC R31,7
000161 dfc6      	RCALL __ANEGW1
000162 dfde      	RCALL __DIVW21U
000163 01fd      	MOVW R30,R26
000164 f40e      	BRTC __MODW212
000165 dfc2      	RCALL __ANEGW1
                 __MODW212:
000166 9508      	RET
                 
                 __CHKSIGNW:
000167 94e8      	CLT
000168 fff7      	SBRS R31,7
000169 c002      	RJMP __CHKSW1
00016a dfbd      	RCALL __ANEGW1
00016b 9468      	SET
                 __CHKSW1:
00016c ffb7      	SBRS R27,7
00016d c006      	RJMP __CHKSW2
00016e 95a0      	COM  R26
00016f 95b0      	COM  R27
000170 9611      	ADIW R26,1
000171 f800      	BLD  R0,0
000172 9403      	INC  R0
000173 fa00      	BST  R0,0
                 __CHKSW2:
000174 9508      	RET
                 
                 __SAVELOCR6:
000175 935a      	ST   -Y,R21
                 __SAVELOCR5:
000176 934a      	ST   -Y,R20
                 __SAVELOCR4:
000177 933a      	ST   -Y,R19
                 __SAVELOCR3:
000178 932a      	ST   -Y,R18
                 __SAVELOCR2:
000179 931a      	ST   -Y,R17
00017a 930a      	ST   -Y,R16
00017b 9508      	RET
                 
                 __LOADLOCR6:
00017c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00017d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00017e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00017f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000180 8119      	LDD  R17,Y+1
000181 8108      	LD   R16,Y
000182 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  15 r17:  21 r18:  11 r19:   8 r20:   2 r21:   2 r22:   0 r23:   0 
r24:   6 r25:   4 r26:  29 r27:  13 r28:   2 r29:   1 r30:  82 r31:  20 
x  :   2 y  :  21 z  :   2 
Registers used: 19 out of 35 (54.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   3 brne  :   6 brpl  :   0 brsh  :   1 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  15 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   1 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  23 ld    :   4 ldd   :   5 ldi   :  64 
lds   :   0 lpm   :   4 lsl   :   2 lsr   :   0 mov   :   5 movw  :  13 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  30 pop   :   0 push  :   0 rcall :  33 ret   :  16 
reti  :   0 rjmp  :  22 rol   :   3 ror   :   0 sbc   :   1 sbci  :   9 
sbi   :   0 sbic  :   0 sbis  :   4 sbiw  :   3 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   0 sts   :   0 sub   :   1 subi  :   9 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000306    764     10    774   16384   4.7%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings

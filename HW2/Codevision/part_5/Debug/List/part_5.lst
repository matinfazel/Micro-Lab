
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\HW2_matin_fazel_9825583\Codevision\part_5\Debug\List\part_5.asm Thu Mar 03 23:22:31 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x60003:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 while (1)
                 _0x3:
                 ; 0000 0006     {
                 ; 0000 0007        seven_seg_display(1234,portC,portA);
00004a ede2      	LDI  R30,LOW(1234)
00004b e0f4      	LDI  R31,HIGH(1234)
00004c 93fa      	ST   -Y,R31
00004d 93ea      	ST   -Y,R30
00004e 940e 00ed 	CALL SUBOPT_0x0
000050 e0a1      	LDI  R26,LOW(1)
000051 e0b0      	LDI  R27,0
000052 940e 00a7 	CALL _seven_seg_display
                 ; 0000 0008 
                 ; 0000 0009     }
000054 cff5      	RJMP _0x3
                 ; 0000 000A }
                 _0x6:
000055 cfff      	RJMP _0x6
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char func1(unsigned int port_in)
                 ; 0001 0004 {
                 
                 	.CSEG
                 _func1:
                 ; .FSTART _func1
                 ; 0001 0005   char data;
                 ; 0001 0006 
                 ; 0001 0007   switch( port_in)
000056 93ba      	ST   -Y,R27
000057 93aa      	ST   -Y,R26
000058 931a      	ST   -Y,R17
                 ;	port_in -> Y+1
                 ;	data -> R17
000059 81e9      	LDD  R30,Y+1
00005a 81fa      	LDD  R31,Y+1+1
                 ; 0001 0008   {
                 ; 0001 0009         case portA:
00005b 30e1      	CPI  R30,LOW(0x1)
00005c e0a0      	LDI  R26,HIGH(0x1)
00005d 07fa      	CPC  R31,R26
00005e f421      	BRNE _0x20006
                 ; 0001 000A         DDRA=0x00;
00005f e0e0      	LDI  R30,LOW(0)
000060 bbea      	OUT  0x1A,R30
                 ; 0001 000B         data=PINA;
000061 b319      	IN   R17,25
                 ; 0001 000C         break ;
000062 c017      	RJMP _0x20005
                 ; 0001 000D         case portB:
                 _0x20006:
000063 30e2      	CPI  R30,LOW(0x2)
000064 e0a0      	LDI  R26,HIGH(0x2)
000065 07fa      	CPC  R31,R26
000066 f421      	BRNE _0x20007
                 ; 0001 000E         DDRB=0x00;
000067 e0e0      	LDI  R30,LOW(0)
000068 bbe7      	OUT  0x17,R30
                 ; 0001 000F         data=PINB;
000069 b316      	IN   R17,22
                 ; 0001 0010         break;
00006a c00f      	RJMP _0x20005
                 ; 0001 0011         case portC:
                 _0x20007:
00006b 30e3      	CPI  R30,LOW(0x3)
00006c e0a0      	LDI  R26,HIGH(0x3)
00006d 07fa      	CPC  R31,R26
00006e f421      	BRNE _0x20008
                 ; 0001 0012         DDRC=0x00;
00006f e0e0      	LDI  R30,LOW(0)
000070 bbe4      	OUT  0x14,R30
                 ; 0001 0013         data=PINC;
000071 b313      	IN   R17,19
                 ; 0001 0014         break;
000072 c007      	RJMP _0x20005
                 ; 0001 0015         case portD:
                 _0x20008:
000073 30e4      	CPI  R30,LOW(0x4)
000074 e0a0      	LDI  R26,HIGH(0x4)
000075 07fa      	CPC  R31,R26
000076 f419      	BRNE _0x20005
                 ; 0001 0016         DDRD=0x00;
000077 e0e0      	LDI  R30,LOW(0)
000078 bbe1      	OUT  0x11,R30
                 ; 0001 0017         data=PIND;
000079 b310      	IN   R17,16
                 ; 0001 0018         break;
                 ; 0001 0019   }
                 _0x20005:
                 ; 0001 001A 
                 ; 0001 001B return data;
00007a 2fe1      	MOV  R30,R17
00007b 8118      	LDD  R17,Y+0
00007c 9623      	ADIW R28,3
00007d 9508      	RET
                 ; 0001 001C 
                 ; 0001 001D }
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func2(unsigned int port_out,unsigned int data)
                 ; 0002 0004 {
                 
                 	.CSEG
                 _func2:
                 ; .FSTART _func2
                 ; 0002 0005 
                 ; 0002 0006 switch( port_out)
00007e 93ba      	ST   -Y,R27
00007f 93aa      	ST   -Y,R26
                 ;	port_out -> Y+2
                 ;	data -> Y+0
000080 81ea      	LDD  R30,Y+2
000081 81fb      	LDD  R31,Y+2+1
                 ; 0002 0007     {
                 ; 0002 0008     case portA:
000082 30e1      	CPI  R30,LOW(0x1)
000083 e0a0      	LDI  R26,HIGH(0x1)
000084 07fa      	CPC  R31,R26
000085 f429      	BRNE _0x40006
                 ; 0002 0009         DDRA=0xFF;
000086 efef      	LDI  R30,LOW(255)
000087 bbea      	OUT  0x1A,R30
                 ; 0002 000A         PORTA=data;
000088 81e8      	LD   R30,Y
000089 bbeb      	OUT  0x1B,R30
                 ; 0002 000B     break ;
00008a c01a      	RJMP _0x40005
                 ; 0002 000C     case portB:
                 _0x40006:
00008b 30e2      	CPI  R30,LOW(0x2)
00008c e0a0      	LDI  R26,HIGH(0x2)
00008d 07fa      	CPC  R31,R26
00008e f429      	BRNE _0x40007
                 ; 0002 000D         DDRB=0xFF;
00008f efef      	LDI  R30,LOW(255)
000090 bbe7      	OUT  0x17,R30
                 ; 0002 000E         PORTB=data;
000091 81e8      	LD   R30,Y
000092 bbe8      	OUT  0x18,R30
                 ; 0002 000F     break;
000093 c011      	RJMP _0x40005
                 ; 0002 0010     case portC:
                 _0x40007:
000094 30e3      	CPI  R30,LOW(0x3)
000095 e0a0      	LDI  R26,HIGH(0x3)
000096 07fa      	CPC  R31,R26
000097 f429      	BRNE _0x40008
                 ; 0002 0011         DDRC=0xFF;
000098 efef      	LDI  R30,LOW(255)
000099 bbe4      	OUT  0x14,R30
                 ; 0002 0012         PORTC=data;
00009a 81e8      	LD   R30,Y
00009b bbe5      	OUT  0x15,R30
                 ; 0002 0013     break;
00009c c008      	RJMP _0x40005
                 ; 0002 0014     case portD:
                 _0x40008:
00009d 30e4      	CPI  R30,LOW(0x4)
00009e e0a0      	LDI  R26,HIGH(0x4)
00009f 07fa      	CPC  R31,R26
0000a0 f421      	BRNE _0x40005
                 ; 0002 0015         DDRD=0xFF;
0000a1 efef      	LDI  R30,LOW(255)
0000a2 bbe1      	OUT  0x11,R30
                 ; 0002 0016         PORTD=data;
0000a3 81e8      	LD   R30,Y
0000a4 bbe2      	OUT  0x12,R30
                 ; 0002 0017     break;
                 ; 0002 0018 }
                 _0x40005:
                 ; 0002 0019 
                 ; 0002 001A return;
0000a5 9624      	ADIW R28,4
0000a6 9508      	RET
                 ; 0002 001B 
                 ; 0002 001C }
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void seven_seg_display (int data, int data_port, int enable_data)
                 ; 0003 0004 { char data_in;
                 
                 	.CSEG
                 _seven_seg_display:
                 ; .FSTART _seven_seg_display
                 ; 0003 0005  unsigned char digit[] = {0x3f,0x06,0x5B,0x4f,0x66,0x6D,0x7D,0x07,
                 ; 0003 0006                                  0x7F,0x6F};
                 ; 0003 0007 
                 ; 0003 0008 
                 ; 0003 0009   data_in = func1(enable_data);
0000a7 93ba      	ST   -Y,R27
0000a8 93aa      	ST   -Y,R26
0000a9 972a      	SBIW R28,10
0000aa e08a      	LDI  R24,10
0000ab e0a0      	LDI  R26,LOW(0)
0000ac e0b0      	LDI  R27,HIGH(0)
0000ad e5e4      	LDI  R30,LOW(_0x60003*2)
0000ae e0f0      	LDI  R31,HIGH(_0x60003*2)
0000af 940e 0152 	CALL __INITLOCB
0000b1 931a      	ST   -Y,R17
                 ;	data -> Y+15
                 ;	data_port -> Y+13
                 ;	enable_data -> Y+11
                 ;	data_in -> R17
                 ;	digit -> Y+1
0000b2 85ab      	LDD  R26,Y+11
0000b3 85bc      	LDD  R27,Y+11+1
0000b4 940e 0056 	CALL _func1
0000b6 2f1e      	MOV  R17,R30
                 ; 0003 000A 
                 ; 0003 000B   func2(portD,0b00001110|(data_in &0b1));
0000b7 d03a      	RCALL SUBOPT_0x1
0000b8 70e1      	ANDI R30,LOW(0x1)
0000b9 70f0      	ANDI R31,HIGH(0x1)
0000ba 60ee      	ORI  R30,LOW(0xE)
0000bb d03d      	RCALL SUBOPT_0x2
                 ; 0003 000C   func2(portC,digit[data/1000]);
0000bc 89a9      	LDD  R26,Y+17
0000bd 89ba      	LDD  R27,Y+17+1
0000be eee8      	LDI  R30,LOW(1000)
0000bf e0f3      	LDI  R31,HIGH(1000)
0000c0 940e 0131 	CALL __DIVW21
0000c2 d039      	RCALL SUBOPT_0x3
                 ; 0003 000D   delay_ms(200);
                 ; 0003 000E 
                 ; 0003 000F   func2(portD,0b00001101| (data_in &0b10));
0000c3 70e2      	ANDI R30,LOW(0x2)
0000c4 70f0      	ANDI R31,HIGH(0x2)
0000c5 60ed      	ORI  R30,LOW(0xD)
0000c6 d032      	RCALL SUBOPT_0x2
                 ; 0003 0010   func2(portC,digit[(data/100)%10]);
0000c7 89a9      	LDD  R26,Y+17
0000c8 89ba      	LDD  R27,Y+17+1
0000c9 e6e4      	LDI  R30,LOW(100)
0000ca e0f0      	LDI  R31,HIGH(100)
0000cb d03c      	RCALL SUBOPT_0x4
                 ; 0003 0011 
                 ; 0003 0012   delay_ms(200);
                 ; 0003 0013 
                 ; 0003 0014   func2(portD,0b00001011 | (data_in &0b100));
0000cc 70e4      	ANDI R30,LOW(0x4)
0000cd 70f0      	ANDI R31,HIGH(0x4)
0000ce 60eb      	ORI  R30,LOW(0xB)
0000cf d029      	RCALL SUBOPT_0x2
                 ; 0003 0015   func2(portC,digit[(data/10)%10]);
0000d0 89a9      	LDD  R26,Y+17
0000d1 89ba      	LDD  R27,Y+17+1
0000d2 e0ea      	LDI  R30,LOW(10)
0000d3 e0f0      	LDI  R31,HIGH(10)
0000d4 d033      	RCALL SUBOPT_0x4
                 ; 0003 0016 
                 ; 0003 0017   delay_ms(200);
                 ; 0003 0018 
                 ; 0003 0019   func2(portD,0b00000111 | (data_in &0b1000));
0000d5 70e8      	ANDI R30,LOW(0x8)
0000d6 70f0      	ANDI R31,HIGH(0x8)
0000d7 60e7      	ORI  R30,LOW(0x7)
0000d8 d020      	RCALL SUBOPT_0x2
                 ; 0003 001A   func2(portC,digit[data%10]);
0000d9 89a9      	LDD  R26,Y+17
0000da 89ba      	LDD  R27,Y+17+1
0000db e0ea      	LDI  R30,LOW(10)
0000dc e0f0      	LDI  R31,HIGH(10)
0000dd 940e 0136 	CALL __MODW21
0000df 01de      	MOVW R26,R28
0000e0 9613      	ADIW R26,3
0000e1 0fae      	ADD  R26,R30
0000e2 1fbf      	ADC  R27,R31
0000e3 91ac      	LD   R26,X
0000e4 27bb      	CLR  R27
0000e5 df98      	RCALL _func2
                 ; 0003 001B   delay_ms(200);
0000e6 eca8      	LDI  R26,LOW(200)
0000e7 e0b0      	LDI  R27,0
0000e8 940e 0110 	CALL _delay_ms
                 ; 0003 001C 
                 ; 0003 001D 
                 ; 0003 001E return;
0000ea 8118      	LDD  R17,Y+0
0000eb 9661      	ADIW R28,17
0000ec 9508      	RET
                 ; 0003 001F }
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0000ed e0e3      	LDI  R30,LOW(3)
0000ee e0f0      	LDI  R31,HIGH(3)
0000ef 93fa      	ST   -Y,R31
0000f0 93ea      	ST   -Y,R30
0000f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
0000f2 e0e4      	LDI  R30,LOW(4)
0000f3 e0f0      	LDI  R31,HIGH(4)
0000f4 93fa      	ST   -Y,R31
0000f5 93ea      	ST   -Y,R30
0000f6 2fe1      	MOV  R30,R17
0000f7 e0f0      	LDI  R31,0
0000f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
0000f9 01df      	MOVW R26,R30
0000fa df83      	RCALL _func2
0000fb cff1      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3:
0000fc 01de      	MOVW R26,R28
0000fd 9613      	ADIW R26,3
0000fe 0fae      	ADD  R26,R30
0000ff 1fbf      	ADC  R27,R31
000100 91ac      	LD   R26,X
000101 27bb      	CLR  R27
000102 df7b      	RCALL _func2
000103 eca8      	LDI  R26,LOW(200)
000104 e0b0      	LDI  R27,0
000105 940e 0110 	CALL _delay_ms
000107 cfea      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000108 940e 0131 	CALL __DIVW21
00010a 01df      	MOVW R26,R30
00010b e0ea      	LDI  R30,LOW(10)
00010c e0f0      	LDI  R31,HIGH(10)
00010d 940e 0136 	CALL __MODW21
00010f cfec      	RJMP SUBOPT_0x3
                 
                 
                 	.CSEG
                 _delay_ms:
000110 9610      	adiw r26,0
000111 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000112 ed80     +LDI R24 , LOW ( 0x7D0 )
000113 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000114 9701     +SBIW R24 , 1
000115 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000116 95a8      	wdr
000117 9711      	sbiw r26,1
000118 f7c9      	brne __delay_ms0
                 __delay_ms1:
000119 9508      	ret
                 
                 __ANEGW1:
00011a 95f1      	NEG  R31
00011b 95e1      	NEG  R30
00011c 40f0      	SBCI R31,0
00011d 9508      	RET
                 
                 __DIVW21U:
00011e 2400      	CLR  R0
00011f 2411      	CLR  R1
000120 e190      	LDI  R25,16
                 __DIVW21U1:
000121 0faa      	LSL  R26
000122 1fbb      	ROL  R27
000123 1c00      	ROL  R0
000124 1c11      	ROL  R1
000125 1a0e      	SUB  R0,R30
000126 0a1f      	SBC  R1,R31
000127 f418      	BRCC __DIVW21U2
000128 0e0e      	ADD  R0,R30
000129 1e1f      	ADC  R1,R31
00012a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00012b 60a1      	SBR  R26,1
                 __DIVW21U3:
00012c 959a      	DEC  R25
00012d f799      	BRNE __DIVW21U1
00012e 01fd      	MOVW R30,R26
00012f 01d0      	MOVW R26,R0
000130 9508      	RET
                 
                 __DIVW21:
000131 d012      	RCALL __CHKSIGNW
000132 dfeb      	RCALL __DIVW21U
000133 f40e      	BRTC __DIVW211
000134 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000135 9508      	RET
                 
                 __MODW21:
000136 94e8      	CLT
000137 ffb7      	SBRS R27,7
000138 c004      	RJMP __MODW211
000139 95a0      	COM  R26
00013a 95b0      	COM  R27
00013b 9611      	ADIW R26,1
00013c 9468      	SET
                 __MODW211:
00013d fdf7      	SBRC R31,7
00013e dfdb      	RCALL __ANEGW1
00013f dfde      	RCALL __DIVW21U
000140 01fd      	MOVW R30,R26
000141 f40e      	BRTC __MODW212
000142 dfd7      	RCALL __ANEGW1
                 __MODW212:
000143 9508      	RET
                 
                 __CHKSIGNW:
000144 94e8      	CLT
000145 fff7      	SBRS R31,7
000146 c002      	RJMP __CHKSW1
000147 dfd2      	RCALL __ANEGW1
000148 9468      	SET
                 __CHKSW1:
000149 ffb7      	SBRS R27,7
00014a c006      	RJMP __CHKSW2
00014b 95a0      	COM  R26
00014c 95b0      	COM  R27
00014d 9611      	ADIW R26,1
00014e f800      	BLD  R0,0
00014f 9403      	INC  R0
000150 fa00      	BST  R0,0
                 __CHKSW2:
000151 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000152 0fac      	ADD  R26,R28
000153 1fbd      	ADC  R27,R29
                 __INITLOC0:
000154 9005      	LPM  R0,Z+
000155 920d      	ST   X+,R0
000156 958a      	DEC  R24
000157 f7e1      	BRNE __INITLOC0
000158 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  10 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  11 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   4 r26:  52 r27:  23 r28:   8 r29:   2 r30:  76 r31:  37 
x  :   5 y  :  34 z  :   1 
Registers used: 14 out of 35 (40.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   8 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  10 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   8 cpi   :   8 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  22 ld    :   6 ldd   :  16 ldi   :  57 
lds   :   0 lpm   :   1 lsl   :   1 lsr   :   0 mov   :   3 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   4 out   :  18 pop   :   0 push  :   0 rcall :  18 ret   :  12 
reti  :   0 rjmp  :  15 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  17 std   :   0 sts   :   0 sub   :   1 subi  :   0 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b2    680     10    690   16384   4.2%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings

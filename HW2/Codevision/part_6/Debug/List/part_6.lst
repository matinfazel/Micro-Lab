
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\HW2_matin_fazel_9825583\Codevision\part_6\Debug\List\part_6.asm Fri Mar 04 20:55:29 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0xC0003:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 while (1)
                 _0x3:
                 ; 0000 0006     {
                 ; 0000 0007 
                 ; 0000 0008         func6();
00004a d002      	RCALL _func6
                 ; 0000 0009     }
00004b cffe      	RJMP _0x3
                 ; 0000 000A }
                 _0x6:
00004c cfff      	RJMP _0x6
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func6(void)
                 ; 0001 0004 {
                 
                 	.CSEG
                 _func6:
                 ; .FSTART _func6
                 ; 0001 0005   func1(portA);
00004d e0a1      	LDI  R26,LOW(1)
00004e e0b0      	LDI  R27,0
00004f d025      	RCALL _func1
                 ; 0001 0006   delay_ms(1000);
000050 940e 0136 	CALL SUBOPT_0x0
                 ; 0001 0007 
                 ; 0001 0008   func2(portB,0x55);
000052 940e 013a 	CALL SUBOPT_0x1
000054 e5a5      	LDI  R26,LOW(85)
000055 e0b0      	LDI  R27,0
000056 940e 009d 	CALL _func2
                 ; 0001 0009   delay_ms(1000);
000058 940e 0136 	CALL SUBOPT_0x0
                 ; 0001 000A 
                 ; 0001 000B   func3(12,500);
00005a e0ec      	LDI  R30,LOW(12)
00005b e0f0      	LDI  R31,HIGH(12)
00005c 93fa      	ST   -Y,R31
00005d 93ea      	ST   -Y,R30
00005e efa4      	LDI  R26,LOW(500)
00005f e0b1      	LDI  R27,HIGH(500)
000060 940e 00c6 	CALL _func3
                 ; 0001 000C   delay_ms(1000);
000062 940e 0136 	CALL SUBOPT_0x0
                 ; 0001 000D 
                 ; 0001 000E   func4();
000064 940e 00e2 	CALL _func4
                 ; 0001 000F   delay_ms(1000);
000066 940e 0136 	CALL SUBOPT_0x0
                 ; 0001 0010 
                 ; 0001 0011   seven_seg_display(1234,portC,portA);
000068 ede2      	LDI  R30,LOW(1234)
000069 e0f4      	LDI  R31,HIGH(1234)
00006a 93fa      	ST   -Y,R31
00006b 93ea      	ST   -Y,R30
00006c 940e 013f 	CALL SUBOPT_0x2
00006e e0a1      	LDI  R26,LOW(1)
00006f e0b0      	LDI  R27,0
000070 940e 00ef 	CALL _seven_seg_display
                 ; 0001 0012   delay_ms(1000);
000072 940e 0136 	CALL SUBOPT_0x0
                 ; 0001 0013 
                 ; 0001 0014 }
000074 9508      	RET
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char func1(unsigned int port_in)
                 ; 0002 0004 {
                 
                 	.CSEG
                 _func1:
                 ; .FSTART _func1
                 ; 0002 0005   char data;
                 ; 0002 0006 
                 ; 0002 0007   switch( port_in)
000075 93ba      	ST   -Y,R27
000076 93aa      	ST   -Y,R26
000077 931a      	ST   -Y,R17
                 ;	port_in -> Y+1
                 ;	data -> R17
000078 81e9      	LDD  R30,Y+1
000079 81fa      	LDD  R31,Y+1+1
                 ; 0002 0008   {
                 ; 0002 0009         case portA:
00007a 30e1      	CPI  R30,LOW(0x1)
00007b e0a0      	LDI  R26,HIGH(0x1)
00007c 07fa      	CPC  R31,R26
00007d f421      	BRNE _0x40006
                 ; 0002 000A         DDRA=0x00; // as input
00007e e0e0      	LDI  R30,LOW(0)
00007f bbea      	OUT  0x1A,R30
                 ; 0002 000B         data=PINA;
000080 b319      	IN   R17,25
                 ; 0002 000C         break ;
000081 c017      	RJMP _0x40005
                 ; 0002 000D         case portB:
                 _0x40006:
000082 30e2      	CPI  R30,LOW(0x2)
000083 e0a0      	LDI  R26,HIGH(0x2)
000084 07fa      	CPC  R31,R26
000085 f421      	BRNE _0x40007
                 ; 0002 000E         DDRB=0x00; // as input
000086 e0e0      	LDI  R30,LOW(0)
000087 bbe7      	OUT  0x17,R30
                 ; 0002 000F         data=PINB;
000088 b316      	IN   R17,22
                 ; 0002 0010         break;
000089 c00f      	RJMP _0x40005
                 ; 0002 0011         case portC:
                 _0x40007:
00008a 30e3      	CPI  R30,LOW(0x3)
00008b e0a0      	LDI  R26,HIGH(0x3)
00008c 07fa      	CPC  R31,R26
00008d f421      	BRNE _0x40008
                 ; 0002 0012         DDRC=0x00; // as input
00008e e0e0      	LDI  R30,LOW(0)
00008f bbe4      	OUT  0x14,R30
                 ; 0002 0013         data=PINC;
000090 b313      	IN   R17,19
                 ; 0002 0014         break;
000091 c007      	RJMP _0x40005
                 ; 0002 0015         case portD:
                 _0x40008:
000092 30e4      	CPI  R30,LOW(0x4)
000093 e0a0      	LDI  R26,HIGH(0x4)
000094 07fa      	CPC  R31,R26
000095 f419      	BRNE _0x40005
                 ; 0002 0016         DDRD=0x00; // as input
000096 e0e0      	LDI  R30,LOW(0)
000097 bbe1      	OUT  0x11,R30
                 ; 0002 0017         data=PIND;
000098 b310      	IN   R17,16
                 ; 0002 0018         break;
                 ; 0002 0019   }
                 _0x40005:
                 ; 0002 001A 
                 ; 0002 001B return data;
000099 2fe1      	MOV  R30,R17
00009a 8118      	LDD  R17,Y+0
00009b 9623      	ADIW R28,3
00009c 9508      	RET
                 ; 0002 001C 
                 ; 0002 001D }
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func2(unsigned int port_out,unsigned data)
                 ; 0003 0004 {
                 
                 	.CSEG
                 _func2:
                 ; .FSTART _func2
                 ; 0003 0005 
                 ; 0003 0006 switch( port_out)
00009d 93ba      	ST   -Y,R27
00009e 93aa      	ST   -Y,R26
                 ;	port_out -> Y+2
                 ;	data -> Y+0
00009f 81ea      	LDD  R30,Y+2
0000a0 81fb      	LDD  R31,Y+2+1
                 ; 0003 0007     {
                 ; 0003 0008     case portA:
0000a1 30e1      	CPI  R30,LOW(0x1)
0000a2 e0a0      	LDI  R26,HIGH(0x1)
0000a3 07fa      	CPC  R31,R26
0000a4 f429      	BRNE _0x60006
                 ; 0003 0009         DDRA=0xFF;
0000a5 efef      	LDI  R30,LOW(255)
0000a6 bbea      	OUT  0x1A,R30
                 ; 0003 000A         PORTA=data;
0000a7 81e8      	LD   R30,Y
0000a8 bbeb      	OUT  0x1B,R30
                 ; 0003 000B     break ;
0000a9 c01a      	RJMP _0x60005
                 ; 0003 000C     case portB:
                 _0x60006:
0000aa 30e2      	CPI  R30,LOW(0x2)
0000ab e0a0      	LDI  R26,HIGH(0x2)
0000ac 07fa      	CPC  R31,R26
0000ad f429      	BRNE _0x60007
                 ; 0003 000D         DDRB=0xFF;
0000ae efef      	LDI  R30,LOW(255)
0000af bbe7      	OUT  0x17,R30
                 ; 0003 000E         PORTB=data;
0000b0 81e8      	LD   R30,Y
0000b1 bbe8      	OUT  0x18,R30
                 ; 0003 000F     break;
0000b2 c011      	RJMP _0x60005
                 ; 0003 0010     case portC:
                 _0x60007:
0000b3 30e3      	CPI  R30,LOW(0x3)
0000b4 e0a0      	LDI  R26,HIGH(0x3)
0000b5 07fa      	CPC  R31,R26
0000b6 f429      	BRNE _0x60008
                 ; 0003 0011         DDRC=0xFF;
0000b7 efef      	LDI  R30,LOW(255)
0000b8 bbe4      	OUT  0x14,R30
                 ; 0003 0012         PORTC=data;
0000b9 81e8      	LD   R30,Y
0000ba bbe5      	OUT  0x15,R30
                 ; 0003 0013     break;
0000bb c008      	RJMP _0x60005
                 ; 0003 0014     case portD:
                 _0x60008:
0000bc 30e4      	CPI  R30,LOW(0x4)
0000bd e0a0      	LDI  R26,HIGH(0x4)
0000be 07fa      	CPC  R31,R26
0000bf f421      	BRNE _0x60005
                 ; 0003 0015         DDRD=0xFF;
0000c0 efef      	LDI  R30,LOW(255)
0000c1 bbe1      	OUT  0x11,R30
                 ; 0003 0016         PORTD=data;
0000c2 81e8      	LD   R30,Y
0000c3 bbe2      	OUT  0x12,R30
                 ; 0003 0017     break;
                 ; 0003 0018 }
                 _0x60005:
                 ; 0003 0019 
                 ; 0003 001A return;
0000c4 9624      	ADIW R28,4
0000c5 9508      	RET
                 ; 0003 001B 
                 ; 0003 001C }
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func3(unsigned int times,unsigned int delay)
                 ; 0004 0004 {int i;
                 
                 	.CSEG
                 _func3:
                 ; .FSTART _func3
                 ; 0004 0005 
                 ; 0004 0006    for (i=0;i<times;i++)
0000c6 93ba      	ST   -Y,R27
0000c7 93aa      	ST   -Y,R26
0000c8 931a      	ST   -Y,R17
0000c9 930a      	ST   -Y,R16
                 ;	times -> Y+4
                 ;	delay -> Y+2
                 ;	i -> R16,R17
                +
0000ca e000     +LDI R16 , LOW ( 0 )
0000cb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x80004:
0000cc 81ec      	LDD  R30,Y+4
0000cd 81fd      	LDD  R31,Y+4+1
0000ce 170e      	CP   R16,R30
0000cf 071f      	CPC  R17,R31
0000d0 f468      	BRSH _0x80005
                 ; 0004 0007    {
                 ; 0004 0008         func2(portB,0xff);
0000d1 940e 013a 	CALL SUBOPT_0x1
0000d3 efaf      	LDI  R26,LOW(255)
0000d4 940e 0144 	CALL SUBOPT_0x3
                 ; 0004 0009         delay_ms(delay);
                 ; 0004 000A         func2(portB,0x00);
0000d6 940e 013a 	CALL SUBOPT_0x1
0000d8 e0a0      	LDI  R26,LOW(0)
0000d9 940e 0144 	CALL SUBOPT_0x3
                 ; 0004 000B         delay_ms(delay);
                 ; 0004 000C 
                 ; 0004 000D    }
                +
0000db 5f0f     +SUBI R16 , LOW ( - 1 )
0000dc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000dd cfee      	RJMP _0x80004
                 _0x80005:
                 ; 0004 000E 
                 ; 0004 000F 
                 ; 0004 0010 return;
0000de 8119      	LDD  R17,Y+1
0000df 8108      	LDD  R16,Y+0
0000e0 9626      	ADIW R28,6
0000e1 9508      	RET
                 ; 0004 0011 }
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func4()
                 ; 0005 0004 {
                 
                 	.CSEG
                 _func4:
                 ; .FSTART _func4
                 ; 0005 0005     char data;
                 ; 0005 0006     data = func1(portA);
0000e2 931a      	ST   -Y,R17
                 ;	data -> R17
0000e3 e0a1      	LDI  R26,LOW(1)
0000e4 e0b0      	LDI  R27,0
0000e5 940e 0075 	CALL _func1
0000e7 2f1e      	MOV  R17,R30
                 ; 0005 0007     func2(portB,data);
0000e8 d051      	RCALL SUBOPT_0x1
0000e9 2fa1      	MOV  R26,R17
0000ea 27bb      	CLR  R27
0000eb 940e 009d 	CALL _func2
                 ; 0005 0008     return;
0000ed 9119      	LD   R17,Y+
0000ee 9508      	RET
                 ; 0005 0009 }
                 ; .FEND
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void seven_seg_display (int data, int data_port, int enable_data)
                 ; 0006 0004 { char data_in;
                 
                 	.CSEG
                 _seven_seg_display:
                 ; .FSTART _seven_seg_display
                 ; 0006 0005  unsigned char digit[] = {0x3f,0x06,0x5B,0x4f,0x66,0x6D,0x7D,0x07,
                 ; 0006 0006                                  0x7F,0x6F};
                 ; 0006 0007 
                 ; 0006 0008 
                 ; 0006 0009   data_in = func1(enable_data);
0000ef 93ba      	ST   -Y,R27
0000f0 93aa      	ST   -Y,R26
0000f1 972a      	SBIW R28,10
0000f2 e08a      	LDI  R24,10
0000f3 e0a0      	LDI  R26,LOW(0)
0000f4 e0b0      	LDI  R27,HIGH(0)
0000f5 e5e4      	LDI  R30,LOW(_0xC0003*2)
0000f6 e0f0      	LDI  R31,HIGH(_0xC0003*2)
0000f7 940e 01ad 	CALL __INITLOCB
0000f9 931a      	ST   -Y,R17
                 ;	data -> Y+15
                 ;	data_port -> Y+13
                 ;	enable_data -> Y+11
                 ;	data_in -> R17
                 ;	digit -> Y+1
0000fa 85ab      	LDD  R26,Y+11
0000fb 85bc      	LDD  R27,Y+11+1
0000fc 940e 0075 	CALL _func1
0000fe 2f1e      	MOV  R17,R30
                 ; 0006 000A 
                 ; 0006 000B   func2(portD,0b00001110|(data_in &0b1));
0000ff d04b      	RCALL SUBOPT_0x4
000100 70e1      	ANDI R30,LOW(0x1)
000101 70f0      	ANDI R31,HIGH(0x1)
000102 60ee      	ORI  R30,LOW(0xE)
000103 d04e      	RCALL SUBOPT_0x5
                 ; 0006 000C   func2(portC,digit[data/1000]);
000104 89a9      	LDD  R26,Y+17
000105 89ba      	LDD  R27,Y+17+1
000106 eee8      	LDI  R30,LOW(1000)
000107 e0f3      	LDI  R31,HIGH(1000)
000108 940e 018c 	CALL __DIVW21
00010a d04b      	RCALL SUBOPT_0x6
                 ; 0006 000D   delay_ms(200);
                 ; 0006 000E 
                 ; 0006 000F   func2(portD,0b00001101| (data_in &0b10));
00010b 70e2      	ANDI R30,LOW(0x2)
00010c 70f0      	ANDI R31,HIGH(0x2)
00010d 60ed      	ORI  R30,LOW(0xD)
00010e d043      	RCALL SUBOPT_0x5
                 ; 0006 0010   func2(portC,digit[(data/100)%10]);
00010f 89a9      	LDD  R26,Y+17
000110 89ba      	LDD  R27,Y+17+1
000111 e6e4      	LDI  R30,LOW(100)
000112 e0f0      	LDI  R31,HIGH(100)
000113 d04f      	RCALL SUBOPT_0x7
                 ; 0006 0011 
                 ; 0006 0012   delay_ms(200);
                 ; 0006 0013 
                 ; 0006 0014   func2(portD,0b00001011 | (data_in &0b100));
000114 70e4      	ANDI R30,LOW(0x4)
000115 70f0      	ANDI R31,HIGH(0x4)
000116 60eb      	ORI  R30,LOW(0xB)
000117 d03a      	RCALL SUBOPT_0x5
                 ; 0006 0015   func2(portC,digit[(data/10)%10]);
000118 89a9      	LDD  R26,Y+17
000119 89ba      	LDD  R27,Y+17+1
00011a e0ea      	LDI  R30,LOW(10)
00011b e0f0      	LDI  R31,HIGH(10)
00011c d046      	RCALL SUBOPT_0x7
                 ; 0006 0016 
                 ; 0006 0017   delay_ms(200);
                 ; 0006 0018 
                 ; 0006 0019   func2(portD,0b00000111 | (data_in &0b1000));
00011d 70e8      	ANDI R30,LOW(0x8)
00011e 70f0      	ANDI R31,HIGH(0x8)
00011f 60e7      	ORI  R30,LOW(0x7)
000120 d031      	RCALL SUBOPT_0x5
                 ; 0006 001A   func2(portC,digit[data%10]);
000121 89a9      	LDD  R26,Y+17
000122 89ba      	LDD  R27,Y+17+1
000123 e0ea      	LDI  R30,LOW(10)
000124 e0f0      	LDI  R31,HIGH(10)
000125 940e 0191 	CALL __MODW21
000127 01de      	MOVW R26,R28
000128 9613      	ADIW R26,3
000129 0fae      	ADD  R26,R30
00012a 1fbf      	ADC  R27,R31
00012b 91ac      	LD   R26,X
00012c 27bb      	CLR  R27
00012d 940e 009d 	CALL _func2
                 ; 0006 001B   delay_ms(200);
00012f eca8      	LDI  R26,LOW(200)
000130 e0b0      	LDI  R27,0
000131 940e 016b 	CALL _delay_ms
                 ; 0006 001C 
                 ; 0006 001D 
                 ; 0006 001E return;
000133 8118      	LDD  R17,Y+0
000134 9661      	ADIW R28,17
000135 9508      	RET
                 ; 0006 001F }
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000136 eea8      	LDI  R26,LOW(1000)
000137 e0b3      	LDI  R27,HIGH(1000)
000138 940c 016b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00013a e0e2      	LDI  R30,LOW(2)
00013b e0f0      	LDI  R31,HIGH(2)
00013c 93fa      	ST   -Y,R31
00013d 93ea      	ST   -Y,R30
00013e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00013f e0e3      	LDI  R30,LOW(3)
000140 e0f0      	LDI  R31,HIGH(3)
000141 93fa      	ST   -Y,R31
000142 93ea      	ST   -Y,R30
000143 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000144 e0b0      	LDI  R27,0
000145 940e 009d 	CALL _func2
000147 81aa      	LDD  R26,Y+2
000148 81bb      	LDD  R27,Y+2+1
000149 940c 016b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
00014b e0e4      	LDI  R30,LOW(4)
00014c e0f0      	LDI  R31,HIGH(4)
00014d 93fa      	ST   -Y,R31
00014e 93ea      	ST   -Y,R30
00014f 2fe1      	MOV  R30,R17
000150 e0f0      	LDI  R31,0
000151 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000152 01df      	MOVW R26,R30
000153 940e 009d 	CALL _func2
000155 cfe9      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6:
000156 01de      	MOVW R26,R28
000157 9613      	ADIW R26,3
000158 0fae      	ADD  R26,R30
000159 1fbf      	ADC  R27,R31
00015a 91ac      	LD   R26,X
00015b 27bb      	CLR  R27
00015c 940e 009d 	CALL _func2
00015e eca8      	LDI  R26,LOW(200)
00015f e0b0      	LDI  R27,0
000160 940e 016b 	CALL _delay_ms
000162 cfe8      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000163 940e 018c 	CALL __DIVW21
000165 01df      	MOVW R26,R30
000166 e0ea      	LDI  R30,LOW(10)
000167 e0f0      	LDI  R31,HIGH(10)
000168 940e 0191 	CALL __MODW21
00016a cfeb      	RJMP SUBOPT_0x6
                 
                 
                 	.CSEG
                 _delay_ms:
00016b 9610      	adiw r26,0
00016c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016d ed80     +LDI R24 , LOW ( 0x7D0 )
00016e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00016f 9701     +SBIW R24 , 1
000170 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000171 95a8      	wdr
000172 9711      	sbiw r26,1
000173 f7c9      	brne __delay_ms0
                 __delay_ms1:
000174 9508      	ret
                 
                 __ANEGW1:
000175 95f1      	NEG  R31
000176 95e1      	NEG  R30
000177 40f0      	SBCI R31,0
000178 9508      	RET
                 
                 __DIVW21U:
000179 2400      	CLR  R0
00017a 2411      	CLR  R1
00017b e190      	LDI  R25,16
                 __DIVW21U1:
00017c 0faa      	LSL  R26
00017d 1fbb      	ROL  R27
00017e 1c00      	ROL  R0
00017f 1c11      	ROL  R1
000180 1a0e      	SUB  R0,R30
000181 0a1f      	SBC  R1,R31
000182 f418      	BRCC __DIVW21U2
000183 0e0e      	ADD  R0,R30
000184 1e1f      	ADC  R1,R31
000185 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000186 60a1      	SBR  R26,1
                 __DIVW21U3:
000187 959a      	DEC  R25
000188 f799      	BRNE __DIVW21U1
000189 01fd      	MOVW R30,R26
00018a 01d0      	MOVW R26,R0
00018b 9508      	RET
                 
                 __DIVW21:
00018c d012      	RCALL __CHKSIGNW
00018d dfeb      	RCALL __DIVW21U
00018e f40e      	BRTC __DIVW211
00018f dfe5      	RCALL __ANEGW1
                 __DIVW211:
000190 9508      	RET
                 
                 __MODW21:
000191 94e8      	CLT
000192 ffb7      	SBRS R27,7
000193 c004      	RJMP __MODW211
000194 95a0      	COM  R26
000195 95b0      	COM  R27
000196 9611      	ADIW R26,1
000197 9468      	SET
                 __MODW211:
000198 fdf7      	SBRC R31,7
000199 dfdb      	RCALL __ANEGW1
00019a dfde      	RCALL __DIVW21U
00019b 01fd      	MOVW R30,R26
00019c f40e      	BRTC __MODW212
00019d dfd7      	RCALL __ANEGW1
                 __MODW212:
00019e 9508      	RET
                 
                 __CHKSIGNW:
00019f 94e8      	CLT
0001a0 fff7      	SBRS R31,7
0001a1 c002      	RJMP __CHKSW1
0001a2 dfd2      	RCALL __ANEGW1
0001a3 9468      	SET
                 __CHKSW1:
0001a4 ffb7      	SBRS R27,7
0001a5 c006      	RJMP __CHKSW2
0001a6 95a0      	COM  R26
0001a7 95b0      	COM  R27
0001a8 9611      	ADIW R26,1
0001a9 f800      	BLD  R0,0
0001aa 9403      	INC  R0
0001ab fa00      	BST  R0,0
                 __CHKSW2:
0001ac 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001ad 0fac      	ADD  R26,R28
0001ae 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001af 9005      	LPM  R0,Z+
0001b0 920d      	ST   X+,R0
0001b1 958a      	DEC  R24
0001b2 f7e1      	BRNE __INITLOC0
0001b3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  10 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  20 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   4 r26:  62 r27:  32 r28:   9 r29:   2 r30:  83 r31:  43 
x  :   5 y  :  50 z  :   1 
Registers used: 15 out of 35 (42.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   9 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  29 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   1 cpc   :   9 cpi   :   8 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  24 ld    :   7 ldd   :  22 ldi   :  76 
lds   :   0 lpm   :   1 lsl   :   1 lsr   :   0 mov   :   5 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   4 out   :  18 pop   :   0 push  :   0 rcall :  18 ret   :  16 
reti  :   0 rjmp  :  16 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   0 sts   :   0 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000368    862     10    872   16384   5.3%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings

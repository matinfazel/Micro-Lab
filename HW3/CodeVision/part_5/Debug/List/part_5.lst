
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm Mon Mar 14 19:24:52 2022

D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _flags=R4
                 	.DEF _flags_msb=R5
                 	.DEF _inflags=R6
                 	.DEF _inflags_msb=R7
                 	.DEF _first_digit=R9
                 	.DEF _sec_digit=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0001      	.DB  0x0,0x0,0x1,0x0
00002c ffff      	.DB  0xFF,0xFF
                 
                 _0x3:
00002d 3130
00002e 3332
00002f 3534
000030 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
000031 3938
000032 4241
000033 4443
000034 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
                 _0x4:
000035 0010
000036 0020
000037 0040
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1136): warning: .cseg .db misalignment - padding zero byte
000038 0080      	.DB  0x10,0x0,0x20,0x0,0x40,0x0,0x80
                 _0x0:
000039 7053
00003a 6565
00003b 3a64
00003c 3f3f      	.DB  0x53,0x70,0x65,0x65,0x64,0x3A,0x3F,0x3F
00003d 3028
00003e 352d
00003f 7230
000040 0029      	.DB  0x28,0x30,0x2D,0x35,0x30,0x72,0x29,0x0
000041 4545
000042 5400
000043 6d69
000044 3a65      	.DB  0x45,0x45,0x0,0x54,0x69,0x6D,0x65,0x3A
000045 3f3f
000046 3028
000047 392d
000048 7339      	.DB  0x3F,0x3F,0x28,0x30,0x2D,0x39,0x39,0x73
000049 0029
00004a 3a57
00004b 3f3f
00004c 3028      	.DB  0x29,0x0,0x57,0x3A,0x3F,0x3F,0x28,0x30
00004d 392d
00004e 6b39
00004f 2967
000050 5400      	.DB  0x2D,0x39,0x39,0x6B,0x67,0x29,0x0,0x54
000051 6d65
000052 3a70
000053 3f3f
000054 3228      	.DB  0x65,0x6D,0x70,0x3A,0x3F,0x3F,0x28,0x32
000055 2d30
000056 3038
000057 2943
D:\Lecture\Micro-lab\HW3_matin_fazel_9825583\CodeVision\part_5\Debug\List\part_5.asm(1145): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x30,0x2D,0x38,0x30,0x43,0x29,0x0
                 _0x2000003:
000059 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005a 0006      	.DW  0x06
00005b 0004      	.DW  0x04
00005c 0054      	.DW  __REG_VARS*2
                 
00005d 0010      	.DW  0x10
00005e 01a8      	.DW  _data_key
00005f 005a      	.DW  _0x3*2
                 
000060 0007      	.DW  0x07
000061 01b8      	.DW  _row
000062 006a      	.DW  _0x4*2
                 
000063 0010      	.DW  0x10
000064 0160      	.DW  _0x20
000065 0072      	.DW  _0x0*2
                 
000066 0003      	.DW  0x03
000067 0170      	.DW  _0x20+16
000068 0082      	.DW  _0x0*2+16
                 
000069 000f      	.DW  0x0F
00006a 0173      	.DW  _0x32
00006b 0085      	.DW  _0x0*2+19
                 
00006c 0003      	.DW  0x03
00006d 0182      	.DW  _0x32+15
00006e 0082      	.DW  _0x0*2+16
                 
00006f 000d      	.DW  0x0D
000070 0185      	.DW  _0x44
000071 0094      	.DW  _0x0*2+34
                 
000072 0003      	.DW  0x03
000073 0192      	.DW  _0x44+13
000074 0082      	.DW  _0x0*2+16
                 
000075 0010      	.DW  0x10
000076 0195      	.DW  _0x56
000077 00a1      	.DW  _0x0*2+47
                 
000078 0003      	.DW  0x03
000079 01a5      	.DW  _0x56+16
00007a 0082      	.DW  _0x0*2+16
                 
00007b 0002      	.DW  0x02
00007c 01c0      	.DW  __base_y_G100
00007d 00b2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00007e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007f 94f8      	CLI
000080 27ee      	CLR  R30
000081 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000082 e0f1      	LDI  R31,1
000083 bffb      	OUT  GICR,R31
000084 bfeb      	OUT  GICR,R30
000085 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000086 e08d      	LDI  R24,(14-2)+1
000087 e0a2      	LDI  R26,2
000088 27bb      	CLR  R27
                 __CLEAR_REG:
000089 93ed      	ST   X+,R30
00008a 958a      	DEC  R24
00008b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00008f 93ed      	ST   X+,R30
000090 9701      	SBIW R24,1
000091 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000092 ebe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000093 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000094 9185      	LPM  R24,Z+
000095 9195      	LPM  R25,Z+
000096 9700      	SBIW R24,0
000097 f061      	BREQ __GLOBAL_INI_END
000098 91a5      	LPM  R26,Z+
000099 91b5      	LPM  R27,Z+
00009a 9005      	LPM  R0,Z+
00009b 9015      	LPM  R1,Z+
00009c 01bf      	MOVW R22,R30
00009d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009e 9005      	LPM  R0,Z+
00009f 920d      	ST   X+,R0
0000a0 9701      	SBIW R24,1
0000a1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a2 01fb      	MOVW R30,R22
0000a3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a5 bfed      	OUT  SPL,R30
0000a6 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a9 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000aa 940c 00e5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;char data_key[] = {
                 ;'0','1','2','3',
                 ;'4','5','6','7',
                 ;'8','9','A','B',
                 ;'C','D','E','F'};
                 
                 	.DSEG
                 ;int flags = 0;
                 ;int inflags = 1;
                 ;char first_digit = -1;
                 ;char sec_digit = -1;
                 ;
                 ;int row[4] = {0x10,0x20,0x40,0x80};
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;char keypad(void)
                 ; 0000 0013 {   char c;
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0014     char r;
                 ; 0000 0015     char key=100;
                 ; 0000 0016 
                 ; 0000 0017 
                 ; 0000 0018 
                 ; 0000 0019      inflags =0;
0000ac 940e 025f 	CALL __SAVELOCR4
                 ;	c -> R17
                 ;	r -> R16
                 ;	key -> R19
0000ae e634      	LDI  R19,100
0000af 2466      	CLR  R6
0000b0 2477      	CLR  R7
                 ; 0000 001A 
                 ; 0000 001B     for (r=0;r<4;r++)
0000b1 e000      	LDI  R16,LOW(0)
                 _0x6:
0000b2 3004      	CPI  R16,4
0000b3 f560      	BRSH _0x7
                 ; 0000 001C     {
                 ; 0000 001D         PORTB=row[r];
0000b4 2fe0      	MOV  R30,R16
0000b5 eba8      	LDI  R26,LOW(_row)
0000b6 e0b1      	LDI  R27,HIGH(_row)
0000b7 e0f0      	LDI  R31,0
0000b8 0fee      	LSL  R30
0000b9 1fff      	ROL  R31
0000ba 0fae      	ADD  R26,R30
0000bb 1fbf      	ADC  R27,R31
0000bc 91ec      	LD   R30,X
0000bd bbe8      	OUT  0x18,R30
                 ; 0000 001E         c=20;
0000be e114      	LDI  R17,LOW(20)
                 ; 0000 001F         delay_ms(10);
0000bf e0aa      	LDI  R26,LOW(10)
0000c0 e0b0      	LDI  R27,0
0000c1 940e 0255 	CALL _delay_ms
                 ; 0000 0020         if (PINB.0==1) c=0;
0000c3 99b0      	SBIC 0x16,0
0000c4 e010      	LDI  R17,LOW(0)
                 ; 0000 0021         if (PINB.1==1) c=1;
0000c5 99b1      	SBIC 0x16,1
0000c6 e011      	LDI  R17,LOW(1)
                 ; 0000 0022         if (PINB.2==1) c=2;
0000c7 99b2      	SBIC 0x16,2
0000c8 e012      	LDI  R17,LOW(2)
                 ; 0000 0023         if (PINB.3==1) c=3;
0000c9 99b3      	SBIC 0x16,3
0000ca e013      	LDI  R17,LOW(3)
                 ; 0000 0024         if (!(c==20)){
0000cb 3114      	CPI  R17,20
0000cc f079      	BREQ _0xC
                 ; 0000 0025         key=(r*4)+c;
0000cd 2fe0      	MOV  R30,R16
0000ce 0fee      	LSL  R30
0000cf 0fee      	LSL  R30
0000d0 0fe1      	ADD  R30,R17
0000d1 2f3e      	MOV  R19,R30
                 ; 0000 0026         PORTB=0xf0;
0000d2 efe0      	LDI  R30,LOW(240)
0000d3 bbe8      	OUT  0x18,R30
                 ; 0000 0027         while (PINB.0==1) {}
                 _0xD:
0000d4 99b0      	SBIC 0x16,0
0000d5 cffe      	RJMP _0xD
                 ; 0000 0028         while (PINB.1==1) {}
                 _0x10:
0000d6 99b1      	SBIC 0x16,1
0000d7 cffe      	RJMP _0x10
                 ; 0000 0029         while (PINB.2==1) {}
                 _0x13:
0000d8 99b2      	SBIC 0x16,2
0000d9 cffe      	RJMP _0x13
                 ; 0000 002A         while (PINB.3==1) {}
                 _0x16:
0000da 99b3      	SBIC 0x16,3
0000db cffe      	RJMP _0x16
                 ; 0000 002B         }
                 ; 0000 002C         PORTB=0xf0;
                 _0xC:
0000dc efe0      	LDI  R30,LOW(240)
0000dd bbe8      	OUT  0x18,R30
                 ; 0000 002D     }
0000de 5f0f      	SUBI R16,-1
0000df cfd2      	RJMP _0x6
                 _0x7:
                 ; 0000 002E 
                 ; 0000 002F 
                 ; 0000 0030     return key;
0000e0 2fe3      	MOV  R30,R19
0000e1 940e 0264 	CALL __LOADLOCR4
0000e3 9624      	ADIW R28,4
0000e4 9508      	RET
                 ; 0000 0031 }
                 ; .FEND
                 ;
                 ;void speed();
                 ;void Time();
                 ;void W();
                 ;void Temp();
                 ;
                 ;
                 ;void main(void)
                 ; 0000 003A {
                 _main:
                 ; .FSTART _main
                 ; 0000 003B //char tmp;
                 ; 0000 003C 
                 ; 0000 003D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 bbea      	OUT  0x1A,R30
                 ; 0000 003E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000e7 bbeb      	OUT  0x1B,R30
                 ; 0000 003F 
                 ; 0000 0040 DDRB=0xf0; // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
0000e8 efe0      	LDI  R30,LOW(240)
0000e9 bbe7      	OUT  0x17,R30
                 ; 0000 0041 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bbe8      	OUT  0x18,R30
                 ; 0000 0042 
                 ; 0000 0043 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ec bbe4      	OUT  0x14,R30
                 ; 0000 0044 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0045 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ed bbe5      	OUT  0x15,R30
                 ; 0000 0046 
                 ; 0000 0047 // Port D initialization
                 ; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0049 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000ee bbe1      	OUT  0x11,R30
                 ; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ef bbe2      	OUT  0x12,R30
                 ; 0000 004C 
                 ; 0000 004D 
                 ; 0000 004E GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
0000f0 b7eb      	IN   R30,0x3B
0000f1 68e0      	ORI  R30,0x80
0000f2 bfeb      	OUT  0x3B,R30
                 ; 0000 004F MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000f3 e0ec      	LDI  R30,LOW(12)
0000f4 bfe5      	OUT  0x35,R30
                 ; 0000 0050 MCUCSR=(0<<ISC2);
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 bfe4      	OUT  0x34,R30
                 ; 0000 0051 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
0000f7 e8e0      	LDI  R30,LOW(128)
0000f8 bfea      	OUT  0x3A,R30
                 ; 0000 0052 
                 ; 0000 0053 
                 ; 0000 0054 lcd_init(16);
0000f9 e1a0      	LDI  R26,LOW(16)
0000fa d0f1      	RCALL _lcd_init
                 ; 0000 0055 
                 ; 0000 0056 
                 ; 0000 0057 
                 ; 0000 0058 while (1)
                 _0x19:
                 ; 0000 0059       {
                 ; 0000 005A           speed();
0000fb d005      	RCALL _speed
                 ; 0000 005B           Time();
0000fc d027      	RCALL _Time
                 ; 0000 005C           W();
0000fd d045      	RCALL _W
                 ; 0000 005D           Temp();
0000fe d063      	RCALL _Temp
                 ; 0000 005E 
                 ; 0000 005F 
                 ; 0000 0060       }
0000ff cffb      	RJMP _0x19
                 ; 0000 0061 }
                 _0x1C:
000100 cfff      	RJMP _0x1C
                 ; .FEND
                 ;
                 ;
                 ;void speed()
                 ; 0000 0065 {   char tmp;
                 _speed:
                 ; .FSTART _speed
                 ; 0000 0066     while(1){
000101 931a      	ST   -Y,R17
                 ;	tmp -> R17
                 _0x1D:
                 ; 0000 0067         lcd_gotoxy(0,0);
000102 d114      	RCALL SUBOPT_0x0
                 ; 0000 0068         lcd_puts("Speed:??(0-50r)");
                +
000103 e6a0     +LDI R26 , LOW ( _0x20 + ( 0 ) )
000104 e0b1     +LDI R27 , HIGH ( _0x20 + ( 0 ) )
                 	__POINTW2MN _0x20,0
000105 d0d5      	RCALL _lcd_puts
                 ; 0000 0069         while(1)
                 _0x21:
                 ; 0000 006A         {
                 ; 0000 006B             tmp = keypad();
000106 d114      	RCALL SUBOPT_0x1
                 ; 0000 006C             if (tmp >=0 && tmp <=9){
000107 f010      	BRLO _0x25
000108 301a      	CPI  R17,10
000109 f008      	BRLO _0x26
                 _0x25:
00010a c002      	RJMP _0x24
                 _0x26:
                 ; 0000 006D                 lcd_gotoxy(0,1);
00010b d113      	RCALL SUBOPT_0x2
                 ; 0000 006E                 first_digit = tmp;
                 ; 0000 006F                 lcd_putchar(data_key[tmp]);
                 ; 0000 0070 
                 ; 0000 0071                 break;
00010c c001      	RJMP _0x23
                 ; 0000 0072             }
                 ; 0000 0073 
                 ; 0000 0074         }
                 _0x24:
00010d cff8      	RJMP _0x21
                 _0x23:
                 ; 0000 0075 
                 ; 0000 0076         while(1)
                 _0x27:
                 ; 0000 0077         {
                 ; 0000 0078             tmp = keypad();
00010e d10c      	RCALL SUBOPT_0x1
                 ; 0000 0079             if (tmp >=0 && tmp <=9){
00010f f010      	BRLO _0x2B
000110 301a      	CPI  R17,10
000111 f008      	BRLO _0x2C
                 _0x2B:
000112 c002      	RJMP _0x2A
                 _0x2C:
                 ; 0000 007A                 //lcd_gotoxy(2,2);
                 ; 0000 007B                 sec_digit = tmp;
000113 d116      	RCALL SUBOPT_0x3
                 ; 0000 007C                 lcd_putchar(data_key[tmp]);
                 ; 0000 007D                 break;
000114 c001      	RJMP _0x29
                 ; 0000 007E             }
                 ; 0000 007F 
                 ; 0000 0080         }
                 _0x2A:
000115 cff8      	RJMP _0x27
                 _0x29:
                 ; 0000 0081 
                 ; 0000 0082         if ( !(first_digit *10 + sec_digit <=50 )){
000116 d11a      	RCALL SUBOPT_0x4
000117 2de8      	MOV  R30,R8
000118 e0f0      	LDI  R31,0
000119 0fae      	ADD  R26,R30
00011a 1fbf      	ADC  R27,R31
00011b 97d3      	SBIW R26,51
00011c f024      	BRLT _0x2D
                 ; 0000 0083             lcd_puts("EE");
                +
00011d e7a0     +LDI R26 , LOW ( _0x20 + ( 16 ) )
00011e e0b1     +LDI R27 , HIGH ( _0x20 + ( 16 ) )
                 	__POINTW2MN _0x20,16
00011f d117      	RCALL SUBOPT_0x5
                 ; 0000 0084             delay_ms(2000);
                 ; 0000 0085             lcd_clear();
                 ; 0000 0086             }
                 ; 0000 0087 
                 ; 0000 0088         else{
000120 c002      	RJMP _0x2E
                 _0x2D:
                 ; 0000 0089             delay_ms(1000);
000121 d11b      	RCALL SUBOPT_0x6
                 ; 0000 008A             lcd_clear();
                 ; 0000 008B             return;
000122 c06a      	RJMP _0x2020002
                 ; 0000 008C 
                 ; 0000 008D          }
                 _0x2E:
                 ; 0000 008E         }
000123 cfde      	RJMP _0x1D
                 ; 0000 008F }
                 ; .FEND
                 
                 	.DSEG
                 _0x20:
000160           	.BYTE 0x13
                 ;
                 ;
                 ;
                 ;void Time()
                 ; 0000 0094 {   char tmp;
                 
                 	.CSEG
                 _Time:
                 ; .FSTART _Time
                 ; 0000 0095     while(1){
000124 931a      	ST   -Y,R17
                 ;	tmp -> R17
                 _0x2F:
                 ; 0000 0096         lcd_gotoxy(0,0);
000125 d0f1      	RCALL SUBOPT_0x0
                 ; 0000 0097         lcd_puts("Time:??(0-99s)");
                +
000126 e7a3     +LDI R26 , LOW ( _0x32 + ( 0 ) )
000127 e0b1     +LDI R27 , HIGH ( _0x32 + ( 0 ) )
                 	__POINTW2MN _0x32,0
000128 d0b2      	RCALL _lcd_puts
                 ; 0000 0098         while(1)
                 _0x33:
                 ; 0000 0099         {
                 ; 0000 009A             tmp = keypad();
000129 d0f1      	RCALL SUBOPT_0x1
                 ; 0000 009B             if (tmp >=0 && tmp <=9){
00012a f010      	BRLO _0x37
00012b 301a      	CPI  R17,10
00012c f008      	BRLO _0x38
                 _0x37:
00012d c002      	RJMP _0x36
                 _0x38:
                 ; 0000 009C                 lcd_gotoxy(0,1);
00012e d0f0      	RCALL SUBOPT_0x2
                 ; 0000 009D                 first_digit = tmp;
                 ; 0000 009E                 lcd_putchar(data_key[tmp]);
                 ; 0000 009F 
                 ; 0000 00A0                 break;
00012f c001      	RJMP _0x35
                 ; 0000 00A1             }
                 ; 0000 00A2 
                 ; 0000 00A3         }
                 _0x36:
000130 cff8      	RJMP _0x33
                 _0x35:
                 ; 0000 00A4 
                 ; 0000 00A5         while(1)
                 _0x39:
                 ; 0000 00A6         {
                 ; 0000 00A7             tmp = keypad();
000131 d0e9      	RCALL SUBOPT_0x1
                 ; 0000 00A8             if (tmp >=0 && tmp <=9){
000132 f010      	BRLO _0x3D
000133 301a      	CPI  R17,10
000134 f008      	BRLO _0x3E
                 _0x3D:
000135 c002      	RJMP _0x3C
                 _0x3E:
                 ; 0000 00A9                 //lcd_gotoxy(2,2);
                 ; 0000 00AA                 sec_digit = tmp;
000136 d0f3      	RCALL SUBOPT_0x3
                 ; 0000 00AB                 lcd_putchar(data_key[tmp]);
                 ; 0000 00AC                 break;
000137 c001      	RJMP _0x3B
                 ; 0000 00AD             }
                 ; 0000 00AE 
                 ; 0000 00AF         }
                 _0x3C:
000138 cff8      	RJMP _0x39
                 _0x3B:
                 ; 0000 00B0 
                 ; 0000 00B1         if ( !(first_digit *10 + sec_digit <=99 ) ){
000139 d0f7      	RCALL SUBOPT_0x4
00013a d107      	RCALL SUBOPT_0x7
00013b f024      	BRLT _0x3F
                 ; 0000 00B2             lcd_puts("EE");
                +
00013c e8a2     +LDI R26 , LOW ( _0x32 + ( 15 ) )
00013d e0b1     +LDI R27 , HIGH ( _0x32 + ( 15 ) )
                 	__POINTW2MN _0x32,15
00013e d0f8      	RCALL SUBOPT_0x5
                 ; 0000 00B3             delay_ms(2000);
                 ; 0000 00B4             lcd_clear();
                 ; 0000 00B5             }
                 ; 0000 00B6 
                 ; 0000 00B7         else{
00013f c002      	RJMP _0x40
                 _0x3F:
                 ; 0000 00B8             delay_ms(1000);
000140 d0fc      	RCALL SUBOPT_0x6
                 ; 0000 00B9             lcd_clear();
                 ; 0000 00BA             return;
000141 c04b      	RJMP _0x2020002
                 ; 0000 00BB 
                 ; 0000 00BC          }
                 _0x40:
                 ; 0000 00BD 
                 ; 0000 00BE     }
000142 cfe2      	RJMP _0x2F
                 ; 0000 00BF 
                 ; 0000 00C0 
                 ; 0000 00C1 }
                 ; .FEND
                 
                 	.DSEG
                 _0x32:
000173           	.BYTE 0x12
                 ;
                 ;void W()
                 ; 0000 00C4 {   char tmp;
                 
                 	.CSEG
                 _W:
                 ; .FSTART _W
                 ; 0000 00C5     while(1){
000143 931a      	ST   -Y,R17
                 ;	tmp -> R17
                 _0x41:
                 ; 0000 00C6         lcd_gotoxy(0,0);
000144 d0d2      	RCALL SUBOPT_0x0
                 ; 0000 00C7         lcd_puts("W:??(0-99kg)");
                +
000145 e8a5     +LDI R26 , LOW ( _0x44 + ( 0 ) )
000146 e0b1     +LDI R27 , HIGH ( _0x44 + ( 0 ) )
                 	__POINTW2MN _0x44,0
000147 d093      	RCALL _lcd_puts
                 ; 0000 00C8         while(1)
                 _0x45:
                 ; 0000 00C9         {
                 ; 0000 00CA             tmp = keypad();
000148 d0d2      	RCALL SUBOPT_0x1
                 ; 0000 00CB             if (tmp >=0 && tmp <=9){
000149 f010      	BRLO _0x49
00014a 301a      	CPI  R17,10
00014b f008      	BRLO _0x4A
                 _0x49:
00014c c002      	RJMP _0x48
                 _0x4A:
                 ; 0000 00CC                 lcd_gotoxy(0,1);
00014d d0d1      	RCALL SUBOPT_0x2
                 ; 0000 00CD                 first_digit = tmp;
                 ; 0000 00CE                 lcd_putchar(data_key[tmp]);
                 ; 0000 00CF 
                 ; 0000 00D0                 break;
00014e c001      	RJMP _0x47
                 ; 0000 00D1             }
                 ; 0000 00D2 
                 ; 0000 00D3         }
                 _0x48:
00014f cff8      	RJMP _0x45
                 _0x47:
                 ; 0000 00D4 
                 ; 0000 00D5         while(1)
                 _0x4B:
                 ; 0000 00D6         {
                 ; 0000 00D7             tmp = keypad();
000150 d0ca      	RCALL SUBOPT_0x1
                 ; 0000 00D8             if (tmp >=0 && tmp <=9){
000151 f010      	BRLO _0x4F
000152 301a      	CPI  R17,10
000153 f008      	BRLO _0x50
                 _0x4F:
000154 c002      	RJMP _0x4E
                 _0x50:
                 ; 0000 00D9                 //lcd_gotoxy(2,2);
                 ; 0000 00DA                 sec_digit = tmp;
000155 d0d4      	RCALL SUBOPT_0x3
                 ; 0000 00DB                 lcd_putchar(data_key[tmp]);
                 ; 0000 00DC                 break;
000156 c001      	RJMP _0x4D
                 ; 0000 00DD             }
                 ; 0000 00DE 
                 ; 0000 00DF         }
                 _0x4E:
000157 cff8      	RJMP _0x4B
                 _0x4D:
                 ; 0000 00E0 
                 ; 0000 00E1         if (!(first_digit *10 + sec_digit <=99) ){
000158 d0d8      	RCALL SUBOPT_0x4
000159 d0e8      	RCALL SUBOPT_0x7
00015a f024      	BRLT _0x51
                 ; 0000 00E2             lcd_puts("EE");
                +
00015b e9a2     +LDI R26 , LOW ( _0x44 + ( 13 ) )
00015c e0b1     +LDI R27 , HIGH ( _0x44 + ( 13 ) )
                 	__POINTW2MN _0x44,13
00015d d0d9      	RCALL SUBOPT_0x5
                 ; 0000 00E3             delay_ms(2000);
                 ; 0000 00E4             lcd_clear();
                 ; 0000 00E5                }
                 ; 0000 00E6 
                 ; 0000 00E7         else{
00015e c002      	RJMP _0x52
                 _0x51:
                 ; 0000 00E8             delay_ms(1000);
00015f d0dd      	RCALL SUBOPT_0x6
                 ; 0000 00E9             lcd_clear();
                 ; 0000 00EA             return;
000160 c02c      	RJMP _0x2020002
                 ; 0000 00EB 
                 ; 0000 00EC          }
                 _0x52:
                 ; 0000 00ED         }
000161 cfe2      	RJMP _0x41
                 ; 0000 00EE 
                 ; 0000 00EF }
                 ; .FEND
                 
                 	.DSEG
                 _0x44:
000185           	.BYTE 0x10
                 ;
                 ;
                 ;void Temp()
                 ; 0000 00F3 {   char tmp;
                 
                 	.CSEG
                 _Temp:
                 ; .FSTART _Temp
                 ; 0000 00F4     while(1){
000162 931a      	ST   -Y,R17
                 ;	tmp -> R17
                 _0x53:
                 ; 0000 00F5     lcd_gotoxy(0,0);
000163 d0b3      	RCALL SUBOPT_0x0
                 ; 0000 00F6     lcd_puts("Temp:??(20-80C)");
                +
000164 e9a5     +LDI R26 , LOW ( _0x56 + ( 0 ) )
000165 e0b1     +LDI R27 , HIGH ( _0x56 + ( 0 ) )
                 	__POINTW2MN _0x56,0
000166 d074      	RCALL _lcd_puts
                 ; 0000 00F7     while(1)
                 _0x57:
                 ; 0000 00F8     {
                 ; 0000 00F9         tmp = keypad();
000167 d0b3      	RCALL SUBOPT_0x1
                 ; 0000 00FA         if (tmp >=0 && tmp <=9){
000168 f010      	BRLO _0x5B
000169 301a      	CPI  R17,10
00016a f008      	BRLO _0x5C
                 _0x5B:
00016b c002      	RJMP _0x5A
                 _0x5C:
                 ; 0000 00FB             lcd_gotoxy(0,1);
00016c d0b2      	RCALL SUBOPT_0x2
                 ; 0000 00FC             first_digit = tmp;
                 ; 0000 00FD             lcd_putchar(data_key[tmp]);
                 ; 0000 00FE 
                 ; 0000 00FF             break;
00016d c001      	RJMP _0x59
                 ; 0000 0100         }
                 ; 0000 0101 
                 ; 0000 0102     }
                 _0x5A:
00016e cff8      	RJMP _0x57
                 _0x59:
                 ; 0000 0103 
                 ; 0000 0104     while(1)
                 _0x5D:
                 ; 0000 0105     {
                 ; 0000 0106         tmp = keypad();
00016f d0ab      	RCALL SUBOPT_0x1
                 ; 0000 0107         if (tmp >=0 && tmp <=9){
000170 f010      	BRLO _0x61
000171 301a      	CPI  R17,10
000172 f008      	BRLO _0x62
                 _0x61:
000173 c002      	RJMP _0x60
                 _0x62:
                 ; 0000 0108             //lcd_gotoxy(2,2);
                 ; 0000 0109             sec_digit = tmp;
000174 d0b5      	RCALL SUBOPT_0x3
                 ; 0000 010A             lcd_putchar(data_key[tmp]);
                 ; 0000 010B             break;
000175 c001      	RJMP _0x5F
                 ; 0000 010C         }
                 ; 0000 010D 
                 ; 0000 010E     }
                 _0x60:
000176 cff8      	RJMP _0x5D
                 _0x5F:
                 ; 0000 010F 
                 ; 0000 0110     if (!(first_digit *10 + sec_digit <=80 &&  first_digit *10 + sec_digit >=20))
000177 d0b9      	RCALL SUBOPT_0x4
000178 27ee      	CLR  R30
000179 0da8      	ADD  R26,R8
00017a 1fbe      	ADC  R27,R30
00017b 35a1      	CPI  R26,LOW(0x51)
00017c e0e0      	LDI  R30,HIGH(0x51)
00017d 07be      	CPC  R27,R30
00017e f43c      	BRGE _0x64
00017f 01d0      	MOVW R26,R0
000180 2de8      	MOV  R30,R8
000181 e0f0      	LDI  R31,0
000182 0fae      	ADD  R26,R30
000183 1fbf      	ADC  R27,R31
000184 9754      	SBIW R26,20
000185 f424      	BRGE _0x63
                 _0x64:
                 ; 0000 0111       {
                 ; 0000 0112         lcd_puts("EE");
                +
000186 eaa5     +LDI R26 , LOW ( _0x56 + ( 16 ) )
000187 e0b1     +LDI R27 , HIGH ( _0x56 + ( 16 ) )
                 	__POINTW2MN _0x56,16
000188 d0ae      	RCALL SUBOPT_0x5
                 ; 0000 0113         delay_ms(2000);
                 ; 0000 0114         lcd_clear();
                 ; 0000 0115       }
                 ; 0000 0116 
                 ; 0000 0117     else{   delay_ms(1000);
000189 c002      	RJMP _0x66
                 _0x63:
00018a d0b2      	RCALL SUBOPT_0x6
                 ; 0000 0118             lcd_clear();
                 ; 0000 0119 
                 ; 0000 011A             return;
00018b c001      	RJMP _0x2020002
                 ; 0000 011B 
                 ; 0000 011C 
                 ; 0000 011D            }
                 _0x66:
                 ; 0000 011E 
                 ; 0000 011F 
                 ; 0000 0120     }
00018c cfd6      	RJMP _0x53
                 ; 0000 0121 
                 ; 0000 0122 }
                 _0x2020002:
00018d 9119      	LD   R17,Y+
00018e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x56:
000195           	.BYTE 0x13
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00018f 93aa      	ST   -Y,R26
000190 b3eb      	IN   R30,0x1B
000191 70ef      	ANDI R30,LOW(0xF)
000192 2fae      	MOV  R26,R30
000193 81e8      	LD   R30,Y
000194 7fe0      	ANDI R30,LOW(0xF0)
000195 2bea      	OR   R30,R26
000196 bbeb      	OUT  0x1B,R30
                +
000197 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000198 958a     +DEC R24
000199 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00019a 9ada      	SBI  0x1B,2
                +
00019b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00019c 958a     +DEC R24
00019d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00019e 98da      	CBI  0x1B,2
                +
00019f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a0 958a     +DEC R24
0001a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a2 c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001a3 93aa      	ST   -Y,R26
0001a4 81a8      	LD   R26,Y
0001a5 dfe9      	RCALL __lcd_write_nibble_G100
0001a6 81e8          ld    r30,y
0001a7 95e2          swap  r30
0001a8 83e8          st    y,r30
0001a9 81a8      	LD   R26,Y
0001aa dfe4      	RCALL __lcd_write_nibble_G100
                +
0001ab e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001ac 958a     +DEC R24
0001ad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001ae c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001af 93aa      	ST   -Y,R26
0001b0 81e8      	LD   R30,Y
0001b1 e0f0      	LDI  R31,0
0001b2 54e0      	SUBI R30,LOW(-__base_y_G100)
0001b3 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001b4 81e0      	LD   R30,Z
0001b5 81a9      	LDD  R26,Y+1
0001b6 0fae      	ADD  R26,R30
0001b7 dfeb      	RCALL __lcd_write_data
0001b8 80b9      	LDD  R11,Y+1
0001b9 80a8      	LDD  R10,Y+0
0001ba 9622      	ADIW R28,2
0001bb 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001bc e0a2      	LDI  R26,LOW(2)
0001bd d08b      	RCALL SUBOPT_0x8
0001be e0ac      	LDI  R26,LOW(12)
0001bf dfe3      	RCALL __lcd_write_data
0001c0 e0a1      	LDI  R26,LOW(1)
0001c1 d087      	RCALL SUBOPT_0x8
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 2eae      	MOV  R10,R30
0001c4 2ebe      	MOV  R11,R30
0001c5 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001c6 93aa      	ST   -Y,R26
0001c7 81a8      	LD   R26,Y
0001c8 30aa      	CPI  R26,LOW(0xA)
0001c9 f011      	BREQ _0x2000005
0001ca 14bd      	CP   R11,R13
0001cb f048      	BRLO _0x2000004
                 _0x2000005:
0001cc e0e0      	LDI  R30,LOW(0)
0001cd 93ea      	ST   -Y,R30
0001ce 94a3      	INC  R10
0001cf 2daa      	MOV  R26,R10
0001d0 dfde      	RCALL _lcd_gotoxy
0001d1 81a8      	LD   R26,Y
0001d2 30aa      	CPI  R26,LOW(0xA)
0001d3 f409      	BRNE _0x2000007
0001d4 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001d5 94b3      	INC  R11
0001d6 9ad8      	SBI  0x1B,0
0001d7 81a8      	LD   R26,Y
0001d8 dfca      	RCALL __lcd_write_data
0001d9 98d8      	CBI  0x1B,0
0001da c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001db 93ba      	ST   -Y,R27
0001dc 93aa      	ST   -Y,R26
0001dd 931a      	ST   -Y,R17
                 _0x2000008:
0001de 81a9      	LDD  R26,Y+1
0001df 81ba      	LDD  R27,Y+1+1
0001e0 91ed      	LD   R30,X+
0001e1 83a9      	STD  Y+1,R26
0001e2 83ba      	STD  Y+1+1,R27
0001e3 2f1e      	MOV  R17,R30
0001e4 30e0      	CPI  R30,0
0001e5 f019      	BREQ _0x200000A
0001e6 2fa1      	MOV  R26,R17
0001e7 dfde      	RCALL _lcd_putchar
0001e8 cff5      	RJMP _0x2000008
                 _0x200000A:
0001e9 8118      	LDD  R17,Y+0
0001ea 9623      	ADIW R28,3
0001eb 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001ec 93aa      	ST   -Y,R26
0001ed b3ea      	IN   R30,0x1A
0001ee 6fe0      	ORI  R30,LOW(0xF0)
0001ef bbea      	OUT  0x1A,R30
0001f0 9ad2      	SBI  0x1A,2
0001f1 9ad0      	SBI  0x1A,0
0001f2 9ad1      	SBI  0x1A,1
0001f3 98da      	CBI  0x1B,2
0001f4 98d8      	CBI  0x1B,0
0001f5 98d9      	CBI  0x1B,1
0001f6 80d8      	LDD  R13,Y+0
0001f7 81e8      	LD   R30,Y
0001f8 58e0      	SUBI R30,-LOW(128)
                +
0001f9 93e0 01c2+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001fb 81e8      	LD   R30,Y
0001fc 54e0      	SUBI R30,-LOW(192)
                +
0001fd 93e0 01c3+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001ff e1a4      	LDI  R26,LOW(20)
000200 e0b0      	LDI  R27,0
000201 940e 0255 	CALL _delay_ms
000203 d04a      	RCALL SUBOPT_0x9
000204 d049      	RCALL SUBOPT_0x9
000205 d048      	RCALL SUBOPT_0x9
000206 e2a0      	LDI  R26,LOW(32)
000207 df87      	RCALL __lcd_write_nibble_G100
                +
000208 ec88     +LDI R24 , LOW ( 200 )
000209 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00020a 9701     +SBIW R24 , 1
00020b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00020c e2a8      	LDI  R26,LOW(40)
00020d df95      	RCALL __lcd_write_data
00020e e0a4      	LDI  R26,LOW(4)
00020f df93      	RCALL __lcd_write_data
000210 e8a5      	LDI  R26,LOW(133)
000211 df91      	RCALL __lcd_write_data
000212 e0a6      	LDI  R26,LOW(6)
000213 df8f      	RCALL __lcd_write_data
000214 dfa7      	RCALL _lcd_clear
                 _0x2020001:
000215 9621      	ADIW R28,1
000216 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _data_key:
0001a8           	.BYTE 0x10
                 _row:
0001b8           	.BYTE 0x8
                 __base_y_G100:
0001c0           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000217 e0e0      	LDI  R30,LOW(0)
000218 93ea      	ST   -Y,R30
000219 e0a0      	LDI  R26,LOW(0)
00021a cf94      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
00021b de90      	RCALL _keypad
00021c 2f1e      	MOV  R17,R30
00021d 3010      	CPI  R17,0
00021e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x2:
00021f e0e0      	LDI  R30,LOW(0)
000220 93ea      	ST   -Y,R30
000221 e0a1      	LDI  R26,LOW(1)
000222 df8c      	RCALL _lcd_gotoxy
000223 2e91      	MOV  R9,R17
000224 2fe1      	MOV  R30,R17
000225 e0f0      	LDI  R31,0
000226 55e8      	SUBI R30,LOW(-_data_key)
000227 4ffe      	SBCI R31,HIGH(-_data_key)
000228 81a0      	LD   R26,Z
000229 cf9c      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3:
00022a 2e81      	MOV  R8,R17
00022b 2fe1      	MOV  R30,R17
00022c e0f0      	LDI  R31,0
00022d 55e8      	SUBI R30,LOW(-_data_key)
00022e 4ffe      	SBCI R31,HIGH(-_data_key)
00022f 81a0      	LD   R26,Z
000230 cf95      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000231 2da9      	MOV  R26,R9
000232 e0ea      	LDI  R30,LOW(10)
000233 9fea      	MUL  R30,R26
000234 01f0      	MOVW R30,R0
000235 01df      	MOVW R26,R30
000236 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000237 dfa3      	RCALL _lcd_puts
000238 eda0      	LDI  R26,LOW(2000)
000239 e0b7      	LDI  R27,HIGH(2000)
00023a 940e 0255 	CALL _delay_ms
00023c cf7f      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
00023d eea8      	LDI  R26,LOW(1000)
00023e e0b3      	LDI  R27,HIGH(1000)
00023f 940e 0255 	CALL _delay_ms
000241 cf7a      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000242 27ee      	CLR  R30
000243 0da8      	ADD  R26,R8
000244 1fbe      	ADC  R27,R30
000245 36a4      	CPI  R26,LOW(0x64)
000246 e0e0      	LDI  R30,HIGH(0x64)
000247 07be      	CPC  R27,R30
000248 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000249 df59      	RCALL __lcd_write_data
00024a e0a3      	LDI  R26,LOW(3)
00024b e0b0      	LDI  R27,0
00024c 940c 0255 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
00024e e3a0      	LDI  R26,LOW(48)
00024f df3f      	RCALL __lcd_write_nibble_G100
                +
000250 ec88     +LDI R24 , LOW ( 200 )
000251 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000252 9701     +SBIW R24 , 1
000253 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000254 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000255 9610      	adiw r26,0
000256 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000257 ed80     +LDI R24 , LOW ( 0x7D0 )
000258 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000259 9701     +SBIW R24 , 1
00025a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00025b 95a8      	wdr
00025c 9711      	sbiw r26,1
00025d f7c9      	brne __delay_ms0
                 __delay_ms1:
00025e 9508      	ret
                 
                 __SAVELOCR4:
00025f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000260 932a      	ST   -Y,R18
                 __SAVELOCR2:
000261 931a      	ST   -Y,R17
000262 930a      	ST   -Y,R16
000263 9508      	RET
                 
                 __LOADLOCR4:
000264 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000265 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000266 8119      	LDD  R17,Y+1
000267 8108      	LD   R16,Y
000268 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   1 r7 :   1 
r8 :   5 r9 :   2 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   0 
r16:   7 r17:  32 r18:   2 r19:   5 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  67 r27:  26 r28:   5 r29:   1 r30: 105 r31:  16 
x  :   5 y  :  44 z  :  10 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   7 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   3 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   2 cpi   :  16 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  23 ld    :  17 ldd   :  10 ldi   :  90 
lds   :   0 lpm   :   7 lsl   :   3 lsr   :   0 mov   :  18 movw  :   6 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  23 pop   :   0 push  :   0 rcall :  66 ret   :  13 
reti  :   0 rjmp  :  54 rol   :   1 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :   5 sbic  :   8 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   2 sts   :   2 sub   :   0 subi  :   6 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004d2   1064    170   1234   16384   7.5%
[.dseg] 0x000060 0x0001c4      0    100    100    1024   9.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings

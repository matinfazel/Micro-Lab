;
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include <font5x7.h>
;#include <delay.h>
;// Declare your global variables here
;const unsigned short data[] = {
;        0xFF, 0x07, 0x1C, 0x70, 0xE0, 0x3C, 0x06, 0xFF,  // Code for char
;        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char !
;
;        };
;
;
;    int r = 0;
;    int c = 0;
;    int x = 8;
;    int y = 0;
;void writing();
;         void question1();
;void main(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001C // Declare your local variables here
; 0000 001D // Variable used to store graphic display
; 0000 001E // controller initialization data
; 0000 001F GLCDINIT_t glcd_init_data;
; 0000 0020 
; 0000 0021 // Input/Output Ports initialization
; 0000 0022 // Port A initialization
; 0000 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0024 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000E VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0026 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0027 
; 0000 0028 // Port B initialization
; 0000 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D 
; 0000 002E // Port C initialization
; 0000 002F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0030 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0031 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0032 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033 
; 0000 0034 // Port D initialization
; 0000 0035 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0036 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0037 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0038 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0039 
; 0000 003A // Graphic Display Controller initialization
; 0000 003B // The KS0108 connections are specified in the
; 0000 003C // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 003D // DB0 - PORTC Bit 0
; 0000 003E // DB1 - PORTC Bit 1
; 0000 003F // DB2 - PORTC Bit 2
; 0000 0040 // DB3 - PORTC Bit 3
; 0000 0041 // DB4 - PORTC Bit 4
; 0000 0042 // DB5 - PORTC Bit 5
; 0000 0043 // DB6 - PORTC Bit 6
; 0000 0044 // DB7 - PORTC Bit 7
; 0000 0045 // E - PORTD Bit 0
; 0000 0046 // RD /WR - PORTD Bit 1
; 0000 0047 // RS - PORTD Bit 2
; 0000 0048 // /RST - PORTD Bit 3
; 0000 0049 // /CS1 - PORTD Bit 5
; 0000 004A // /CS2 - PORTD Bit 4
; 0000 004B 
; 0000 004C // Specify the current font for displaying text
; 0000 004D glcd_init_data.font=font5x7;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004E // No function is used for reading
; 0000 004F // image data from external memory
; 0000 0050 glcd_init_data.readxmem=NULL;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0051 // No function is used for writing
; 0000 0052 // image data to external memory
; 0000 0053 glcd_init_data.writexmem=NULL;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0054 
; 0000 0055 glcd_init(&glcd_init_data);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0056 
; 0000 0057 
; 0000 0058 DDRA = 0xff;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0059 DDRB = 0xff;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005A while (1)
;PCODE: $0000002B VOL: 0
; 0000 005B       {
; 0000 005C       // Place your code here
; 0000 005D 
; 0000 005E                     //question1();
; 0000 005F                PORTB = data[5];
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0060                PORTA = data[5];
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0061       }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0062 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;
;
;
; void question1(){
; 0000 0067 void question1(){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0068 
; 0000 0069     int i=0;
; 0000 006A 
; 0000 006B     while(1){
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;	i -> R16,R17
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006C         for(i=0;i<100;i++){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006D 
; 0000 006E              writing()   ;
;PCODE: $0000004A VOL: 0
; 0000 006F           }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0070 
; 0000 0071           if (x == 248)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0072           {
; 0000 0073             x = 8;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0074             y = 0;
;PCODE: $00000055 VOL: 0
; 0000 0075             r=0;
;PCODE: $00000056 VOL: 0
; 0000 0076             c=0;
;PCODE: $00000057 VOL: 0
; 0000 0077           }
; 0000 0078 
; 0000 0079           else
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007A           {
; 0000 007B              x =  x + 8;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 007C              y = y + 8;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 007D           }
;PCODE: $00000060 VOL: 0
; 0000 007E 
; 0000 007F     }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0080 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;void writing()
; 0000 0083 {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0084 
; 0000 0085                 PORTD = 0x80;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0086                 PORTB = data[r];
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0087                 PORTA = 1<<c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0088 
; 0000 0089                 delay_ms(2);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008A 
; 0000 008B                 PORTD = 0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 008C                 PORTB = data[r+8];
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008D                 PORTA = 1<<c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008E 
; 0000 008F                 r++;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0090                 if (r == x)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0091                 {
; 0000 0092                     r = y;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0093                 }
; 0000 0094                 c = (c+1)%8;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0095                 delay_ms(2);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0096 
; 0000 0097 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0

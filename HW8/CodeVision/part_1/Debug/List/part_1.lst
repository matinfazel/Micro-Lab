
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm Sat May 28 21:38:42 2022

D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1095): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _r=R4
                 	.DEF _r_msb=R5
                 	.DEF _c=R6
                 	.DEF _c_msb=R7
                 	.DEF _x=R8
                 	.DEF _x_msb=R9
                 	.DEF _y=R10
                 	.DEF _y_msb=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0142 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _font5x7:
00002a 0705
00002b 6020
00002c 0000
00002d 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00002e 0000
00002f 5f00
000030 0000
000031 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
000032 0700
000033 1400
000034 147f
000035 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000036 2a24
000037 2a7f
000038 2312
000039 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
00003a 6264
00003b 4936
00003c 2255
00003d 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00003e 0305
00003f 0000
000040 1c00
000041 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
000042 0000
000043 2241
000044 001c
000045 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000046 2a1c
000047 0808
000048 3e08
000049 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
00004a 5000
00004b 0030
00004c 0800
00004d 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00004e 0808
00004f 3000
000050 0030
000051 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
000052 0810
000053 0204
000054 513e
000055 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000056 003e
000057 7f42
000058 0040
000059 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
00005a 4951
00005b 2146
00005c 4541
00005d 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00005e 1418
00005f 7f12
000060 2710
000061 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
000062 3945
000063 4a3c
000064 4949
000065 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000066 0971
000067 0305
000068 4936
000069 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
00006a 0636
00006b 4949
00006c 1e29
00006d 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00006e 0036
00006f 0000
000070 3656
000071 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
000072 0800
000073 2214
000074 1441
000075 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000076 1414
000077 2241
000078 0814
000079 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
00007a 5101
00007b 0609
00007c 4932
00007d 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00007e 7e3e
00007f 1111
000080 7e11
000081 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
000082 4949
000083 3e36
000084 4141
000085 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
000086 417f
000087 2241
000088 7f1c
000089 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
00008a 4149
00008b 097f
00008c 0109
00008d 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
00008e 4141
00008f 3251
000090 087f
000091 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
000092 007f
000093 7f41
000094 0041
000095 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
000096 3f41
000097 7f01
000098 1408
000099 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
00009a 407f
00009b 4040
00009c 7f40
00009d 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
00009e 7f02
00009f 047f
0000a0 1008
0000a1 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000a2 4141
0000a3 3e41
0000a4 097f
0000a5 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000a6 3e06
0000a7 5141
0000a8 5e21
0000a9 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000aa 2919
0000ab 4646
0000ac 4949
0000ad 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ae 0101
0000af 017f
0000b0 3f01
0000b1 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000b2 3f40
0000b3 201f
0000b4 2040
0000b5 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000b6 1820
0000b7 7f20
0000b8 1463
0000b9 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000ba 0363
0000bb 7804
0000bc 0304
0000bd 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000be 4549
0000bf 0043
0000c0 7f00
0000c1 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000c2 0402
0000c3 1008
0000c4 4120
0000c5 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000c6 0000
0000c7 0204
0000c8 0201
0000c9 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000ca 4040
0000cb 4040
0000cc 0100
0000cd 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ce 2000
0000cf 5454
0000d0 7854
0000d1 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000d2 4444
0000d3 3838
0000d4 4444
0000d5 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000d6 4438
0000d7 4844
0000d8 387f
0000d9 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000da 1854
0000db 7e08
0000dc 0109
0000dd 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000de 5414
0000df 3c54
0000e0 087f
0000e1 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000e2 0078
0000e3 7d44
0000e4 0040
0000e5 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
0000e6 3d44
0000e7 0000
0000e8 107f
0000e9 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
0000ea 4100
0000eb 407f
0000ec 7c00
0000ed 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
0000ee 7804
0000ef 087c
0000f0 0404
0000f1 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
0000f2 4444
0000f3 3844
0000f4 147c
0000f5 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
0000f6 0808
0000f7 1414
0000f8 7c18
0000f9 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
0000fa 0404
0000fb 4808
0000fc 5454
0000fd 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
0000fe 3f04
0000ff 4044
000100 3c20
000101 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
000102 7c20
000103 201c
000104 2040
000105 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000106 3040
000107 3c40
000108 2844
000109 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
00010a 0c44
00010b 5050
00010c 3c50
00010d 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00010e 4c54
00010f 0044
000110 3608
000111 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
000112 0000
000113 007f
000114 0000
000115 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000116 0008
000117 0102
000118 0402
000119 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
00011a 4141
00011b 7f41      	.DB  0x41,0x41,0x41,0x7F
                 _data:
00011c 00ff
00011d 0007
00011e 001c
00011f 0070      	.DB  0xFF,0x0,0x7,0x0,0x1C,0x0,0x70,0x0
000120 00e0
000121 003c
000122 0006
000123 00ff      	.DB  0xE0,0x0,0x3C,0x0,0x6,0x0,0xFF,0x0
000124 0000
000125 0000
000126 0000
000127 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000128 0000
000129 0000
00012a 0000
00012b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 __glcd_mask:
00012c 0100
00012d 0703
00012e 1f0f
00012f 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1195): warning: .cseg .db misalignment - padding zero byte
000130 00ff      	.DB  0xFF
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000131 0000
000132 0000      	.DB  0x0,0x0,0x0,0x0
000133 0008
000134 0000      	.DB  0x8,0x0,0x0,0x0
                 
                 _0x20C0060:
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1203): warning: .cseg .db misalignment - padding zero byte
000135 0001      	.DB  0x1
                 _0x20C0000:
000136 4e2d
000137 4e41
000138 4900
000139 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Lecture\Micro-lab\Hw8_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1206): warning: .cseg .db misalignment - padding zero byte
00013a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00013b 0008      	.DW  0x08
00013c 0004      	.DW  0x04
00013d 0262      	.DW  __REG_VARS*2
                 
00013e 0001      	.DW  0x01
00013f 0180      	.DW  __seed_G106
000140 026a      	.DW  _0x20C0060*2
                 
                 _0xFFFFFFFF:
000141 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000142 94f8      	CLI
000143 27ee      	CLR  R30
000144 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000145 e0f1      	LDI  R31,1
000146 bffb      	OUT  GICR,R31
000147 bfeb      	OUT  GICR,R30
000148 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000149 e08d      	LDI  R24,(14-2)+1
00014a e0a2      	LDI  R26,2
00014b 27bb      	CLR  R27
                 __CLEAR_REG:
00014c 93ed      	ST   X+,R30
00014d 958a      	DEC  R24
00014e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00014f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000150 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000151 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000152 93ed      	ST   X+,R30
000153 9701      	SBIW R24,1
000154 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000155 e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000156 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000157 9185      	LPM  R24,Z+
000158 9195      	LPM  R25,Z+
000159 9700      	SBIW R24,0
00015a f061      	BREQ __GLOBAL_INI_END
00015b 91a5      	LPM  R26,Z+
00015c 91b5      	LPM  R27,Z+
00015d 9005      	LPM  R0,Z+
00015e 9015      	LPM  R1,Z+
00015f 01bf      	MOVW R22,R30
000160 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000161 9005      	LPM  R0,Z+
000162 920d      	ST   X+,R0
000163 9701      	SBIW R24,1
000164 f7e1      	BRNE __GLOBAL_INI_LOOP
000165 01fb      	MOVW R30,R22
000166 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000167 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000168 bfed      	OUT  SPL,R30
000169 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00016a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00016b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00016c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00016d 940c 016f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Graphic Display functions
                 ;#include <glcd.h>
                 ;
                 ;// Font used for displaying text
                 ;// on the graphic display
                 ;#include <font5x7.h>
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;const unsigned short data[] = {
                 ;        0xFF, 0x07, 0x1C, 0x70, 0xE0, 0x3C, 0x06, 0xFF,  // Code for char
                 ;        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char !
                 ;
                 ;        };
                 ;
                 ;
                 ;    int r = 0;
                 ;    int c = 0;
                 ;    int x = 8;
                 ;    int y = 0;
                 ;void writing();
                 ;         void question1();
                 ;void main(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001C // Declare your local variables here
                 ; 0000 001D // Variable used to store graphic display
                 ; 0000 001E // controller initialization data
                 ; 0000 001F GLCDINIT_t glcd_init_data;
                 ; 0000 0020 
                 ; 0000 0021 // Input/Output Ports initialization
                 ; 0000 0022 // Port A initialization
                 ; 0000 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0024 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00016f 9726      	SBIW R28,6
                 ;	glcd_init_data -> Y+0
000170 e0e0      	LDI  R30,LOW(0)
000171 bbea      	OUT  0x1A,R30
                 ; 0000 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0026 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000172 bbeb      	OUT  0x1B,R30
                 ; 0000 0027 
                 ; 0000 0028 // Port B initialization
                 ; 0000 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000173 bbe7      	OUT  0x17,R30
                 ; 0000 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000174 bbe8      	OUT  0x18,R30
                 ; 0000 002D 
                 ; 0000 002E // Port C initialization
                 ; 0000 002F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0030 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000175 bbe4      	OUT  0x14,R30
                 ; 0000 0031 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0032 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000176 bbe5      	OUT  0x15,R30
                 ; 0000 0033 
                 ; 0000 0034 // Port D initialization
                 ; 0000 0035 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0036 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000177 bbe1      	OUT  0x11,R30
                 ; 0000 0037 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0038 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000178 bbe2      	OUT  0x12,R30
                 ; 0000 0039 
                 ; 0000 003A // Graphic Display Controller initialization
                 ; 0000 003B // The KS0108 connections are specified in the
                 ; 0000 003C // Project|Configure|C Compiler|Libraries|Graphic Display menu:
                 ; 0000 003D // DB0 - PORTC Bit 0
                 ; 0000 003E // DB1 - PORTC Bit 1
                 ; 0000 003F // DB2 - PORTC Bit 2
                 ; 0000 0040 // DB3 - PORTC Bit 3
                 ; 0000 0041 // DB4 - PORTC Bit 4
                 ; 0000 0042 // DB5 - PORTC Bit 5
                 ; 0000 0043 // DB6 - PORTC Bit 6
                 ; 0000 0044 // DB7 - PORTC Bit 7
                 ; 0000 0045 // E - PORTD Bit 0
                 ; 0000 0046 // RD /WR - PORTD Bit 1
                 ; 0000 0047 // RS - PORTD Bit 2
                 ; 0000 0048 // /RST - PORTD Bit 3
                 ; 0000 0049 // /CS1 - PORTD Bit 5
                 ; 0000 004A // /CS2 - PORTD Bit 4
                 ; 0000 004B 
                 ; 0000 004C // Specify the current font for displaying text
                 ; 0000 004D glcd_init_data.font=font5x7;
000179 e5e4      	LDI  R30,LOW(_font5x7*2)
00017a e0f0      	LDI  R31,HIGH(_font5x7*2)
00017b 83e8      	ST   Y,R30
00017c 83f9      	STD  Y+1,R31
                 ; 0000 004E // No function is used for reading
                 ; 0000 004F // image data from external memory
                 ; 0000 0050 glcd_init_data.readxmem=NULL;
00017d e0e0      	LDI  R30,LOW(0)
00017e 83ea      	STD  Y+2,R30
00017f 83eb      	STD  Y+2+1,R30
                 ; 0000 0051 // No function is used for writing
                 ; 0000 0052 // image data to external memory
                 ; 0000 0053 glcd_init_data.writexmem=NULL;
000180 83ec      	STD  Y+4,R30
000181 83ed      	STD  Y+4+1,R30
                 ; 0000 0054 
                 ; 0000 0055 glcd_init(&glcd_init_data);
000182 01de      	MOVW R26,R28
000183 d07a      	RCALL _glcd_init
                 ; 0000 0056 
                 ; 0000 0057 
                 ; 0000 0058 DDRA = 0xff;
000184 efef      	LDI  R30,LOW(255)
000185 bbea      	OUT  0x1A,R30
                 ; 0000 0059 DDRB = 0xff;
000186 bbe7      	OUT  0x17,R30
                 ; 0000 005A while (1)
                 _0x3:
                 ; 0000 005B       {
                 ; 0000 005C       // Place your code here
                 ; 0000 005D 
                 ; 0000 005E                     //question1();
                 ; 0000 005F                PORTB = data[5];
                +
000187 e4e2     +LDI R30 , LOW ( 2 * _data + ( 10 ) )
000188 e0f2     +LDI R31 , HIGH ( 2 * _data + ( 10 ) )
                 	__POINTW1FN _data,10
000189 9004      	LPM  R0,Z
00018a ba08      	OUT  0x18,R0
                 ; 0000 0060                PORTA = data[5];
                +
00018b e4e2     +LDI R30 , LOW ( 2 * _data + ( 10 ) )
00018c e0f2     +LDI R31 , HIGH ( 2 * _data + ( 10 ) )
                 	__POINTW1FN _data,10
00018d 9004      	LPM  R0,Z
00018e ba0b      	OUT  0x1B,R0
                 ; 0000 0061       }
00018f cff7      	RJMP _0x3
                 ; 0000 0062 }
                 _0x6:
000190 cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ; void question1(){
                 ; 0000 0067 void question1(){
                 ; 0000 0068 
                 ; 0000 0069     int i=0;
                 ; 0000 006A 
                 ; 0000 006B     while(1){
                 ;	i -> R16,R17
                 ; 0000 006C         for(i=0;i<100;i++){
                 ; 0000 006D 
                 ; 0000 006E              writing()   ;
                 ; 0000 006F           }
                 ; 0000 0070 
                 ; 0000 0071           if (x == 248)
                 ; 0000 0072           {
                 ; 0000 0073             x = 8;
                 ; 0000 0074             y = 0;
                 ; 0000 0075             r=0;
                 ; 0000 0076             c=0;
                 ; 0000 0077           }
                 ; 0000 0078 
                 ; 0000 0079           else
                 ; 0000 007A           {
                 ; 0000 007B              x =  x + 8;
                 ; 0000 007C              y = y + 8;
                 ; 0000 007D           }
                 ; 0000 007E 
                 ; 0000 007F     }
                 ; 0000 0080 }
                 ;
                 ;void writing()
                 ; 0000 0083 {
                 ; 0000 0084 
                 ; 0000 0085                 PORTD = 0x80;
                 ; 0000 0086                 PORTB = data[r];
                 ; 0000 0087                 PORTA = 1<<c;
                 ; 0000 0088 
                 ; 0000 0089                 delay_ms(2);
                 ; 0000 008A 
                 ; 0000 008B                 PORTD = 0x00;
                 ; 0000 008C                 PORTB = data[r+8];
                 ; 0000 008D                 PORTA = 1<<c;
                 ; 0000 008E 
                 ; 0000 008F                 r++;
                 ; 0000 0090                 if (r == x)
                 ; 0000 0091                 {
                 ; 0000 0092                     r = y;
                 ; 0000 0093                 }
                 ; 0000 0094                 c = (c+1)%8;
                 ; 0000 0095                 delay_ms(2);
                 ; 0000 0096 
                 ; 0000 0097 }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _ks0108_enable_G100:
                 ; .FSTART _ks0108_enable_G100
000191 0000      	nop
000192 9a90      	SBI  0x12,0
000193 0000      	nop
000194 9508      	RET
                 ; .FEND
                 _ks0108_disable_G100:
                 ; .FSTART _ks0108_disable_G100
000195 9890      	CBI  0x12,0
000196 9a95      	SBI  0x12,5
000197 9a94      	SBI  0x12,4
000198 9508      	RET
                 ; .FEND
                 _ks0108_rdbus_G100:
                 ; .FSTART _ks0108_rdbus_G100
000199 931a      	ST   -Y,R17
00019a dff6      	RCALL _ks0108_enable_G100
00019b b313      	IN   R17,19
00019c 9890      	CBI  0x12,0
00019d 2fe1      	MOV  R30,R17
00019e 9119      	LD   R17,Y+
00019f 9508      	RET
                 ; .FEND
                 _ks0108_busy_G100:
                 ; .FSTART _ks0108_busy_G100
0001a0 93aa      	ST   -Y,R26
0001a1 931a      	ST   -Y,R17
0001a2 e0e0      	LDI  R30,LOW(0)
0001a3 bbe4      	OUT  0x14,R30
0001a4 9a91      	SBI  0x12,1
0001a5 9892      	CBI  0x12,2
0001a6 81a9      	LDD  R26,Y+1
0001a7 e0e2      	LDI  R30,LOW(2)
0001a8 1bea      	SUB  R30,R26
0001a9 2f1e      	MOV  R17,R30
0001aa ff10      	SBRS R17,0
0001ab c002      	RJMP _0x2000003
0001ac 9a95      	SBI  0x12,5
0001ad c001      	RJMP _0x2000004
                 _0x2000003:
0001ae 9895      	CBI  0x12,5
                 _0x2000004:
0001af ff11      	SBRS R17,1
0001b0 c002      	RJMP _0x2000005
0001b1 9a94      	SBI  0x12,4
0001b2 c001      	RJMP _0x2000006
                 _0x2000005:
0001b3 9894      	CBI  0x12,4
                 _0x2000006:
                 _0x2000007:
0001b4 dfe4      	RCALL _ks0108_rdbus_G100
0001b5 78e0      	ANDI R30,LOW(0x80)
0001b6 f7e9      	BRNE _0x2000007
0001b7 8118      	LDD  R17,Y+0
0001b8 c0ff      	RJMP _0x2100001
                 ; .FEND
                 _ks0108_wrcmd_G100:
                 ; .FSTART _ks0108_wrcmd_G100
0001b9 93aa      	ST   -Y,R26
0001ba 81a9      	LDD  R26,Y+1
0001bb dfe4      	RCALL _ks0108_busy_G100
0001bc 940e 02ca 	CALL SUBOPT_0x0
0001be c0f9      	RJMP _0x2100001
                 ; .FEND
                 _ks0108_setloc_G100:
                 ; .FSTART _ks0108_setloc_G100
                +
0001bf 91e0 017e+LDS R30 , _ks0108_coord_G100 + ( 1 )
                 	__GETB1MN _ks0108_coord_G100,1
0001c1 93ea      	ST   -Y,R30
0001c2 91e0 017d 	LDS  R30,_ks0108_coord_G100
0001c4 73ef      	ANDI R30,LOW(0x3F)
0001c5 64e0      	ORI  R30,0x40
0001c6 2fae      	MOV  R26,R30
0001c7 dff1      	RCALL _ks0108_wrcmd_G100
                +
0001c8 91e0 017e+LDS R30 , _ks0108_coord_G100 + ( 1 )
                 	__GETB1MN _ks0108_coord_G100,1
0001ca 93ea      	ST   -Y,R30
                +
0001cb 91e0 017f+LDS R30 , _ks0108_coord_G100 + ( 2 )
                 	__GETB1MN _ks0108_coord_G100,2
0001cd 6be8      	ORI  R30,LOW(0xB8)
0001ce 2fae      	MOV  R26,R30
0001cf dfe9      	RCALL _ks0108_wrcmd_G100
0001d0 9508      	RET
                 ; .FEND
                 _ks0108_gotoxp_G100:
                 ; .FSTART _ks0108_gotoxp_G100
0001d1 93aa      	ST   -Y,R26
0001d2 81e9      	LDD  R30,Y+1
0001d3 93e0 017d 	STS  _ks0108_coord_G100,R30
0001d5 95e2      	SWAP R30
0001d6 70ef      	ANDI R30,0xF
0001d7 95e6      	LSR  R30
0001d8 95e6      	LSR  R30
                +
0001d9 93e0 017e+STS _ks0108_coord_G100 + ( 1 ) , R30
                 	__PUTB1MN _ks0108_coord_G100,1
0001db 81e8      	LD   R30,Y
                +
0001dc 93e0 017f+STS _ks0108_coord_G100 + ( 2 ) , R30
                 	__PUTB1MN _ks0108_coord_G100,2
0001de dfe0      	RCALL _ks0108_setloc_G100
0001df c0d8      	RJMP _0x2100001
                 ; .FEND
                 _ks0108_nextx_G100:
                 ; .FSTART _ks0108_nextx_G100
0001e0 91a0 017d 	LDS  R26,_ks0108_coord_G100
0001e2 5faf      	SUBI R26,-LOW(1)
0001e3 93a0 017d 	STS  _ks0108_coord_G100,R26
0001e5 38a0      	CPI  R26,LOW(0x80)
0001e6 f018      	BRLO _0x200000A
0001e7 e0e0      	LDI  R30,LOW(0)
0001e8 93e0 017d 	STS  _ks0108_coord_G100,R30
                 _0x200000A:
0001ea 91e0 017d 	LDS  R30,_ks0108_coord_G100
0001ec 73ef      	ANDI R30,LOW(0x3F)
0001ed f431      	BRNE _0x200000B
0001ee 91e0 017d 	LDS  R30,_ks0108_coord_G100
0001f0 93ea      	ST   -Y,R30
                +
0001f1 91a0 017f+LDS R26 , _ks0108_coord_G100 + ( 2 )
                 	__GETB2MN _ks0108_coord_G100,2
0001f3 dfdd      	RCALL _ks0108_gotoxp_G100
                 _0x200000B:
0001f4 9508      	RET
                 ; .FEND
                 _ks0108_wrdata_G100:
                 ; .FSTART _ks0108_wrdata_G100
0001f5 93aa      	ST   -Y,R26
                +
0001f6 91a0 017e+LDS R26 , _ks0108_coord_G100 + ( 1 )
                 	__GETB2MN _ks0108_coord_G100,1
0001f8 dfa7      	RCALL _ks0108_busy_G100
0001f9 9a92      	SBI  0x12,2
0001fa 940e 02ca 	CALL SUBOPT_0x0
0001fc 9621      	ADIW R28,1
0001fd 9508      	RET
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
0001fe 93ba      	ST   -Y,R27
0001ff 93aa      	ST   -Y,R26
000200 931a      	ST   -Y,R17
000201 9a88      	SBI  0x11,0
000202 9a89      	SBI  0x11,1
000203 9a8a      	SBI  0x11,2
000204 9a8b      	SBI  0x11,3
000205 9a93      	SBI  0x12,3
000206 9a8d      	SBI  0x11,5
000207 9a8c      	SBI  0x11,4
000208 df8c      	RCALL _ks0108_disable_G100
000209 9893      	CBI  0x12,3
00020a e6a4      	LDI  R26,LOW(100)
00020b e0b0      	LDI  R27,0
00020c 940e 02da 	CALL _delay_ms
00020e 9a93      	SBI  0x12,3
00020f e010      	LDI  R17,LOW(0)
                 _0x200000C:
000210 3012      	CPI  R17,2
000211 f440      	BRSH _0x200000E
000212 931a      	ST   -Y,R17
000213 e3af      	LDI  R26,LOW(63)
000214 dfa4      	RCALL _ks0108_wrcmd_G100
000215 931a      	ST   -Y,R17
000216 9513      	INC  R17
000217 eca0      	LDI  R26,LOW(192)
000218 dfa0      	RCALL _ks0108_wrcmd_G100
000219 cff6      	RJMP _0x200000C
                 _0x200000E:
00021a e0e1      	LDI  R30,LOW(1)
00021b 93e0 0160 	STS  _glcd_state,R30
00021d e0e0      	LDI  R30,LOW(0)
                +
00021e 93e0 0161+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000220 81e9      	LDD  R30,Y+1
000221 81fa      	LDD  R31,Y+1+1
000222 9730      	SBIW R30,0
000223 f0a9      	BREQ _0x200000F
000224 81a9      	LDD  R26,Y+1
000225 81ba      	LDD  R27,Y+1+1
000226 940e 02e4 	CALL __GETW1P
                +
000228 93e0 0164+STS _glcd_state + ( 4 ) , R30
00022a 93f0 0165+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
00022c 9612      	ADIW R26,2
00022d 940e 02e4 	CALL __GETW1P
                +
00022f 93e0 0179+STS _glcd_state + ( 25 ) , R30
000231 93f0 017a+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
000233 81a9      	LDD  R26,Y+1
000234 81ba      	LDD  R27,Y+1+1
000235 9614      	ADIW R26,4
000236 940e 02e4 	CALL __GETW1P
000238 c00a      	RJMP _0x20000AC
                 _0x200000F:
000239 e0e0      	LDI  R30,LOW(0)
00023a e0f0      	LDI  R31,HIGH(0)
                +
00023b 93e0 0164+STS _glcd_state + ( 4 ) , R30
00023d 93f0 0165+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
00023f 93e0 0179+STS _glcd_state + ( 25 ) , R30
000241 93f0 017a+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20000AC:
                +
000243 93e0 017b+STS _glcd_state + ( 27 ) , R30
000245 93f0 017c+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000247 e0e1      	LDI  R30,LOW(1)
                +
000248 93e0 0166+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
00024a 93e0 0167+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
00024c 93e0 0168+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
00024e efef      	LDI  R30,LOW(255)
                +
00024f 93e0 0169+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000251 e0e1      	LDI  R30,LOW(1)
                +
000252 93e0 0170+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000254 e7e1     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000255 e0f1     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000256 93fa      	ST   -Y,R31
000257 93ea      	ST   -Y,R30
000258 efef      	LDI  R30,LOW(255)
000259 93ea      	ST   -Y,R30
00025a e0a8      	LDI  R26,LOW(8)
00025b e0b0      	LDI  R27,0
00025c 940e 02ba 	CALL _memset
00025e d004      	RCALL _glcd_clear
00025f e0e1      	LDI  R30,LOW(1)
000260 8118      	LDD  R17,Y+0
000261 9623      	ADIW R28,3
000262 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
000263 940e 02ec 	CALL __SAVELOCR4
000265 e000      	LDI  R16,0
000266 e030      	LDI  R19,0
                +
000267 91e0 0161+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000269 30e0      	CPI  R30,0
00026a f009      	BREQ _0x2000015
00026b ef0f      	LDI  R16,LOW(255)
                 _0x2000015:
                 _0x2000016:
00026c 3038      	CPI  R19,8
00026d f478      	BRSH _0x2000018
00026e e0e0      	LDI  R30,LOW(0)
00026f 93ea      	ST   -Y,R30
000270 2fa3      	MOV  R26,R19
000271 5f3f      	SUBI R19,-1
000272 df5e      	RCALL _ks0108_gotoxp_G100
000273 e010      	LDI  R17,LOW(0)
                 _0x2000019:
000274 2fa1      	MOV  R26,R17
000275 5f1f      	SUBI R17,-1
000276 38a0      	CPI  R26,LOW(0x80)
000277 f420      	BRSH _0x200001B
000278 2fa0      	MOV  R26,R16
000279 df7b      	RCALL _ks0108_wrdata_G100
00027a df65      	RCALL _ks0108_nextx_G100
00027b cff8      	RJMP _0x2000019
                 _0x200001B:
00027c cfef      	RJMP _0x2000016
                 _0x2000018:
00027d e0e0      	LDI  R30,LOW(0)
00027e 93ea      	ST   -Y,R30
00027f e0a0      	LDI  R26,LOW(0)
000280 df50      	RCALL _ks0108_gotoxp_G100
000281 e0e0      	LDI  R30,LOW(0)
000282 93ea      	ST   -Y,R30
000283 e0a0      	LDI  R26,LOW(0)
000284 d028      	RCALL _glcd_moveto
000285 940e 02f1 	CALL __LOADLOCR4
000287 9624      	ADIW R28,4
000288 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000289 940e 02d3 	CALL SUBOPT_0x1
00028b f01c      	BRLT _0x2020003
00028c e0e0      	LDI  R30,LOW(0)
00028d e0f0      	LDI  R31,HIGH(0)
00028e c029      	RJMP _0x2100001
                 _0x2020003:
00028f 81a8      	LD   R26,Y
000290 81b9      	LDD  R27,Y+1
000291 38a0      	CPI  R26,LOW(0x80)
000292 e0e0      	LDI  R30,HIGH(0x80)
000293 07be      	CPC  R27,R30
000294 f01c      	BRLT _0x2020004
000295 e7ef      	LDI  R30,LOW(127)
000296 e0f0      	LDI  R31,HIGH(127)
000297 c020      	RJMP _0x2100001
                 _0x2020004:
000298 81e8      	LD   R30,Y
000299 81f9      	LDD  R31,Y+1
00029a c01d      	RJMP _0x2100001
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
00029b 940e 02d3 	CALL SUBOPT_0x1
00029d f01c      	BRLT _0x2020005
00029e e0e0      	LDI  R30,LOW(0)
00029f e0f0      	LDI  R31,HIGH(0)
0002a0 c017      	RJMP _0x2100001
                 _0x2020005:
0002a1 81a8      	LD   R26,Y
0002a2 81b9      	LDD  R27,Y+1
0002a3 34a0      	CPI  R26,LOW(0x40)
0002a4 e0e0      	LDI  R30,HIGH(0x40)
0002a5 07be      	CPC  R27,R30
0002a6 f01c      	BRLT _0x2020006
0002a7 e3ef      	LDI  R30,LOW(63)
0002a8 e0f0      	LDI  R31,HIGH(63)
0002a9 c00e      	RJMP _0x2100001
                 _0x2020006:
0002aa 81e8      	LD   R30,Y
0002ab 81f9      	LDD  R31,Y+1
0002ac c00b      	RJMP _0x2100001
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
0002ad 93aa      	ST   -Y,R26
0002ae 81a9      	LDD  R26,Y+1
0002af 27bb      	CLR  R27
0002b0 dfd8      	RCALL _glcd_clipx
                +
0002b1 93e0 0162+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
0002b3 81a8      	LD   R26,Y
0002b4 27bb      	CLR  R27
0002b5 dfe5      	RCALL _glcd_clipy
                +
0002b6 93e0 0163+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
                 _0x2100001:
0002b8 9622      	ADIW R28,2
0002b9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0002ba 93ba      	ST   -Y,R27
0002bb 93aa      	ST   -Y,R26
0002bc 81b9          ldd  r27,y+1
0002bd 81a8          ld   r26,y
0002be 9610          adiw r26,0
0002bf f031          breq memset1
0002c0 81fc          ldd  r31,y+4
0002c1 81eb          ldd  r30,y+3
0002c2 816a          ldd  r22,y+2
                 memset0:
0002c3 9361          st   z+,r22
0002c4 9711          sbiw r26,1
0002c5 f7e9          brne memset0
                 memset1:
0002c6 81eb          ldd  r30,y+3
0002c7 81fc          ldd  r31,y+4
0002c8 9625      	ADIW R28,5
0002c9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _glcd_state:
000160           	.BYTE 0x1D
                 _ks0108_coord_G100:
00017d           	.BYTE 0x3
                 __seed_G106:
000180           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
0002ca 9891      	CBI  0x12,1
0002cb efef      	LDI  R30,LOW(255)
0002cc bbe4      	OUT  0x14,R30
0002cd 81e8      	LD   R30,Y
0002ce bbe5      	OUT  0x15,R30
0002cf 940e 0191 	CALL _ks0108_enable_G100
0002d1 940c 0195 	JMP  _ks0108_disable_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002d3 93ba      	ST   -Y,R27
0002d4 93aa      	ST   -Y,R26
0002d5 81a8      	LD   R26,Y
0002d6 81b9      	LDD  R27,Y+1
0002d7 940e 02e8 	CALL __CPW02
0002d9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002da 9610      	adiw r26,0
0002db f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002dc ed80     +LDI R24 , LOW ( 0x7D0 )
0002dd e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002de 9701     +SBIW R24 , 1
0002df f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002e0 95a8      	wdr
0002e1 9711      	sbiw r26,1
0002e2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002e3 9508      	ret
                 
                 __GETW1P:
0002e4 91ed      	LD   R30,X+
0002e5 91fc      	LD   R31,X
0002e6 9711      	SBIW R26,1
0002e7 9508      	RET
                 
                 __CPW02:
0002e8 2400      	CLR  R0
0002e9 160a      	CP   R0,R26
0002ea 060b      	CPC  R0,R27
0002eb 9508      	RET
                 
                 __SAVELOCR4:
0002ec 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002ed 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002ee 931a      	ST   -Y,R17
0002ef 930a      	ST   -Y,R16
0002f0 9508      	RET
                 
                 __LOADLOCR4:
0002f1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002f2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002f3 8119      	LDD  R17,Y+1
0002f4 8108      	LD   R16,Y
0002f5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  21 r18:   2 r19:   6 r20:   0 r21:   0 r22:   4 r23:   0 
r24:   9 r25:   3 r26:  51 r27:  18 r28:   8 r29:   1 r30: 120 r31:  25 
x  :   5 y  :  72 z  :  10 
Registers used: 18 out of 35 (51.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   9 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   4 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  13 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   3 cpi   :   7 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  23 ld    :  13 ldd   :  26 ldi   :  64 
lds   :  10 lpm   :  11 lsl   :   0 lsr   :   2 mov   :   7 movw  :   4 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   2 or    :   0 
ori   :   2 out   :  21 pop   :   0 push  :   0 rcall :  20 ret   :  16 
reti  :   0 rjmp  :  20 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :  15 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  34 std   :   5 sts   :  24 sub   :   1 subi  :   3 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 42 out of 116 (36.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005ec    956    560   1516   16384   9.3%
[.dseg] 0x000060 0x000184      0     36     36    1024   3.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings

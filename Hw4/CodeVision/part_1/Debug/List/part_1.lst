
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm Mon Apr 04 23:23:38 2022

D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_1\Debug\List\part_1.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 007d 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0082 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 3030
000034 303a
000035 3a30
000036 3030      	.DB  0x30,0x30,0x3A,0x30,0x30,0x3A,0x30,0x30
000037 303a
000038 0030      	.DB  0x3A,0x30,0x30,0x0
                 _0x40000:
000039 6425
00003a 253a
00003b 3a64
00003c 6425      	.DB  0x25,0x64,0x3A,0x25,0x64,0x3A,0x25,0x64
00003d 253a
00003e 0064      	.DB  0x3A,0x25,0x64,0x0
                 _0x60000:
00003f 3030
000040 303a
000041 3a30
000042 3030      	.DB  0x30,0x30,0x3A,0x30,0x30,0x3A,0x30,0x30
000043 303a
000044 0030      	.DB  0x3A,0x30,0x30,0x0
                 _0x2020003:
000045 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000046 000c      	.DW  0x0C
000047 0160      	.DW  _0x3
000048 0066      	.DW  _0x0*2
                 
000049 000c      	.DW  0x0C
00004a 016c      	.DW  _0x60008
00004b 007e      	.DW  _0x60000*2
                 
00004c 0002      	.DW  0x02
00004d 0182      	.DW  __base_y_G101
00004e 008a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;// Declare your global variables here
                 ;
                 ;int ms = 0;
                 ;int sec = 0;
                 ;int min = 0;
                 ;int hour = 0;
                 ;int c = 0;
                 ;
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00007d 940e 039e 	CALL SUBOPT_0x0
                 ; 0000 000E // Place your code here
                 ; 0000 000F interput_1();
00007f 940e 0123 	CALL _interput_1
                 ; 0000 0010 
                 ; 0000 0011 }
000081 c004      	RJMP _0x8
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0015 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000082 940e 039e 	CALL SUBOPT_0x0
                 ; 0000 0016 interupt_0();
000084 940e 00bb 	CALL _interupt_0
                 ; 0000 0017 
                 ; 0000 0018 
                 ; 0000 0019 }
                 _0x8:
000086 91e9      	LD   R30,Y+
000087 bfef      	OUT  SREG,R30
000088 91f9      	LD   R31,Y+
000089 91e9      	LD   R30,Y+
00008a 91b9      	LD   R27,Y+
00008b 91a9      	LD   R26,Y+
00008c 9199      	LD   R25,Y+
00008d 9189      	LD   R24,Y+
00008e 9179      	LD   R23,Y+
00008f 9169      	LD   R22,Y+
000090 90f9      	LD   R15,Y+
000091 9019      	LD   R1,Y+
000092 9009      	LD   R0,Y+
000093 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001C {
                 _main:
                 ; .FSTART _main
                 ; 0000 001D times_ports_init();
000094 d00f      	RCALL _times_ports_init
                 ; 0000 001E lcd_init(16);
000095 e1a0      	LDI  R26,LOW(16)
000096 940e 0357 	CALL _lcd_init
                 ; 0000 001F 
                 ; 0000 0020 // Global enable interrupts
                 ; 0000 0021 #asm("sei")
000098 9478      	sei
                 ; 0000 0022 DDRB = 0x00;
000099 e0e0      	LDI  R30,LOW(0)
00009a bbe7      	OUT  0x17,R30
                 ; 0000 0023 lcd_init(16);
00009b e1a0      	LDI  R26,LOW(16)
00009c 940e 0357 	CALL _lcd_init
                 ; 0000 0024 lcd_puts("00:00:00:00");
                +
00009e e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
00009f e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
0000a0 940e 0346 	CALL _lcd_puts
                 ; 0000 0025 
                 ; 0000 0026 while (1)
                 _0x4:
                 ; 0000 0027       {
                 ; 0000 0028 
                 ; 0000 0029       }
0000a2 cfff      	RJMP _0x4
                 ; 0000 002A }
                 _0x7:
0000a3 cfff      	RJMP _0x7
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0xC
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void times_ports_init(void){
                 ; 0001 0003 void times_ports_init(void){
                 
                 	.CSEG
                 _times_ports_init:
                 ; .FSTART _times_ports_init
                 ; 0001 0004 
                 ; 0001 0005  // Declare your local variables here
                 ; 0001 0006 
                 ; 0001 0007 // Input/Output Ports initialization
                 ; 0001 0008 // Port A initialization
                 ; 0001 0009 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 000A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bbea      	OUT  0x1A,R30
                 ; 0001 000B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 000C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000a6 bbeb      	OUT  0x1B,R30
                 ; 0001 000D 
                 ; 0001 000E // Port B initialization
                 ; 0001 000F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0001 0010 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000a7 e0e8      	LDI  R30,LOW(8)
0000a8 bbe7      	OUT  0x17,R30
                 ; 0001 0011 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0001 0012 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbe8      	OUT  0x18,R30
                 ; 0001 0013 
                 ; 0001 0014 // Port C initialization
                 ; 0001 0015 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0016 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ab bbe4      	OUT  0x14,R30
                 ; 0001 0017 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0018 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ac bbe5      	OUT  0x15,R30
                 ; 0001 0019 
                 ; 0001 001A // Port D initialization
                 ; 0001 001B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 001C DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000ad bbe1      	OUT  0x11,R30
                 ; 0001 001D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ae bbe2      	OUT  0x12,R30
                 ; 0001 001F 
                 ; 0001 0020 // Timer/Counter 0 initialization
                 ; 0001 0021 // Clock source: System Clock
                 ; 0001 0022 // Clock value: 7/813 kHz
                 ; 0001 0023 // Mode: Normal top=0xFF
                 ; 0001 0024 // OC0 output: Toggle on compare match
                 ; 0001 0025 // Timer Period: 9/984 ms
                 ; 0001 0026 // Output Pulse(s):
                 ; 0001 0027 // OC0 Period: 19/968 ms Width: 9/984 ms
                 ; 0001 0028 
                 ; 0001 0029 
                 ; 0001 002A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 002B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000af e0e1      	LDI  R30,LOW(1)
0000b0 bfe9      	OUT  0x39,R30
                 ; 0001 002C 
                 ; 0001 002D // External Interrupt(s) initialization
                 ; 0001 002E // INT0: Off
                 ; 0001 002F // INT1: On
                 ; 0001 0030 // INT1 Mode: Any change
                 ; 0001 0031 // INT2: Off
                 ; 0001 0032 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
0000b1 b7eb      	IN   R30,0x3B
0000b2 68e0      	ORI  R30,0x80
0000b3 bfeb      	OUT  0x3B,R30
                 ; 0001 0033 MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b4 e0e4      	LDI  R30,LOW(4)
0000b5 bfe5      	OUT  0x35,R30
                 ; 0001 0034 MCUCSR=(0<<ISC2);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bfe4      	OUT  0x34,R30
                 ; 0001 0035 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
0000b8 e8e0      	LDI  R30,LOW(128)
0000b9 bfea      	OUT  0x3A,R30
                 ; 0001 0036 
                 ; 0001 0037 // Alphanumeric LCD initialization
                 ; 0001 0038 // Connections are specified in the
                 ; 0001 0039 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 003A // RS - PORTC Bit 0
                 ; 0001 003B // RD - PORTC Bit 1
                 ; 0001 003C // EN - PORTC Bit 2
                 ; 0001 003D // D4 - PORTC Bit 4
                 ; 0001 003E // D5 - PORTC Bit 5
                 ; 0001 003F // D6 - PORTC Bit 6
                 ; 0001 0040 // D7 - PORTC Bit 7
                 ; 0001 0041 // Characters/line: 16
                 ; 0001 0042 }
0000ba 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void interupt_0(void){
                 ; 0002 0003 void interupt_0(void){
                 
                 	.CSEG
                 _interupt_0:
                 ; .FSTART _interupt_0
                 ; 0002 0004 
                 ; 0002 0005     char time[16];
                 ; 0002 0006     // Reinitialize Timer 0 value
                 ; 0002 0007     TCNT0=0xB2;
0000bb 9760      	SBIW R28,16
                 ;	time -> Y+0
0000bc ebe2      	LDI  R30,LOW(178)
0000bd bfe2      	OUT  0x32,R30
                 ; 0002 0008     // Place your code here
                 ; 0002 0009 
                 ; 0002 000A     if (ms >= 99){
0000be 91a0 0178 	LDS  R26,_ms
0000c0 91b0 0179 	LDS  R27,_ms+1
0000c2 36a3      	CPI  R26,LOW(0x63)
0000c3 e0e0      	LDI  R30,HIGH(0x63)
0000c4 07be      	CPC  R27,R30
0000c5 f14c      	BRLT _0x40003
                 ; 0002 000B         ms = 0;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 0178 	STS  _ms,R30
0000c9 93e0 0179 	STS  _ms+1,R30
                 ; 0002 000C         if (sec >= 59){
0000cb 91a0 017a 	LDS  R26,_sec
0000cd 91b0 017b 	LDS  R27,_sec+1
0000cf 97db      	SBIW R26,59
0000d0 f0cc      	BRLT _0x40004
                 ; 0002 000D              sec = 0;
0000d1 93e0 017a 	STS  _sec,R30
0000d3 93e0 017b 	STS  _sec+1,R30
                 ; 0002 000E              if(min >= 59){
0000d5 91a0 017c 	LDS  R26,_min
0000d7 91b0 017d 	LDS  R27,_min+1
0000d9 97db      	SBIW R26,59
0000da f03c      	BRLT _0x40005
                 ; 0002 000F                   min = 0;
0000db 93e0 017c 	STS  _min,R30
0000dd 93e0 017d 	STS  _min+1,R30
                 ; 0002 0010                   hour++;
0000df e7ae      	LDI  R26,LOW(_hour)
0000e0 e0b1      	LDI  R27,HIGH(_hour)
0000e1 c002      	RJMP _0x40009
                 ; 0002 0011              }
                 ; 0002 0012              else min++;
                 _0x40005:
0000e2 e7ac      	LDI  R26,LOW(_min)
0000e3 e0b1      	LDI  R27,HIGH(_min)
                 _0x40009:
0000e4 91ed      	LD   R30,X+
0000e5 91fd      	LD   R31,X+
0000e6 9631      	ADIW R30,1
0000e7 93fe      	ST   -X,R31
0000e8 93ee      	ST   -X,R30
                 ; 0002 0013 
                 ; 0002 0014         }
                 ; 0002 0015         else
0000e9 c004      	RJMP _0x40007
                 _0x40004:
                 ; 0002 0016             sec++;
0000ea e7aa      	LDI  R26,LOW(_sec)
0000eb e0b1      	LDI  R27,HIGH(_sec)
0000ec 940e 03ac 	CALL SUBOPT_0x1
                 ; 0002 0017     }
                 _0x40007:
                 ; 0002 0018     else
0000ee c004      	RJMP _0x40008
                 _0x40003:
                 ; 0002 0019         ms++;
0000ef e7a8      	LDI  R26,LOW(_ms)
0000f0 e0b1      	LDI  R27,HIGH(_ms)
0000f1 940e 03ac 	CALL SUBOPT_0x1
                 ; 0002 001A     sprintf(time,"%d:%d:%d:%d",hour,min,sec,ms);
                 _0x40008:
0000f3 01fe      	MOVW R30,R28
0000f4 93fa      	ST   -Y,R31
0000f5 93ea      	ST   -Y,R30
                +
0000f6 e7e2     +LDI R30 , LOW ( 2 * _0x40000 + ( 0 ) )
0000f7 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 0 ) )
                 	__POINTW1FN _0x40000,0
0000f8 93fa      	ST   -Y,R31
0000f9 93ea      	ST   -Y,R30
0000fa 91e0 017e 	LDS  R30,_hour
0000fc 91f0 017f 	LDS  R31,_hour+1
0000fe 940e 03b2 	CALL SUBOPT_0x2
000100 91e0 017c 	LDS  R30,_min
000102 91f0 017d 	LDS  R31,_min+1
000104 940e 03b2 	CALL SUBOPT_0x2
000106 91e0 017a 	LDS  R30,_sec
000108 91f0 017b 	LDS  R31,_sec+1
00010a 940e 03b2 	CALL SUBOPT_0x2
00010c 91e0 0178 	LDS  R30,_ms
00010e 91f0 0179 	LDS  R31,_ms+1
000110 940e 03b2 	CALL SUBOPT_0x2
000112 e180      	LDI  R24,16
000113 940e 02c4 	CALL _sprintf
000115 9664      	ADIW R28,20
                 ; 0002 001B     lcd_clear();
000116 940e 0325 	CALL _lcd_clear
                 ; 0002 001C     lcd_puts(time);
000118 01de      	MOVW R26,R28
000119 940e 0346 	CALL _lcd_puts
                 ; 0002 001D 
                 ; 0002 001E 
                 ; 0002 001F }
00011b 9660      	ADIW R28,16
00011c 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void start_timer(){
                 ; 0003 0003 void start_timer(){
                 
                 	.CSEG
                 _start_timer:
                 ; .FSTART _start_timer
                 ; 0003 0004 TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00011d e1e5      	LDI  R30,LOW(21)
00011e bfe3      	OUT  0x33,R30
                 ; 0003 0005 TCNT0=0x00;
00011f e0e0      	LDI  R30,LOW(0)
000120 bfe2      	OUT  0x32,R30
                 ; 0003 0006 OCR0=0x00;
000121 bfec      	OUT  0x3C,R30
                 ; 0003 0007 
                 ; 0003 0008 }
000122 9508      	RET
                 ; .FEND
                 ;
                 ;void interput_1(void){
                 ; 0003 000A void interput_1(void){
                 _interput_1:
                 ; .FSTART _interput_1
                 ; 0003 000B 
                 ; 0003 000C     if(PINB.4 == 0)
000123 99b4      	SBIC 0x16,4
000124 c002      	RJMP _0x60003
                 ; 0003 000D          start_timer();
000125 dff7      	RCALL _start_timer
                 ; 0003 000E     else if (PINB.5 == 0 ){
000126 c02e      	RJMP _0x60004
                 _0x60003:
000127 99b5      	SBIC 0x16,5
000128 c02c      	RJMP _0x60005
                 ; 0003 000F         if (c == 0){
000129 91e0 0180 	LDS  R30,_c
00012b 91f0 0181 	LDS  R31,_c+1
00012d 9730      	SBIW R30,0
00012e f449      	BRNE _0x60006
                 ; 0003 0010             TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00012f e0e0      	LDI  R30,LOW(0)
000130 bfe3      	OUT  0x33,R30
                 ; 0003 0011             c = 1;}
000131 e0e1      	LDI  R30,LOW(1)
000132 e0f0      	LDI  R31,HIGH(1)
000133 93e0 0180 	STS  _c,R30
000135 93f0 0181 	STS  _c+1,R31
                 ; 0003 0012         else{
000137 c01d      	RJMP _0x60007
                 _0x60006:
                 ; 0003 0013             TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000138 e0e0      	LDI  R30,LOW(0)
000139 bfe3      	OUT  0x33,R30
                 ; 0003 0014             lcd_clear();
00013a 940e 0325 	CALL _lcd_clear
                 ; 0003 0015             lcd_puts("00:00:00:00");
                +
00013c e6ac     +LDI R26 , LOW ( _0x60008 + ( 0 ) )
00013d e0b1     +LDI R27 , HIGH ( _0x60008 + ( 0 ) )
                 	__POINTW2MN _0x60008,0
00013e 940e 0346 	CALL _lcd_puts
                 ; 0003 0016             ms = 0;
000140 e0e0      	LDI  R30,LOW(0)
000141 93e0 0178 	STS  _ms,R30
000143 93e0 0179 	STS  _ms+1,R30
                 ; 0003 0017             sec = 0;
000145 93e0 017a 	STS  _sec,R30
000147 93e0 017b 	STS  _sec+1,R30
                 ; 0003 0018             min = 0;
000149 93e0 017c 	STS  _min,R30
00014b 93e0 017d 	STS  _min+1,R30
                 ; 0003 0019             hour = 0;
00014d 93e0 017e 	STS  _hour,R30
00014f 93e0 017f 	STS  _hour+1,R30
                 ; 0003 001A             c = 0;
000151 93e0 0180 	STS  _c,R30
000153 93e0 0181 	STS  _c+1,R30
                 ; 0003 001B         }
                 _0x60007:
                 ; 0003 001C 
                 ; 0003 001D 
                 ; 0003 001E     }
                 ; 0003 001F }
                 _0x60005:
                 _0x60004:
000155 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x60008:
00016c           	.BYTE 0xC
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000156 93ba      	ST   -Y,R27
000157 93aa      	ST   -Y,R26
000158 931a      	ST   -Y,R17
000159 930a      	ST   -Y,R16
00015a 81aa      	LDD  R26,Y+2
00015b 81bb      	LDD  R27,Y+2+1
00015c 9612      	ADIW R26,2
00015d 940e 0408 	CALL __GETW1P
00015f 9730      	SBIW R30,0
000160 f129      	BREQ _0x2000010
000161 81aa      	LDD  R26,Y+2
000162 81bb      	LDD  R27,Y+2+1
000163 9614      	ADIW R26,4
000164 940e 0408 	CALL __GETW1P
000166 018f      	MOVW R16,R30
000167 9730      	SBIW R30,0
000168 f061      	BREQ _0x2000012
                +
000169 3002     +CPI R16 , LOW ( 2 )
00016a e0e0     +LDI R30 , HIGH ( 2 )
00016b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00016c f080      	BRLO _0x2000013
00016d 01f8      	MOVW R30,R16
00016e 9731      	SBIW R30,1
00016f 018f      	MOVW R16,R30
                +
000170 81aa     +LDD R26 , Y + 2
000171 81bb     +LDD R27 , Y + 2 + 1
000172 9614     +ADIW R26 , 4
000173 93ed     +ST X + , R30
000174 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000175 81aa      	LDD  R26,Y+2
000176 81bb      	LDD  R27,Y+2+1
000177 9612      	ADIW R26,2
000178 940e 03ac 	CALL SUBOPT_0x1
00017a 9731      	SBIW R30,1
00017b 81ac      	LDD  R26,Y+4
00017c 83a0      	STD  Z+0,R26
                 _0x2000013:
00017d 81aa      	LDD  R26,Y+2
00017e 81bb      	LDD  R27,Y+2+1
00017f 940e 0408 	CALL __GETW1P
000181 23ff      	TST  R31
000182 f012      	BRMI _0x2000014
000183 940e 03ac 	CALL SUBOPT_0x1
                 _0x2000014:
000185 c006      	RJMP _0x2000015
                 _0x2000010:
000186 81aa      	LDD  R26,Y+2
000187 81bb      	LDD  R27,Y+2+1
000188 efef      	LDI  R30,LOW(65535)
000189 efff      	LDI  R31,HIGH(65535)
00018a 93ed      	ST   X+,R30
00018b 93fc      	ST   X,R31
                 _0x2000015:
00018c 8119      	LDD  R17,Y+1
00018d 8108      	LDD  R16,Y+0
00018e 9625      	ADIW R28,5
00018f 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000190 93ba      	ST   -Y,R27
000191 93aa      	ST   -Y,R26
000192 9726      	SBIW R28,6
000193 940e 0415 	CALL __SAVELOCR6
000195 e010      	LDI  R17,0
000196 85ac      	LDD  R26,Y+12
000197 85bd      	LDD  R27,Y+12+1
000198 e0e0      	LDI  R30,LOW(0)
000199 e0f0      	LDI  R31,HIGH(0)
00019a 93ed      	ST   X+,R30
00019b 93fc      	ST   X,R31
                 _0x2000016:
00019c 89ea      	LDD  R30,Y+18
00019d 89fb      	LDD  R31,Y+18+1
00019e 9631      	ADIW R30,1
00019f 8bea      	STD  Y+18,R30
0001a0 8bfb      	STD  Y+18+1,R31
0001a1 9731      	SBIW R30,1
0001a2 91e4      	LPM  R30,Z
0001a3 2f2e      	MOV  R18,R30
0001a4 30e0      	CPI  R30,0
0001a5 f409      	BRNE PC+2
0001a6 c115      	RJMP _0x2000018
0001a7 2fe1      	MOV  R30,R17
0001a8 30e0      	CPI  R30,0
0001a9 f439      	BRNE _0x200001C
0001aa 3225      	CPI  R18,37
0001ab f411      	BRNE _0x200001D
0001ac e011      	LDI  R17,LOW(1)
0001ad c002      	RJMP _0x200001E
                 _0x200001D:
0001ae 940e 03b7 	CALL SUBOPT_0x3
                 _0x200001E:
0001b0 c10a      	RJMP _0x200001B
                 _0x200001C:
0001b1 30e1      	CPI  R30,LOW(0x1)
0001b2 f4a9      	BRNE _0x200001F
0001b3 3225      	CPI  R18,37
0001b4 f419      	BRNE _0x2000020
0001b5 940e 03b7 	CALL SUBOPT_0x3
0001b7 c102      	RJMP _0x20000CC
                 _0x2000020:
0001b8 e012      	LDI  R17,LOW(2)
0001b9 e040      	LDI  R20,LOW(0)
0001ba e000      	LDI  R16,LOW(0)
0001bb 322d      	CPI  R18,45
0001bc f411      	BRNE _0x2000021
0001bd e001      	LDI  R16,LOW(1)
0001be c0fc      	RJMP _0x200001B
                 _0x2000021:
0001bf 322b      	CPI  R18,43
0001c0 f411      	BRNE _0x2000022
0001c1 e24b      	LDI  R20,LOW(43)
0001c2 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001c3 3220      	CPI  R18,32
0001c4 f411      	BRNE _0x2000023
0001c5 e240      	LDI  R20,LOW(32)
0001c6 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001c7 c002      	RJMP _0x2000024
                 _0x200001F:
0001c8 30e2      	CPI  R30,LOW(0x2)
0001c9 f439      	BRNE _0x2000025
                 _0x2000024:
0001ca e050      	LDI  R21,LOW(0)
0001cb e013      	LDI  R17,LOW(3)
0001cc 3320      	CPI  R18,48
0001cd f411      	BRNE _0x2000026
0001ce 6800      	ORI  R16,LOW(128)
0001cf c0eb      	RJMP _0x200001B
                 _0x2000026:
0001d0 c003      	RJMP _0x2000027
                 _0x2000025:
0001d1 30e3      	CPI  R30,LOW(0x3)
0001d2 f009      	BREQ PC+2
0001d3 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001d4 3320      	CPI  R18,48
0001d5 f010      	BRLO _0x200002A
0001d6 332a      	CPI  R18,58
0001d7 f008      	BRLO _0x200002B
                 _0x200002A:
0001d8 c007      	RJMP _0x2000029
                 _0x200002B:
0001d9 e0aa      	LDI  R26,LOW(10)
0001da 9f5a      	MUL  R21,R26
0001db 2d50      	MOV  R21,R0
0001dc 2fe2      	MOV  R30,R18
0001dd 53e0      	SUBI R30,LOW(48)
0001de 0f5e      	ADD  R21,R30
0001df c0db      	RJMP _0x200001B
                 _0x2000029:
0001e0 2fe2      	MOV  R30,R18
0001e1 36e3      	CPI  R30,LOW(0x63)
0001e2 f449      	BRNE _0x200002F
0001e3 940e 03be 	CALL SUBOPT_0x4
0001e5 89e8      	LDD  R30,Y+16
0001e6 89f9      	LDD  R31,Y+16+1
0001e7 81a4      	LDD  R26,Z+4
0001e8 93aa      	ST   -Y,R26
0001e9 940e 03c4 	CALL SUBOPT_0x5
0001eb c0ce      	RJMP _0x2000030
                 _0x200002F:
0001ec 37e3      	CPI  R30,LOW(0x73)
0001ed f441      	BRNE _0x2000032
0001ee 940e 03be 	CALL SUBOPT_0x4
0001f0 940e 03ca 	CALL SUBOPT_0x6
0001f2 940e 0385 	CALL _strlen
0001f4 2f1e      	MOV  R17,R30
0001f5 c00a      	RJMP _0x2000033
                 _0x2000032:
0001f6 37e0      	CPI  R30,LOW(0x70)
0001f7 f461      	BRNE _0x2000035
0001f8 940e 03be 	CALL SUBOPT_0x4
0001fa 940e 03ca 	CALL SUBOPT_0x6
0001fc 940e 0391 	CALL _strlenf
0001fe 2f1e      	MOV  R17,R30
0001ff 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000200 6002      	ORI  R16,LOW(2)
000201 770f      	ANDI R16,LOW(127)
000202 e030      	LDI  R19,LOW(0)
000203 c034      	RJMP _0x2000036
                 _0x2000035:
000204 36e4      	CPI  R30,LOW(0x64)
000205 f011      	BREQ _0x2000039
000206 36e9      	CPI  R30,LOW(0x69)
000207 f411      	BRNE _0x200003A
                 _0x2000039:
000208 6004      	ORI  R16,LOW(4)
000209 c002      	RJMP _0x200003B
                 _0x200003A:
00020a 37e5      	CPI  R30,LOW(0x75)
00020b f431      	BRNE _0x200003C
                 _0x200003B:
00020c e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00020d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00020e 83ee      	STD  Y+6,R30
00020f 83ff      	STD  Y+6+1,R31
000210 e015      	LDI  R17,LOW(5)
000211 c00c      	RJMP _0x200003D
                 _0x200003C:
000212 35e8      	CPI  R30,LOW(0x58)
000213 f411      	BRNE _0x200003F
000214 6008      	ORI  R16,LOW(8)
000215 c003      	RJMP _0x2000040
                 _0x200003F:
000216 37e8      	CPI  R30,LOW(0x78)
000217 f009      	BREQ PC+2
000218 c0a1      	RJMP _0x2000071
                 _0x2000040:
000219 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00021a e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00021b 83ee      	STD  Y+6,R30
00021c 83ff      	STD  Y+6+1,R31
00021d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00021e ff02      	SBRS R16,2
00021f c014      	RJMP _0x2000042
000220 940e 03be 	CALL SUBOPT_0x4
000222 940e 03d4 	CALL SUBOPT_0x7
000224 85ab      	LDD  R26,Y+11
000225 23aa      	TST  R26
000226 f43a      	BRPL _0x2000043
000227 85ea      	LDD  R30,Y+10
000228 85fb      	LDD  R31,Y+10+1
000229 940e 03ff 	CALL __ANEGW1
00022b 87ea      	STD  Y+10,R30
00022c 87fb      	STD  Y+10+1,R31
00022d e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00022e 3040      	CPI  R20,0
00022f f011      	BREQ _0x2000044
000230 5f1f      	SUBI R17,-LOW(1)
000231 c001      	RJMP _0x2000045
                 _0x2000044:
000232 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000233 c004      	RJMP _0x2000046
                 _0x2000042:
000234 940e 03be 	CALL SUBOPT_0x4
000236 940e 03d4 	CALL SUBOPT_0x7
                 _0x2000046:
                 _0x2000036:
000238 fd00      	SBRC R16,0
000239 c011      	RJMP _0x2000047
                 _0x2000048:
00023a 1715      	CP   R17,R21
00023b f478      	BRSH _0x200004A
00023c ff07      	SBRS R16,7
00023d c008      	RJMP _0x200004B
00023e ff02      	SBRS R16,2
00023f c004      	RJMP _0x200004C
000240 7f0b      	ANDI R16,LOW(251)
000241 2f24      	MOV  R18,R20
000242 5011      	SUBI R17,LOW(1)
000243 c001      	RJMP _0x200004D
                 _0x200004C:
000244 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000245 c001      	RJMP _0x200004E
                 _0x200004B:
000246 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000247 940e 03b7 	CALL SUBOPT_0x3
000249 5051      	SUBI R21,LOW(1)
00024a cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00024b 2f31      	MOV  R19,R17
00024c ff01      	SBRS R16,1
00024d c017      	RJMP _0x200004F
                 _0x2000050:
00024e 3030      	CPI  R19,0
00024f f0a1      	BREQ _0x2000052
000250 ff03      	SBRS R16,3
000251 c006      	RJMP _0x2000053
000252 81ee      	LDD  R30,Y+6
000253 81ff      	LDD  R31,Y+6+1
000254 9125      	LPM  R18,Z+
000255 83ee      	STD  Y+6,R30
000256 83ff      	STD  Y+6+1,R31
000257 c005      	RJMP _0x2000054
                 _0x2000053:
000258 81ae      	LDD  R26,Y+6
000259 81bf      	LDD  R27,Y+6+1
00025a 912d      	LD   R18,X+
00025b 83ae      	STD  Y+6,R26
00025c 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00025d 940e 03b7 	CALL SUBOPT_0x3
00025f 3050      	CPI  R21,0
000260 f009      	BREQ _0x2000055
000261 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000262 5031      	SUBI R19,LOW(1)
000263 cfea      	RJMP _0x2000050
                 _0x2000052:
000264 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000265 e320      	LDI  R18,LOW(48)
000266 81ee      	LDD  R30,Y+6
000267 81ff      	LDD  R31,Y+6+1
000268 940e 040c 	CALL __GETW1PF
00026a 87e8      	STD  Y+8,R30
00026b 87f9      	STD  Y+8+1,R31
00026c 81ee      	LDD  R30,Y+6
00026d 81ff      	LDD  R31,Y+6+1
00026e 9632      	ADIW R30,2
00026f 83ee      	STD  Y+6,R30
000270 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000271 85e8      	LDD  R30,Y+8
000272 85f9      	LDD  R31,Y+8+1
000273 85aa      	LDD  R26,Y+10
000274 85bb      	LDD  R27,Y+10+1
000275 17ae      	CP   R26,R30
000276 07bf      	CPC  R27,R31
000277 f050      	BRLO _0x200005C
000278 5f2f      	SUBI R18,-LOW(1)
000279 85a8      	LDD  R26,Y+8
00027a 85b9      	LDD  R27,Y+8+1
00027b 85ea      	LDD  R30,Y+10
00027c 85fb      	LDD  R31,Y+10+1
00027d 1bea      	SUB  R30,R26
00027e 0bfb      	SBC  R31,R27
00027f 87ea      	STD  Y+10,R30
000280 87fb      	STD  Y+10+1,R31
000281 cfef      	RJMP _0x200005A
                 _0x200005C:
000282 332a      	CPI  R18,58
000283 f028      	BRLO _0x200005D
000284 ff03      	SBRS R16,3
000285 c002      	RJMP _0x200005E
000286 5f29      	SUBI R18,-LOW(7)
000287 c001      	RJMP _0x200005F
                 _0x200005E:
000288 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000289 fd04      	SBRC R16,4
00028a c01a      	RJMP _0x2000061
00028b 3321      	CPI  R18,49
00028c f420      	BRSH _0x2000063
00028d 85a8      	LDD  R26,Y+8
00028e 85b9      	LDD  R27,Y+8+1
00028f 9711      	SBIW R26,1
000290 f409      	BRNE _0x2000062
                 _0x2000063:
000291 c009      	RJMP _0x20000CD
                 _0x2000062:
000292 1753      	CP   R21,R19
000293 f010      	BRLO _0x2000067
000294 ff00      	SBRS R16,0
000295 c001      	RJMP _0x2000068
                 _0x2000067:
000296 c013      	RJMP _0x2000066
                 _0x2000068:
000297 e220      	LDI  R18,LOW(32)
000298 ff07      	SBRS R16,7
000299 c00b      	RJMP _0x2000069
00029a e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00029b 6100      	ORI  R16,LOW(16)
00029c ff02      	SBRS R16,2
00029d c007      	RJMP _0x200006A
00029e 7f0b      	ANDI R16,LOW(251)
00029f 934a      	ST   -Y,R20
0002a0 940e 03c4 	CALL SUBOPT_0x5
0002a2 3050      	CPI  R21,0
0002a3 f009      	BREQ _0x200006B
0002a4 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002a5 940e 03b7 	CALL SUBOPT_0x3
0002a7 3050      	CPI  R21,0
0002a8 f009      	BREQ _0x200006C
0002a9 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002aa 5031      	SUBI R19,LOW(1)
0002ab 85a8      	LDD  R26,Y+8
0002ac 85b9      	LDD  R27,Y+8+1
0002ad 9712      	SBIW R26,2
0002ae f008      	BRLO _0x2000059
0002af cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002b0 ff00      	SBRS R16,0
0002b1 c008      	RJMP _0x200006D
                 _0x200006E:
0002b2 3050      	CPI  R21,0
0002b3 f031      	BREQ _0x2000070
0002b4 5051      	SUBI R21,LOW(1)
0002b5 e2e0      	LDI  R30,LOW(32)
0002b6 93ea      	ST   -Y,R30
0002b7 940e 03c4 	CALL SUBOPT_0x5
0002b9 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002ba e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002bb cee0      	RJMP _0x2000016
                 _0x2000018:
0002bc 85ac      	LDD  R26,Y+12
0002bd 85bd      	LDD  R27,Y+12+1
0002be 940e 0408 	CALL __GETW1P
0002c0 940e 041c 	CALL __LOADLOCR6
0002c2 9664      	ADIW R28,20
0002c3 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002c4 92ff      	PUSH R15
0002c5 2ef8      	MOV  R15,R24
0002c6 9726      	SBIW R28,6
0002c7 940e 0417 	CALL __SAVELOCR4
0002c9 940e 03dc 	CALL SUBOPT_0x8
0002cb 9730      	SBIW R30,0
0002cc f419      	BRNE _0x2000072
0002cd efef      	LDI  R30,LOW(65535)
0002ce efff      	LDI  R31,HIGH(65535)
0002cf c023      	RJMP _0x2080002
                 _0x2000072:
0002d0 01de      	MOVW R26,R28
0002d1 9616      	ADIW R26,6
0002d2 940e 03fb 	CALL __ADDW2R15
0002d4 018d      	MOVW R16,R26
0002d5 940e 03dc 	CALL SUBOPT_0x8
0002d7 83ee      	STD  Y+6,R30
0002d8 83ff      	STD  Y+6+1,R31
0002d9 e0e0      	LDI  R30,LOW(0)
0002da 87e8      	STD  Y+8,R30
0002db 87e9      	STD  Y+8+1,R30
0002dc 01de      	MOVW R26,R28
0002dd 961a      	ADIW R26,10
0002de 940e 03fb 	CALL __ADDW2R15
0002e0 940e 0408 	CALL __GETW1P
0002e2 93fa      	ST   -Y,R31
0002e3 93ea      	ST   -Y,R30
0002e4 931a      	ST   -Y,R17
0002e5 930a      	ST   -Y,R16
0002e6 e5e6      	LDI  R30,LOW(_put_buff_G100)
0002e7 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002e8 93fa      	ST   -Y,R31
0002e9 93ea      	ST   -Y,R30
0002ea 01de      	MOVW R26,R28
0002eb 961a      	ADIW R26,10
0002ec dea3      	RCALL __print_G100
0002ed 019f      	MOVW R18,R30
0002ee 81ae      	LDD  R26,Y+6
0002ef 81bf      	LDD  R27,Y+6+1
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 93ec      	ST   X,R30
0002f2 01f9      	MOVW R30,R18
                 _0x2080002:
0002f3 940e 041e 	CALL __LOADLOCR4
0002f5 962a      	ADIW R28,10
0002f6 90ff      	POP  R15
0002f7 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002f8 93aa      	ST   -Y,R26
0002f9 b3e5      	IN   R30,0x15
0002fa 70ef      	ANDI R30,LOW(0xF)
0002fb 2fae      	MOV  R26,R30
0002fc 81e8      	LD   R30,Y
0002fd 7fe0      	ANDI R30,LOW(0xF0)
0002fe 2bea      	OR   R30,R26
0002ff bbe5      	OUT  0x15,R30
                +
000300 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000301 958a     +DEC R24
000302 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000303 9aaa      	SBI  0x15,2
                +
000304 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000305 958a     +DEC R24
000306 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000307 98aa      	CBI  0x15,2
                +
000308 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000309 958a     +DEC R24
00030a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00030b c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00030c 93aa      	ST   -Y,R26
00030d 81a8      	LD   R26,Y
00030e dfe9      	RCALL __lcd_write_nibble_G101
00030f 81e8          ld    r30,y
000310 95e2          swap  r30
000311 83e8          st    y,r30
000312 81a8      	LD   R26,Y
000313 dfe4      	RCALL __lcd_write_nibble_G101
                +
000314 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000315 958a     +DEC R24
000316 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000317 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000318 93aa      	ST   -Y,R26
000319 81e8      	LD   R30,Y
00031a e0f0      	LDI  R31,0
00031b 57ee      	SUBI R30,LOW(-__base_y_G101)
00031c 4ffe      	SBCI R31,HIGH(-__base_y_G101)
00031d 81e0      	LD   R30,Z
00031e 81a9      	LDD  R26,Y+1
00031f 0fae      	ADD  R26,R30
000320 dfeb      	RCALL __lcd_write_data
000321 8059      	LDD  R5,Y+1
000322 8048      	LDD  R4,Y+0
000323 9622      	ADIW R28,2
000324 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000325 e0a2      	LDI  R26,LOW(2)
000326 940e 03e3 	CALL SUBOPT_0x9
000328 e0ac      	LDI  R26,LOW(12)
000329 dfe2      	RCALL __lcd_write_data
00032a e0a1      	LDI  R26,LOW(1)
00032b 940e 03e3 	CALL SUBOPT_0x9
00032d e0e0      	LDI  R30,LOW(0)
00032e 2e4e      	MOV  R4,R30
00032f 2e5e      	MOV  R5,R30
000330 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000331 93aa      	ST   -Y,R26
000332 81a8      	LD   R26,Y
000333 30aa      	CPI  R26,LOW(0xA)
000334 f011      	BREQ _0x2020005
000335 1457      	CP   R5,R7
000336 f048      	BRLO _0x2020004
                 _0x2020005:
000337 e0e0      	LDI  R30,LOW(0)
000338 93ea      	ST   -Y,R30
000339 9443      	INC  R4
00033a 2da4      	MOV  R26,R4
00033b dfdc      	RCALL _lcd_gotoxy
00033c 81a8      	LD   R26,Y
00033d 30aa      	CPI  R26,LOW(0xA)
00033e f409      	BRNE _0x2020007
00033f c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000340 9453      	INC  R5
000341 9aa8      	SBI  0x15,0
000342 81a8      	LD   R26,Y
000343 dfc8      	RCALL __lcd_write_data
000344 98a8      	CBI  0x15,0
000345 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000346 93ba      	ST   -Y,R27
000347 93aa      	ST   -Y,R26
000348 931a      	ST   -Y,R17
                 _0x2020008:
000349 81a9      	LDD  R26,Y+1
00034a 81ba      	LDD  R27,Y+1+1
00034b 91ed      	LD   R30,X+
00034c 83a9      	STD  Y+1,R26
00034d 83ba      	STD  Y+1+1,R27
00034e 2f1e      	MOV  R17,R30
00034f 30e0      	CPI  R30,0
000350 f019      	BREQ _0x202000A
000351 2fa1      	MOV  R26,R17
000352 dfde      	RCALL _lcd_putchar
000353 cff5      	RJMP _0x2020008
                 _0x202000A:
000354 8118      	LDD  R17,Y+0
000355 9623      	ADIW R28,3
000356 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000357 93aa      	ST   -Y,R26
000358 b3e4      	IN   R30,0x14
000359 6fe0      	ORI  R30,LOW(0xF0)
00035a bbe4      	OUT  0x14,R30
00035b 9aa2      	SBI  0x14,2
00035c 9aa0      	SBI  0x14,0
00035d 9aa1      	SBI  0x14,1
00035e 98aa      	CBI  0x15,2
00035f 98a8      	CBI  0x15,0
000360 98a9      	CBI  0x15,1
000361 8078      	LDD  R7,Y+0
000362 81e8      	LD   R30,Y
000363 58e0      	SUBI R30,-LOW(128)
                +
000364 93e0 0184+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000366 81e8      	LD   R30,Y
000367 54e0      	SUBI R30,-LOW(192)
                +
000368 93e0 0185+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00036a e1a4      	LDI  R26,LOW(20)
00036b e0b0      	LDI  R27,0
00036c 940e 03f1 	CALL _delay_ms
00036e 940e 03e9 	CALL SUBOPT_0xA
000370 940e 03e9 	CALL SUBOPT_0xA
000372 940e 03e9 	CALL SUBOPT_0xA
000374 e2a0      	LDI  R26,LOW(32)
000375 df82      	RCALL __lcd_write_nibble_G101
                +
000376 ec88     +LDI R24 , LOW ( 200 )
000377 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000378 9701     +SBIW R24 , 1
000379 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00037a e2a8      	LDI  R26,LOW(40)
00037b df90      	RCALL __lcd_write_data
00037c e0a4      	LDI  R26,LOW(4)
00037d df8e      	RCALL __lcd_write_data
00037e e8a5      	LDI  R26,LOW(133)
00037f df8c      	RCALL __lcd_write_data
000380 e0a6      	LDI  R26,LOW(6)
000381 df8a      	RCALL __lcd_write_data
000382 dfa2      	RCALL _lcd_clear
                 _0x2080001:
000383 9621      	ADIW R28,1
000384 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000385 93ba      	ST   -Y,R27
000386 93aa      	ST   -Y,R26
000387 91a9          ld   r26,y+
000388 91b9          ld   r27,y+
000389 27ee          clr  r30
00038a 27ff          clr  r31
                 strlen0:
00038b 916d          ld   r22,x+
00038c 2366          tst  r22
00038d f011          breq strlen1
00038e 9631          adiw r30,1
00038f cffb          rjmp strlen0
                 strlen1:
000390 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000391 93ba      	ST   -Y,R27
000392 93aa      	ST   -Y,R26
000393 27aa          clr  r26
000394 27bb          clr  r27
000395 91e9          ld   r30,y+
000396 91f9          ld   r31,y+
                 strlenf0:
000397 9005      	lpm  r0,z+
000398 2000          tst  r0
000399 f011          breq strlenf1
00039a 9611          adiw r26,1
00039b cffb          rjmp strlenf0
                 strlenf1:
00039c 01fd          movw r30,r26
00039d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _ms:
000178           	.BYTE 0x2
                 _sec:
00017a           	.BYTE 0x2
                 _min:
00017c           	.BYTE 0x2
                 _hour:
00017e           	.BYTE 0x2
                 _c:
000180           	.BYTE 0x2
                 __base_y_G101:
000182           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
00039e 920a      	ST   -Y,R0
00039f 921a      	ST   -Y,R1
0003a0 92fa      	ST   -Y,R15
0003a1 936a      	ST   -Y,R22
0003a2 937a      	ST   -Y,R23
0003a3 938a      	ST   -Y,R24
0003a4 939a      	ST   -Y,R25
0003a5 93aa      	ST   -Y,R26
0003a6 93ba      	ST   -Y,R27
0003a7 93ea      	ST   -Y,R30
0003a8 93fa      	ST   -Y,R31
0003a9 b7ef      	IN   R30,SREG
0003aa 93ea      	ST   -Y,R30
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
0003ac 91ed      	LD   R30,X+
0003ad 91fd      	LD   R31,X+
0003ae 9631      	ADIW R30,1
0003af 93fe      	ST   -X,R31
0003b0 93ee      	ST   -X,R30
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003b2 940e 0403 	CALL __CWD1
0003b4 940e 0410 	CALL __PUTPARD1
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0003b7 932a      	ST   -Y,R18
0003b8 85ad      	LDD  R26,Y+13
0003b9 85be      	LDD  R27,Y+13+1
0003ba 85ef      	LDD  R30,Y+15
0003bb 89f8      	LDD  R31,Y+15+1
0003bc 9509      	ICALL
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0003be 89e8      	LDD  R30,Y+16
0003bf 89f9      	LDD  R31,Y+16+1
0003c0 9734      	SBIW R30,4
0003c1 8be8      	STD  Y+16,R30
0003c2 8bf9      	STD  Y+16+1,R31
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0003c4 85ad      	LDD  R26,Y+13
0003c5 85be      	LDD  R27,Y+13+1
0003c6 85ef      	LDD  R30,Y+15
0003c7 89f8      	LDD  R31,Y+15+1
0003c8 9509      	ICALL
0003c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0003ca 89a8      	LDD  R26,Y+16
0003cb 89b9      	LDD  R27,Y+16+1
0003cc 9614      	ADIW R26,4
0003cd 940e 0408 	CALL __GETW1P
0003cf 83ee      	STD  Y+6,R30
0003d0 83ff      	STD  Y+6+1,R31
0003d1 81ae      	LDD  R26,Y+6
0003d2 81bf      	LDD  R27,Y+6+1
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0003d4 89a8      	LDD  R26,Y+16
0003d5 89b9      	LDD  R27,Y+16+1
0003d6 9614      	ADIW R26,4
0003d7 940e 0408 	CALL __GETW1P
0003d9 87ea      	STD  Y+10,R30
0003da 87fb      	STD  Y+10+1,R31
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003dc 01de      	MOVW R26,R28
0003dd 961c      	ADIW R26,12
0003de 940e 03fb 	CALL __ADDW2R15
0003e0 940e 0408 	CALL __GETW1P
0003e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003e3 940e 030c 	CALL __lcd_write_data
0003e5 e0a3      	LDI  R26,LOW(3)
0003e6 e0b0      	LDI  R27,0
0003e7 940c 03f1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0003e9 e3a0      	LDI  R26,LOW(48)
0003ea 940e 02f8 	CALL __lcd_write_nibble_G101
                +
0003ec ec88     +LDI R24 , LOW ( 200 )
0003ed e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003ee 9701     +SBIW R24 , 1
0003ef f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003f0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f1 9610      	adiw r26,0
0003f2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003f3 ed80     +LDI R24 , LOW ( 0x7D0 )
0003f4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003f5 9701     +SBIW R24 , 1
0003f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003f7 95a8      	wdr
0003f8 9711      	sbiw r26,1
0003f9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003fa 9508      	ret
                 
                 __ADDW2R15:
0003fb 2400      	CLR  R0
0003fc 0daf      	ADD  R26,R15
0003fd 1db0      	ADC  R27,R0
0003fe 9508      	RET
                 
                 __ANEGW1:
0003ff 95f1      	NEG  R31
000400 95e1      	NEG  R30
000401 40f0      	SBCI R31,0
000402 9508      	RET
                 
                 __CWD1:
000403 2f6f      	MOV  R22,R31
000404 0f66      	ADD  R22,R22
000405 0b66      	SBC  R22,R22
000406 2f76      	MOV  R23,R22
000407 9508      	RET
                 
                 __GETW1P:
000408 91ed      	LD   R30,X+
000409 91fc      	LD   R31,X
00040a 9711      	SBIW R26,1
00040b 9508      	RET
                 
                 __GETW1PF:
00040c 9005      	LPM  R0,Z+
00040d 91f4      	LPM  R31,Z
00040e 2de0      	MOV  R30,R0
00040f 9508      	RET
                 
                 __PUTPARD1:
000410 937a      	ST   -Y,R23
000411 936a      	ST   -Y,R22
000412 93fa      	ST   -Y,R31
000413 93ea      	ST   -Y,R30
000414 9508      	RET
                 
                 __SAVELOCR6:
000415 935a      	ST   -Y,R21
                 __SAVELOCR5:
000416 934a      	ST   -Y,R20
                 __SAVELOCR4:
000417 933a      	ST   -Y,R19
                 __SAVELOCR3:
000418 932a      	ST   -Y,R18
                 __SAVELOCR2:
000419 931a      	ST   -Y,R17
00041a 930a      	ST   -Y,R16
00041b 9508      	RET
                 
                 __LOADLOCR6:
00041c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00041d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00041e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00041f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000420 8119      	LDD  R17,Y+1
000421 8108      	LD   R16,Y
000422 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  25 r25:   7 r26: 111 r27:  48 r28:  18 r29:   1 r30: 213 r31:  66 
x  :  23 y  : 189 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   3 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  68 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   3 cpi   :  34 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  23 ld    :  37 ldd   :  77 ldi   : 110 
lds   :  16 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :  16 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  29 pop   :   1 push  :   1 rcall :  16 ret   :  32 
reti  :   1 rjmp  :  67 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   2 sbis  :   0 sbiw  :  23 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  70 std   :  31 sts   :  20 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000846   2042     76   2118   16384  12.9%
[.dseg] 0x000060 0x000186      0     38     38    1024   3.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings

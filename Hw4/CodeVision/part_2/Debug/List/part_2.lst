
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_2\Debug\List\part_2.asm Mon Apr 04 22:34:37 2022

D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_2\Debug\List\part_2.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_2\Debug\List\part_2.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw4_matin_fazel_9825583\CodeVision\part_2\Debug\List\part_2.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 006e 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x40000:
000033 7325
000034 4300
000035 3a45
000036 5546      	.DB  0x25,0x73,0x0,0x43,0x45,0x3A,0x46,0x55
000037 4c4c
000038 0a00
000039 4543
00003a 253a      	.DB  0x4C,0x4C,0x0,0xA,0x43,0x45,0x3A,0x25
00003b 0064      	.DB  0x64,0x0
                 _0x2000003:
00003c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003d 0002      	.DW  0x02
00003e 0162      	.DW  __base_y_G100
00003f 0078      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c 940c 008b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;// Declare your global variables here
                 ;int total_car = 0;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0006 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00006e 920a      	ST   -Y,R0
00006f 921a      	ST   -Y,R1
000070 92fa      	ST   -Y,R15
000071 936a      	ST   -Y,R22
000072 937a      	ST   -Y,R23
000073 938a      	ST   -Y,R24
000074 939a      	ST   -Y,R25
000075 93aa      	ST   -Y,R26
000076 93ba      	ST   -Y,R27
000077 93ea      	ST   -Y,R30
000078 93fa      	ST   -Y,R31
000079 b7ef      	IN   R30,SREG
00007a 93ea      	ST   -Y,R30
                 ; 0000 0007 interupt_0();
00007b 940e 00a7 	CALL _interupt_0
                 ; 0000 0008 
                 ; 0000 0009 }
00007d 91e9      	LD   R30,Y+
00007e bfef      	OUT  SREG,R30
00007f 91f9      	LD   R31,Y+
000080 91e9      	LD   R30,Y+
000081 91b9      	LD   R27,Y+
000082 91a9      	LD   R26,Y+
000083 9199      	LD   R25,Y+
000084 9189      	LD   R24,Y+
000085 9179      	LD   R23,Y+
000086 9169      	LD   R22,Y+
000087 90f9      	LD   R15,Y+
000088 9019      	LD   R1,Y+
000089 9009      	LD   R0,Y+
00008a 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 000C {
                 _main:
                 ; .FSTART _main
                 ; 0000 000D init_ports_timers();
00008b d008      	RCALL _init_ports_timers
                 ; 0000 000E lcd_init(16);
00008c e1a0      	LDI  R26,LOW(16)
00008d 940e 014a 	CALL _lcd_init
                 ; 0000 000F 
                 ; 0000 0010 // Global enable interrupts
                 ; 0000 0011 #asm("sei")
00008f 9478      	sei
                 ; 0000 0012 DDRB = 0x00;
000090 e0e0      	LDI  R30,LOW(0)
000091 bbe7      	OUT  0x17,R30
                 ; 0000 0013 while (1)
                 _0x3:
                 ; 0000 0014       {
                 ; 0000 0015       // Place your code here
                 ; 0000 0016 
                 ; 0000 0017       }
000092 cfff      	RJMP _0x3
                 ; 0000 0018 }
                 _0x6:
000093 cfff      	RJMP _0x6
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void init_ports_timers(void){
                 ; 0001 0004 void init_ports_timers(void){
                 
                 	.CSEG
                 _init_ports_timers:
                 ; .FSTART _init_ports_timers
                 ; 0001 0005 // Declare your local variables here
                 ; 0001 0006 
                 ; 0001 0007 // Input/Output Ports initialization
                 ; 0001 0008 // Port A initialization
                 ; 0001 0009 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 000A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000094 e0e0      	LDI  R30,LOW(0)
000095 bbea      	OUT  0x1A,R30
                 ; 0001 000B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 000C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000096 bbeb      	OUT  0x1B,R30
                 ; 0001 000D 
                 ; 0001 000E // Port B initialization
                 ; 0001 000F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0010 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000097 bbe7      	OUT  0x17,R30
                 ; 0001 0011 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0012 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000098 bbe8      	OUT  0x18,R30
                 ; 0001 0013 
                 ; 0001 0014 // Port C initialization
                 ; 0001 0015 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0016 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000099 bbe4      	OUT  0x14,R30
                 ; 0001 0017 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0018 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009a bbe5      	OUT  0x15,R30
                 ; 0001 0019 
                 ; 0001 001A // Port D initialization
                 ; 0001 001B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 001C DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00009b bbe1      	OUT  0x11,R30
                 ; 0001 001D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00009c bbe2      	OUT  0x12,R30
                 ; 0001 001F 
                 ; 0001 0020 // External Interrupt(s) initialization
                 ; 0001 0021 // INT0: On
                 ; 0001 0022 // INT0 Mode: Any change
                 ; 0001 0023 // INT1: Off
                 ; 0001 0024 // INT2: Off
                 ; 0001 0025 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
00009d b7eb      	IN   R30,0x3B
00009e 64e0      	ORI  R30,0x40
00009f bfeb      	OUT  0x3B,R30
                 ; 0001 0026 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
0000a0 e0e1      	LDI  R30,LOW(1)
0000a1 bfe5      	OUT  0x35,R30
                 ; 0001 0027 MCUCSR=(0<<ISC2);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 bfe4      	OUT  0x34,R30
                 ; 0001 0028 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000a4 e4e0      	LDI  R30,LOW(64)
0000a5 bfea      	OUT  0x3A,R30
                 ; 0001 0029 
                 ; 0001 002A // Alphanumeric LCD initialization
                 ; 0001 002B // Connections are specified in the
                 ; 0001 002C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 002D // RS - PORTC Bit 0
                 ; 0001 002E // RD - PORTC Bit 1
                 ; 0001 002F // EN - PORTC Bit 2
                 ; 0001 0030 // D4 - PORTC Bit 4
                 ; 0001 0031 // D5 - PORTC Bit 5
                 ; 0001 0032 // D6 - PORTC Bit 6
                 ; 0001 0033 // D7 - PORTC Bit 7
                 ; 0001 0034 // Characters/line: 16
                 ; 0001 0035 }
0000a6 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void interupt_0(void){
                 ; 0002 0003 void interupt_0(void){
                 
                 	.CSEG
                 _interupt_0:
                 ; .FSTART _interupt_0
                 ; 0002 0004     char tmp[16];
                 ; 0002 0005     // Place your code here
                 ; 0002 0006     lcd_clear();
0000a7 9760      	SBIW R28,16
                 ;	tmp -> Y+0
0000a8 d06f      	RCALL _lcd_clear
                 ; 0002 0007     if (PINB.7 ==0 )
0000a9 99b7      	SBIC 0x16,7
0000aa c006      	RJMP _0x40003
                 ; 0002 0008         total_car++;
0000ab e6a0      	LDI  R26,LOW(_total_car)
0000ac e0b1      	LDI  R27,HIGH(_total_car)
0000ad 91ed      	LD   R30,X+
0000ae 91fd      	LD   R31,X+
0000af 9631      	ADIW R30,1
0000b0 c00d      	RJMP _0x4000A
                 ; 0002 0009 
                 ; 0002 000A     else if (PINB.3 == 0 && total_car > 0)
                 _0x40003:
0000b1 99b3      	SBIC 0x16,3
0000b2 c005      	RJMP _0x40006
0000b3 940e 0339 	CALL SUBOPT_0x0
0000b5 940e 039c 	CALL __CPW02
0000b7 f00c      	BRLT _0x40007
                 _0x40006:
0000b8 c007      	RJMP _0x40005
                 _0x40007:
                 ; 0002 000B       total_car--;
0000b9 e6a0      	LDI  R26,LOW(_total_car)
0000ba e0b1      	LDI  R27,HIGH(_total_car)
0000bb 91ed      	LD   R30,X+
0000bc 91fd      	LD   R31,X+
0000bd 9731      	SBIW R30,1
                 _0x4000A:
0000be 93fe      	ST   -X,R31
0000bf 93ee      	ST   -X,R30
                 ; 0002 000C 
                 ; 0002 000D     if (total_car == 1000)
                 _0x40005:
0000c0 940e 0339 	CALL SUBOPT_0x0
0000c2 3ea8      	CPI  R26,LOW(0x3E8)
0000c3 e0e3      	LDI  R30,HIGH(0x3E8)
0000c4 07be      	CPC  R27,R30
0000c5 f461      	BRNE _0x40008
                 ; 0002 000E             sprintf(tmp,"%s","CE:FULL");
0000c6 01fe      	MOVW R30,R28
0000c7 93fa      	ST   -Y,R31
0000c8 93ea      	ST   -Y,R30
                +
0000c9 e6e6     +LDI R30 , LOW ( 2 * _0x40000 + ( 0 ) )
0000ca e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 0 ) )
                 	__POINTW1FN _0x40000,0
0000cb 93fa      	ST   -Y,R31
0000cc 93ea      	ST   -Y,R30
                +
0000cd e6e9     +LDI R30 , LOW ( 2 * _0x40000 + ( 3 ) )
0000ce e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 3 ) )
                 	__POINTW1FN _0x40000,3
0000cf 2766      	CLR  R22
0000d0 2777      	CLR  R23
0000d1 c00f      	RJMP _0x4000B
                 ; 0002 000F     else
                 _0x40008:
                 ; 0002 0010          sprintf(tmp,"\nCE:%d",1000 - total_car);
0000d2 01fe      	MOVW R30,R28
0000d3 93fa      	ST   -Y,R31
0000d4 93ea      	ST   -Y,R30
                +
0000d5 e7e1     +LDI R30 , LOW ( 2 * _0x40000 + ( 11 ) )
0000d6 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 11 ) )
                 	__POINTW1FN _0x40000,11
0000d7 93fa      	ST   -Y,R31
0000d8 93ea      	ST   -Y,R30
0000d9 940e 0339 	CALL SUBOPT_0x0
0000db eee8      	LDI  R30,LOW(1000)
0000dc e0f3      	LDI  R31,HIGH(1000)
0000dd 1bea      	SUB  R30,R26
0000de 0bfb      	SBC  R31,R27
0000df 940e 038a 	CALL __CWD1
                 _0x4000B:
0000e1 940e 0397 	CALL __PUTPARD1
0000e3 e084      	LDI  R24,4
0000e4 940e 02ec 	CALL _sprintf
0000e6 9628      	ADIW R28,8
                 ; 0002 0011      lcd_puts(tmp);
0000e7 01de      	MOVW R26,R28
0000e8 d050      	RCALL _lcd_puts
                 ; 0002 0012 
                 ; 0002 0013      }
0000e9 9660      	ADIW R28,16
0000ea 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000eb 93aa      	ST   -Y,R26
0000ec b3e5      	IN   R30,0x15
0000ed 70ef      	ANDI R30,LOW(0xF)
0000ee 2fae      	MOV  R26,R30
0000ef 81e8      	LD   R30,Y
0000f0 7fe0      	ANDI R30,LOW(0xF0)
0000f1 2bea      	OR   R30,R26
0000f2 bbe5      	OUT  0x15,R30
                +
0000f3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f4 958a     +DEC R24
0000f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f6 9aaa      	SBI  0x15,2
                +
0000f7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fa 98aa      	CBI  0x15,2
                +
0000fb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fc 958a     +DEC R24
0000fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fe c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000ff 93aa      	ST   -Y,R26
000100 81a8      	LD   R26,Y
000101 dfe9      	RCALL __lcd_write_nibble_G100
000102 81e8          ld    r30,y
000103 95e2          swap  r30
000104 83e8          st    y,r30
000105 81a8      	LD   R26,Y
000106 dfe4      	RCALL __lcd_write_nibble_G100
                +
000107 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000108 958a     +DEC R24
000109 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010a c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010b 93aa      	ST   -Y,R26
00010c 81e8      	LD   R30,Y
00010d e0f0      	LDI  R31,0
00010e 59ee      	SUBI R30,LOW(-__base_y_G100)
00010f 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000110 81e0      	LD   R30,Z
000111 81a9      	LDD  R26,Y+1
000112 0fae      	ADD  R26,R30
000113 dfeb      	RCALL __lcd_write_data
000114 8059      	LDD  R5,Y+1
000115 8048      	LDD  R4,Y+0
000116 9622      	ADIW R28,2
000117 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000118 e0a2      	LDI  R26,LOW(2)
000119 940e 033e 	CALL SUBOPT_0x1
00011b e0ac      	LDI  R26,LOW(12)
00011c dfe2      	RCALL __lcd_write_data
00011d e0a1      	LDI  R26,LOW(1)
00011e 940e 033e 	CALL SUBOPT_0x1
000120 e0e0      	LDI  R30,LOW(0)
000121 2e4e      	MOV  R4,R30
000122 2e5e      	MOV  R5,R30
000123 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000124 93aa      	ST   -Y,R26
000125 81a8      	LD   R26,Y
000126 30aa      	CPI  R26,LOW(0xA)
000127 f011      	BREQ _0x2000005
000128 1457      	CP   R5,R7
000129 f048      	BRLO _0x2000004
                 _0x2000005:
00012a e0e0      	LDI  R30,LOW(0)
00012b 93ea      	ST   -Y,R30
00012c 9443      	INC  R4
00012d 2da4      	MOV  R26,R4
00012e dfdc      	RCALL _lcd_gotoxy
00012f 81a8      	LD   R26,Y
000130 30aa      	CPI  R26,LOW(0xA)
000131 f409      	BRNE _0x2000007
000132 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000133 9453      	INC  R5
000134 9aa8      	SBI  0x15,0
000135 81a8      	LD   R26,Y
000136 dfc8      	RCALL __lcd_write_data
000137 98a8      	CBI  0x15,0
000138 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000139 93ba      	ST   -Y,R27
00013a 93aa      	ST   -Y,R26
00013b 931a      	ST   -Y,R17
                 _0x2000008:
00013c 81a9      	LDD  R26,Y+1
00013d 81ba      	LDD  R27,Y+1+1
00013e 91ed      	LD   R30,X+
00013f 83a9      	STD  Y+1,R26
000140 83ba      	STD  Y+1+1,R27
000141 2f1e      	MOV  R17,R30
000142 30e0      	CPI  R30,0
000143 f019      	BREQ _0x200000A
000144 2fa1      	MOV  R26,R17
000145 dfde      	RCALL _lcd_putchar
000146 cff5      	RJMP _0x2000008
                 _0x200000A:
000147 8118      	LDD  R17,Y+0
000148 9623      	ADIW R28,3
000149 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014a 93aa      	ST   -Y,R26
00014b b3e4      	IN   R30,0x14
00014c 6fe0      	ORI  R30,LOW(0xF0)
00014d bbe4      	OUT  0x14,R30
00014e 9aa2      	SBI  0x14,2
00014f 9aa0      	SBI  0x14,0
000150 9aa1      	SBI  0x14,1
000151 98aa      	CBI  0x15,2
000152 98a8      	CBI  0x15,0
000153 98a9      	CBI  0x15,1
000154 8078      	LDD  R7,Y+0
000155 81e8      	LD   R30,Y
000156 58e0      	SUBI R30,-LOW(128)
                +
000157 93e0 0164+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000159 81e8      	LD   R30,Y
00015a 54e0      	SUBI R30,-LOW(192)
                +
00015b 93e0 0165+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015d e1a4      	LDI  R26,LOW(20)
00015e e0b0      	LDI  R27,0
00015f 940e 0378 	CALL _delay_ms
000161 940e 0344 	CALL SUBOPT_0x2
000163 940e 0344 	CALL SUBOPT_0x2
000165 940e 0344 	CALL SUBOPT_0x2
000167 e2a0      	LDI  R26,LOW(32)
000168 df82      	RCALL __lcd_write_nibble_G100
                +
000169 ec88     +LDI R24 , LOW ( 200 )
00016a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00016b 9701     +SBIW R24 , 1
00016c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00016d e2a8      	LDI  R26,LOW(40)
00016e df90      	RCALL __lcd_write_data
00016f e0a4      	LDI  R26,LOW(4)
000170 df8e      	RCALL __lcd_write_data
000171 e8a5      	LDI  R26,LOW(133)
000172 df8c      	RCALL __lcd_write_data
000173 e0a6      	LDI  R26,LOW(6)
000174 df8a      	RCALL __lcd_write_data
000175 dfa2      	RCALL _lcd_clear
                 _0x2080002:
000176 9621      	ADIW R28,1
000177 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000178 93ba      	ST   -Y,R27
000179 93aa      	ST   -Y,R26
00017a 931a      	ST   -Y,R17
00017b 930a      	ST   -Y,R16
00017c 81aa      	LDD  R26,Y+2
00017d 81bb      	LDD  R27,Y+2+1
00017e 9612      	ADIW R26,2
00017f 940e 038f 	CALL __GETW1P
000181 9730      	SBIW R30,0
000182 f159      	BREQ _0x2020010
000183 81aa      	LDD  R26,Y+2
000184 81bb      	LDD  R27,Y+2+1
000185 9614      	ADIW R26,4
000186 940e 038f 	CALL __GETW1P
000188 018f      	MOVW R16,R30
000189 9730      	SBIW R30,0
00018a f061      	BREQ _0x2020012
                +
00018b 3002     +CPI R16 , LOW ( 2 )
00018c e0e0     +LDI R30 , HIGH ( 2 )
00018d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00018e f098      	BRLO _0x2020013
00018f 01f8      	MOVW R30,R16
000190 9731      	SBIW R30,1
000191 018f      	MOVW R16,R30
                +
000192 81aa     +LDD R26 , Y + 2
000193 81bb     +LDD R27 , Y + 2 + 1
000194 9614     +ADIW R26 , 4
000195 93ed     +ST X + , R30
000196 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000197 81aa      	LDD  R26,Y+2
000198 81bb      	LDD  R27,Y+2+1
000199 9612      	ADIW R26,2
00019a 91ed      	LD   R30,X+
00019b 91fd      	LD   R31,X+
00019c 9631      	ADIW R30,1
00019d 93fe      	ST   -X,R31
00019e 93ee      	ST   -X,R30
00019f 9731      	SBIW R30,1
0001a0 81ac      	LDD  R26,Y+4
0001a1 83a0      	STD  Z+0,R26
                 _0x2020013:
0001a2 81aa      	LDD  R26,Y+2
0001a3 81bb      	LDD  R27,Y+2+1
0001a4 940e 038f 	CALL __GETW1P
0001a6 23ff      	TST  R31
0001a7 f02a      	BRMI _0x2020014
0001a8 91ed      	LD   R30,X+
0001a9 91fd      	LD   R31,X+
0001aa 9631      	ADIW R30,1
0001ab 93fe      	ST   -X,R31
0001ac 93ee      	ST   -X,R30
                 _0x2020014:
0001ad c006      	RJMP _0x2020015
                 _0x2020010:
0001ae 81aa      	LDD  R26,Y+2
0001af 81bb      	LDD  R27,Y+2+1
0001b0 efef      	LDI  R30,LOW(65535)
0001b1 efff      	LDI  R31,HIGH(65535)
0001b2 93ed      	ST   X+,R30
0001b3 93fc      	ST   X,R31
                 _0x2020015:
0001b4 8119      	LDD  R17,Y+1
0001b5 8108      	LDD  R16,Y+0
0001b6 9625      	ADIW R28,5
0001b7 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001b8 93ba      	ST   -Y,R27
0001b9 93aa      	ST   -Y,R26
0001ba 9726      	SBIW R28,6
0001bb 940e 03a0 	CALL __SAVELOCR6
0001bd e010      	LDI  R17,0
0001be 85ac      	LDD  R26,Y+12
0001bf 85bd      	LDD  R27,Y+12+1
0001c0 e0e0      	LDI  R30,LOW(0)
0001c1 e0f0      	LDI  R31,HIGH(0)
0001c2 93ed      	ST   X+,R30
0001c3 93fc      	ST   X,R31
                 _0x2020016:
0001c4 89ea      	LDD  R30,Y+18
0001c5 89fb      	LDD  R31,Y+18+1
0001c6 9631      	ADIW R30,1
0001c7 8bea      	STD  Y+18,R30
0001c8 8bfb      	STD  Y+18+1,R31
0001c9 9731      	SBIW R30,1
0001ca 91e4      	LPM  R30,Z
0001cb 2f2e      	MOV  R18,R30
0001cc 30e0      	CPI  R30,0
0001cd f409      	BRNE PC+2
0001ce c115      	RJMP _0x2020018
0001cf 2fe1      	MOV  R30,R17
0001d0 30e0      	CPI  R30,0
0001d1 f439      	BRNE _0x202001C
0001d2 3225      	CPI  R18,37
0001d3 f411      	BRNE _0x202001D
0001d4 e011      	LDI  R17,LOW(1)
0001d5 c002      	RJMP _0x202001E
                 _0x202001D:
0001d6 940e 034c 	CALL SUBOPT_0x3
                 _0x202001E:
0001d8 c10a      	RJMP _0x202001B
                 _0x202001C:
0001d9 30e1      	CPI  R30,LOW(0x1)
0001da f4a9      	BRNE _0x202001F
0001db 3225      	CPI  R18,37
0001dc f419      	BRNE _0x2020020
0001dd 940e 034c 	CALL SUBOPT_0x3
0001df c102      	RJMP _0x20200CC
                 _0x2020020:
0001e0 e012      	LDI  R17,LOW(2)
0001e1 e040      	LDI  R20,LOW(0)
0001e2 e000      	LDI  R16,LOW(0)
0001e3 322d      	CPI  R18,45
0001e4 f411      	BRNE _0x2020021
0001e5 e001      	LDI  R16,LOW(1)
0001e6 c0fc      	RJMP _0x202001B
                 _0x2020021:
0001e7 322b      	CPI  R18,43
0001e8 f411      	BRNE _0x2020022
0001e9 e24b      	LDI  R20,LOW(43)
0001ea c0f8      	RJMP _0x202001B
                 _0x2020022:
0001eb 3220      	CPI  R18,32
0001ec f411      	BRNE _0x2020023
0001ed e240      	LDI  R20,LOW(32)
0001ee c0f4      	RJMP _0x202001B
                 _0x2020023:
0001ef c002      	RJMP _0x2020024
                 _0x202001F:
0001f0 30e2      	CPI  R30,LOW(0x2)
0001f1 f439      	BRNE _0x2020025
                 _0x2020024:
0001f2 e050      	LDI  R21,LOW(0)
0001f3 e013      	LDI  R17,LOW(3)
0001f4 3320      	CPI  R18,48
0001f5 f411      	BRNE _0x2020026
0001f6 6800      	ORI  R16,LOW(128)
0001f7 c0eb      	RJMP _0x202001B
                 _0x2020026:
0001f8 c003      	RJMP _0x2020027
                 _0x2020025:
0001f9 30e3      	CPI  R30,LOW(0x3)
0001fa f009      	BREQ PC+2
0001fb c0e7      	RJMP _0x202001B
                 _0x2020027:
0001fc 3320      	CPI  R18,48
0001fd f010      	BRLO _0x202002A
0001fe 332a      	CPI  R18,58
0001ff f008      	BRLO _0x202002B
                 _0x202002A:
000200 c007      	RJMP _0x2020029
                 _0x202002B:
000201 e0aa      	LDI  R26,LOW(10)
000202 9f5a      	MUL  R21,R26
000203 2d50      	MOV  R21,R0
000204 2fe2      	MOV  R30,R18
000205 53e0      	SUBI R30,LOW(48)
000206 0f5e      	ADD  R21,R30
000207 c0db      	RJMP _0x202001B
                 _0x2020029:
000208 2fe2      	MOV  R30,R18
000209 36e3      	CPI  R30,LOW(0x63)
00020a f449      	BRNE _0x202002F
00020b 940e 0353 	CALL SUBOPT_0x4
00020d 89e8      	LDD  R30,Y+16
00020e 89f9      	LDD  R31,Y+16+1
00020f 81a4      	LDD  R26,Z+4
000210 93aa      	ST   -Y,R26
000211 940e 0359 	CALL SUBOPT_0x5
000213 c0ce      	RJMP _0x2020030
                 _0x202002F:
000214 37e3      	CPI  R30,LOW(0x73)
000215 f441      	BRNE _0x2020032
000216 940e 0353 	CALL SUBOPT_0x4
000218 940e 035f 	CALL SUBOPT_0x6
00021a 940e 0320 	CALL _strlen
00021c 2f1e      	MOV  R17,R30
00021d c00a      	RJMP _0x2020033
                 _0x2020032:
00021e 37e0      	CPI  R30,LOW(0x70)
00021f f461      	BRNE _0x2020035
000220 940e 0353 	CALL SUBOPT_0x4
000222 940e 035f 	CALL SUBOPT_0x6
000224 940e 032c 	CALL _strlenf
000226 2f1e      	MOV  R17,R30
000227 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000228 6002      	ORI  R16,LOW(2)
000229 770f      	ANDI R16,LOW(127)
00022a e030      	LDI  R19,LOW(0)
00022b c034      	RJMP _0x2020036
                 _0x2020035:
00022c 36e4      	CPI  R30,LOW(0x64)
00022d f011      	BREQ _0x2020039
00022e 36e9      	CPI  R30,LOW(0x69)
00022f f411      	BRNE _0x202003A
                 _0x2020039:
000230 6004      	ORI  R16,LOW(4)
000231 c002      	RJMP _0x202003B
                 _0x202003A:
000232 37e5      	CPI  R30,LOW(0x75)
000233 f431      	BRNE _0x202003C
                 _0x202003B:
000234 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000235 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000236 83ee      	STD  Y+6,R30
000237 83ff      	STD  Y+6+1,R31
000238 e015      	LDI  R17,LOW(5)
000239 c00c      	RJMP _0x202003D
                 _0x202003C:
00023a 35e8      	CPI  R30,LOW(0x58)
00023b f411      	BRNE _0x202003F
00023c 6008      	ORI  R16,LOW(8)
00023d c003      	RJMP _0x2020040
                 _0x202003F:
00023e 37e8      	CPI  R30,LOW(0x78)
00023f f009      	BREQ PC+2
000240 c0a1      	RJMP _0x2020071
                 _0x2020040:
000241 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000242 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000243 83ee      	STD  Y+6,R30
000244 83ff      	STD  Y+6+1,R31
000245 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000246 ff02      	SBRS R16,2
000247 c014      	RJMP _0x2020042
000248 940e 0353 	CALL SUBOPT_0x4
00024a 940e 0369 	CALL SUBOPT_0x7
00024c 85ab      	LDD  R26,Y+11
00024d 23aa      	TST  R26
00024e f43a      	BRPL _0x2020043
00024f 85ea      	LDD  R30,Y+10
000250 85fb      	LDD  R31,Y+10+1
000251 940e 0386 	CALL __ANEGW1
000253 87ea      	STD  Y+10,R30
000254 87fb      	STD  Y+10+1,R31
000255 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000256 3040      	CPI  R20,0
000257 f011      	BREQ _0x2020044
000258 5f1f      	SUBI R17,-LOW(1)
000259 c001      	RJMP _0x2020045
                 _0x2020044:
00025a 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00025b c004      	RJMP _0x2020046
                 _0x2020042:
00025c 940e 0353 	CALL SUBOPT_0x4
00025e 940e 0369 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000260 fd00      	SBRC R16,0
000261 c011      	RJMP _0x2020047
                 _0x2020048:
000262 1715      	CP   R17,R21
000263 f478      	BRSH _0x202004A
000264 ff07      	SBRS R16,7
000265 c008      	RJMP _0x202004B
000266 ff02      	SBRS R16,2
000267 c004      	RJMP _0x202004C
000268 7f0b      	ANDI R16,LOW(251)
000269 2f24      	MOV  R18,R20
00026a 5011      	SUBI R17,LOW(1)
00026b c001      	RJMP _0x202004D
                 _0x202004C:
00026c e320      	LDI  R18,LOW(48)
                 _0x202004D:
00026d c001      	RJMP _0x202004E
                 _0x202004B:
00026e e220      	LDI  R18,LOW(32)
                 _0x202004E:
00026f 940e 034c 	CALL SUBOPT_0x3
000271 5051      	SUBI R21,LOW(1)
000272 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000273 2f31      	MOV  R19,R17
000274 ff01      	SBRS R16,1
000275 c017      	RJMP _0x202004F
                 _0x2020050:
000276 3030      	CPI  R19,0
000277 f0a1      	BREQ _0x2020052
000278 ff03      	SBRS R16,3
000279 c006      	RJMP _0x2020053
00027a 81ee      	LDD  R30,Y+6
00027b 81ff      	LDD  R31,Y+6+1
00027c 9125      	LPM  R18,Z+
00027d 83ee      	STD  Y+6,R30
00027e 83ff      	STD  Y+6+1,R31
00027f c005      	RJMP _0x2020054
                 _0x2020053:
000280 81ae      	LDD  R26,Y+6
000281 81bf      	LDD  R27,Y+6+1
000282 912d      	LD   R18,X+
000283 83ae      	STD  Y+6,R26
000284 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000285 940e 034c 	CALL SUBOPT_0x3
000287 3050      	CPI  R21,0
000288 f009      	BREQ _0x2020055
000289 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00028a 5031      	SUBI R19,LOW(1)
00028b cfea      	RJMP _0x2020050
                 _0x2020052:
00028c c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00028d e320      	LDI  R18,LOW(48)
00028e 81ee      	LDD  R30,Y+6
00028f 81ff      	LDD  R31,Y+6+1
000290 940e 0393 	CALL __GETW1PF
000292 87e8      	STD  Y+8,R30
000293 87f9      	STD  Y+8+1,R31
000294 81ee      	LDD  R30,Y+6
000295 81ff      	LDD  R31,Y+6+1
000296 9632      	ADIW R30,2
000297 83ee      	STD  Y+6,R30
000298 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000299 85e8      	LDD  R30,Y+8
00029a 85f9      	LDD  R31,Y+8+1
00029b 85aa      	LDD  R26,Y+10
00029c 85bb      	LDD  R27,Y+10+1
00029d 17ae      	CP   R26,R30
00029e 07bf      	CPC  R27,R31
00029f f050      	BRLO _0x202005C
0002a0 5f2f      	SUBI R18,-LOW(1)
0002a1 85a8      	LDD  R26,Y+8
0002a2 85b9      	LDD  R27,Y+8+1
0002a3 85ea      	LDD  R30,Y+10
0002a4 85fb      	LDD  R31,Y+10+1
0002a5 1bea      	SUB  R30,R26
0002a6 0bfb      	SBC  R31,R27
0002a7 87ea      	STD  Y+10,R30
0002a8 87fb      	STD  Y+10+1,R31
0002a9 cfef      	RJMP _0x202005A
                 _0x202005C:
0002aa 332a      	CPI  R18,58
0002ab f028      	BRLO _0x202005D
0002ac ff03      	SBRS R16,3
0002ad c002      	RJMP _0x202005E
0002ae 5f29      	SUBI R18,-LOW(7)
0002af c001      	RJMP _0x202005F
                 _0x202005E:
0002b0 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002b1 fd04      	SBRC R16,4
0002b2 c01a      	RJMP _0x2020061
0002b3 3321      	CPI  R18,49
0002b4 f420      	BRSH _0x2020063
0002b5 85a8      	LDD  R26,Y+8
0002b6 85b9      	LDD  R27,Y+8+1
0002b7 9711      	SBIW R26,1
0002b8 f409      	BRNE _0x2020062
                 _0x2020063:
0002b9 c009      	RJMP _0x20200CD
                 _0x2020062:
0002ba 1753      	CP   R21,R19
0002bb f010      	BRLO _0x2020067
0002bc ff00      	SBRS R16,0
0002bd c001      	RJMP _0x2020068
                 _0x2020067:
0002be c013      	RJMP _0x2020066
                 _0x2020068:
0002bf e220      	LDI  R18,LOW(32)
0002c0 ff07      	SBRS R16,7
0002c1 c00b      	RJMP _0x2020069
0002c2 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002c3 6100      	ORI  R16,LOW(16)
0002c4 ff02      	SBRS R16,2
0002c5 c007      	RJMP _0x202006A
0002c6 7f0b      	ANDI R16,LOW(251)
0002c7 934a      	ST   -Y,R20
0002c8 940e 0359 	CALL SUBOPT_0x5
0002ca 3050      	CPI  R21,0
0002cb f009      	BREQ _0x202006B
0002cc 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002cd 940e 034c 	CALL SUBOPT_0x3
0002cf 3050      	CPI  R21,0
0002d0 f009      	BREQ _0x202006C
0002d1 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002d2 5031      	SUBI R19,LOW(1)
0002d3 85a8      	LDD  R26,Y+8
0002d4 85b9      	LDD  R27,Y+8+1
0002d5 9712      	SBIW R26,2
0002d6 f008      	BRLO _0x2020059
0002d7 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002d8 ff00      	SBRS R16,0
0002d9 c008      	RJMP _0x202006D
                 _0x202006E:
0002da 3050      	CPI  R21,0
0002db f031      	BREQ _0x2020070
0002dc 5051      	SUBI R21,LOW(1)
0002dd e2e0      	LDI  R30,LOW(32)
0002de 93ea      	ST   -Y,R30
0002df 940e 0359 	CALL SUBOPT_0x5
0002e1 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002e2 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002e3 cee0      	RJMP _0x2020016
                 _0x2020018:
0002e4 85ac      	LDD  R26,Y+12
0002e5 85bd      	LDD  R27,Y+12+1
0002e6 940e 038f 	CALL __GETW1P
0002e8 940e 03a7 	CALL __LOADLOCR6
0002ea 9664      	ADIW R28,20
0002eb 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002ec 92ff      	PUSH R15
0002ed 2ef8      	MOV  R15,R24
0002ee 9726      	SBIW R28,6
0002ef 940e 03a2 	CALL __SAVELOCR4
0002f1 940e 0371 	CALL SUBOPT_0x8
0002f3 9730      	SBIW R30,0
0002f4 f419      	BRNE _0x2020072
0002f5 efef      	LDI  R30,LOW(65535)
0002f6 efff      	LDI  R31,HIGH(65535)
0002f7 c023      	RJMP _0x2080001
                 _0x2020072:
0002f8 01de      	MOVW R26,R28
0002f9 9616      	ADIW R26,6
0002fa 940e 0382 	CALL __ADDW2R15
0002fc 018d      	MOVW R16,R26
0002fd 940e 0371 	CALL SUBOPT_0x8
0002ff 83ee      	STD  Y+6,R30
000300 83ff      	STD  Y+6+1,R31
000301 e0e0      	LDI  R30,LOW(0)
000302 87e8      	STD  Y+8,R30
000303 87e9      	STD  Y+8+1,R30
000304 01de      	MOVW R26,R28
000305 961a      	ADIW R26,10
000306 940e 0382 	CALL __ADDW2R15
000308 940e 038f 	CALL __GETW1P
00030a 93fa      	ST   -Y,R31
00030b 93ea      	ST   -Y,R30
00030c 931a      	ST   -Y,R17
00030d 930a      	ST   -Y,R16
00030e e7e8      	LDI  R30,LOW(_put_buff_G101)
00030f e0f1      	LDI  R31,HIGH(_put_buff_G101)
000310 93fa      	ST   -Y,R31
000311 93ea      	ST   -Y,R30
000312 01de      	MOVW R26,R28
000313 961a      	ADIW R26,10
000314 dea3      	RCALL __print_G101
000315 019f      	MOVW R18,R30
000316 81ae      	LDD  R26,Y+6
000317 81bf      	LDD  R27,Y+6+1
000318 e0e0      	LDI  R30,LOW(0)
000319 93ec      	ST   X,R30
00031a 01f9      	MOVW R30,R18
                 _0x2080001:
00031b 940e 03a9 	CALL __LOADLOCR4
00031d 962a      	ADIW R28,10
00031e 90ff      	POP  R15
00031f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000320 93ba      	ST   -Y,R27
000321 93aa      	ST   -Y,R26
000322 91a9          ld   r26,y+
000323 91b9          ld   r27,y+
000324 27ee          clr  r30
000325 27ff          clr  r31
                 strlen0:
000326 916d          ld   r22,x+
000327 2366          tst  r22
000328 f011          breq strlen1
000329 9631          adiw r30,1
00032a cffb          rjmp strlen0
                 strlen1:
00032b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00032c 93ba      	ST   -Y,R27
00032d 93aa      	ST   -Y,R26
00032e 27aa          clr  r26
00032f 27bb          clr  r27
000330 91e9          ld   r30,y+
000331 91f9          ld   r31,y+
                 strlenf0:
000332 9005      	lpm  r0,z+
000333 2000          tst  r0
000334 f011          breq strlenf1
000335 9611          adiw r26,1
000336 cffb          rjmp strlenf0
                 strlenf1:
000337 01fd          movw r30,r26
000338 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _total_car:
000160           	.BYTE 0x2
                 __base_y_G100:
000162           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000339 91a0 0160 	LDS  R26,_total_car
00033b 91b0 0161 	LDS  R27,_total_car+1
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00033e 940e 00ff 	CALL __lcd_write_data
000340 e0a3      	LDI  R26,LOW(3)
000341 e0b0      	LDI  R27,0
000342 940c 0378 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000344 e3a0      	LDI  R26,LOW(48)
000345 940e 00eb 	CALL __lcd_write_nibble_G100
                +
000347 ec88     +LDI R24 , LOW ( 200 )
000348 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000349 9701     +SBIW R24 , 1
00034a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00034b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00034c 932a      	ST   -Y,R18
00034d 85ad      	LDD  R26,Y+13
00034e 85be      	LDD  R27,Y+13+1
00034f 85ef      	LDD  R30,Y+15
000350 89f8      	LDD  R31,Y+15+1
000351 9509      	ICALL
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000353 89e8      	LDD  R30,Y+16
000354 89f9      	LDD  R31,Y+16+1
000355 9734      	SBIW R30,4
000356 8be8      	STD  Y+16,R30
000357 8bf9      	STD  Y+16+1,R31
000358 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000359 85ad      	LDD  R26,Y+13
00035a 85be      	LDD  R27,Y+13+1
00035b 85ef      	LDD  R30,Y+15
00035c 89f8      	LDD  R31,Y+15+1
00035d 9509      	ICALL
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00035f 89a8      	LDD  R26,Y+16
000360 89b9      	LDD  R27,Y+16+1
000361 9614      	ADIW R26,4
000362 940e 038f 	CALL __GETW1P
000364 83ee      	STD  Y+6,R30
000365 83ff      	STD  Y+6+1,R31
000366 81ae      	LDD  R26,Y+6
000367 81bf      	LDD  R27,Y+6+1
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000369 89a8      	LDD  R26,Y+16
00036a 89b9      	LDD  R27,Y+16+1
00036b 9614      	ADIW R26,4
00036c 940e 038f 	CALL __GETW1P
00036e 87ea      	STD  Y+10,R30
00036f 87fb      	STD  Y+10+1,R31
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000371 01de      	MOVW R26,R28
000372 961c      	ADIW R26,12
000373 940e 0382 	CALL __ADDW2R15
000375 940e 038f 	CALL __GETW1P
000377 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000378 9610      	adiw r26,0
000379 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00037a ed80     +LDI R24 , LOW ( 0x7D0 )
00037b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00037c 9701     +SBIW R24 , 1
00037d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00037e 95a8      	wdr
00037f 9711      	sbiw r26,1
000380 f7c9      	brne __delay_ms0
                 __delay_ms1:
000381 9508      	ret
                 
                 __ADDW2R15:
000382 2400      	CLR  R0
000383 0daf      	ADD  R26,R15
000384 1db0      	ADC  R27,R0
000385 9508      	RET
                 
                 __ANEGW1:
000386 95f1      	NEG  R31
000387 95e1      	NEG  R30
000388 40f0      	SBCI R31,0
000389 9508      	RET
                 
                 __CWD1:
00038a 2f6f      	MOV  R22,R31
00038b 0f66      	ADD  R22,R22
00038c 0b66      	SBC  R22,R22
00038d 2f76      	MOV  R23,R22
00038e 9508      	RET
                 
                 __GETW1P:
00038f 91ed      	LD   R30,X+
000390 91fc      	LD   R31,X
000391 9711      	SBIW R26,1
000392 9508      	RET
                 
                 __GETW1PF:
000393 9005      	LPM  R0,Z+
000394 91f4      	LPM  R31,Z
000395 2de0      	MOV  R30,R0
000396 9508      	RET
                 
                 __PUTPARD1:
000397 937a      	ST   -Y,R23
000398 936a      	ST   -Y,R22
000399 93fa      	ST   -Y,R31
00039a 93ea      	ST   -Y,R30
00039b 9508      	RET
                 
                 __CPW02:
00039c 2400      	CLR  R0
00039d 160a      	CP   R0,R26
00039e 060b      	CPC  R0,R27
00039f 9508      	RET
                 
                 __SAVELOCR6:
0003a0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003a1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003a2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003a3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003a4 931a      	ST   -Y,R17
0003a5 930a      	ST   -Y,R16
0003a6 9508      	RET
                 
                 __LOADLOCR6:
0003a7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003a8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003a9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003aa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ab 8119      	LDD  R17,Y+1
0003ac 8108      	LD   R16,Y
0003ad 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  16 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  14 r23:   5 
r24:  25 r25:   7 r26: 104 r27:  44 r28:  19 r29:   1 r30: 184 r31:  68 
x  :  29 y  : 193 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  55 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   4 cpi   :  34 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  23 ld    :  41 ldd   :  77 ldi   :  95 
lds   :   2 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :  17 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  22 pop   :   1 push  :   1 rcall :  17 ret   :  29 
reti  :   1 rjmp  :  64 rol   :   0 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   2 sbis  :   0 sbiw  :  21 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  76 std   :  31 sts   :   2 sub   :   2 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00075c   1838     46   1884   16384  11.5%
[.dseg] 0x000060 0x000166      0      6      6    1024   0.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings

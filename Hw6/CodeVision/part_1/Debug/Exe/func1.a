;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0001 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0005 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0006 // Delay needed for the stabilization of the ADC input voltage
; 0001 0007 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0001 0008 // Start the AD conversion
; 0001 0009 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 000A // Wait for the AD conversion to complete
; 0001 000B while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 000C ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 000D return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 000E }
;PCODE: $00000021 VOL: 0
;
;void init_acd(){
; 0001 0010 void init_acd(){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0011 
; 0001 0012 // Declare your local variables here
; 0001 0013 
; 0001 0014 // Input/Output Ports initialization
; 0001 0015 // Port A initialization
; 0001 0016 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0017 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0018 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0019 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 001A 
; 0001 001B // Port B initialization
; 0001 001C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 001D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 001E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 001F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0020 
; 0001 0021 // Port C initialization
; 0001 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0023 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0024 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0025 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0026 
; 0001 0027 // Port D initialization
; 0001 0028 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0029 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 002A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 002B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 002C 
; 0001 002D // ADC initialization
; 0001 002E // ADC Clock frequency: 1000/000 kHz
; 0001 002F // ADC Voltage Reference: AVCC pin
; 0001 0030 // ADC Auto Trigger Source: Free Running
; 0001 0031 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0032 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0033 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0034 
; 0001 0035 // Alphanumeric LCD initialization
; 0001 0036 // Connections are specified in the
; 0001 0037 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 0038 // RS - PORTC Bit 0
; 0001 0039 // RD - PORTC Bit 1
; 0001 003A // EN - PORTC Bit 2
; 0001 003B // D4 - PORTC Bit 4
; 0001 003C // D5 - PORTC Bit 5
; 0001 003D // D6 - PORTC Bit 6
; 0001 003E // D7 - PORTC Bit 7
; 0001 003F // Characters/line: 16
; 0001 0040 lcd_init(16);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0041 
; 0001 0042 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;
;void check_acds(){
; 0001 0045 void check_acds(){
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0046     char str[16];
; 0001 0047     int data;
; 0001 0048     int i;
; 0001 0049 
; 0001 004A    for (i=0;i<8;i++){
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;	str -> Y+4
;	data -> R16,R17
;	i -> R18,R19
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 004B         data = read_adc(i);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 004C         //sprintf(str,"Channel%d:%d.%d Mv",i,((ADCH*5)/256) * 1000,(((ADCH*5)/256) * 1000 )%10 );
; 0001 004D         sprintf(str,"Channel %d:%dMv",i,((data * 5)/1023)*1000 );
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 004E         //sprintf(str,"Channel %d:%d Mv",i,data );
; 0001 004F         lcd_puts(str);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0050         delay_ms(1000);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0051         lcd_clear();
;PCODE: $00000068 VOL: 0
; 0001 0052         }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0053 
; 0001 0054 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0

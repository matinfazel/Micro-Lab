;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;interrupt [ADC_INT] void adc_isr(void)
; 0001 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0006 static unsigned char input_index=0;
; 0001 0007 // Read the AD conversion result
; 0001 0008 adc_data[input_index]=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0009 // Select next ADC input
; 0001 000A if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 000B    input_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 000C ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 000D // Delay needed for the stabilization of the ADC input voltage
; 0001 000E delay_us(10);
;PCODE: $00000021 VOL: 0
; 0001 000F // Start the AD conversion
; 0001 0010 ADCSRA|=(1<<ADSC);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0011 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0001 0016 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0017 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000029 VOL: 0
;	adc_input -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0018 // Delay needed for the stabilization of the ADC input voltage
; 0001 0019 delay_us(10);
;PCODE: $0000002D VOL: 0
; 0001 001A // Start the AD conversion
; 0001 001B ADCSRA|=(1<<ADSC);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 001C // Wait for the AD conversion to complete
; 0001 001D while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 001E ADCSRA|=(1<<ADIF);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 001F return ADCW;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0020 }
;PCODE: $0000003B VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0001 0023 {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0024     char str[16];
; 0001 0025     int tmp;
; 0001 0026     int tmp_value;
; 0001 0027     data = adc_data[0];
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;	str -> Y+4
;	tmp -> R16,R17
;	tmp_value -> R18,R19
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0028 
; 0001 0029     tmp = ((data*90)/1024) ;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 002A      tmp_value =(2.55 * tmp + 5 ) + 0.5;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 002B     OCR0 = tmp_value;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 002C     sprintf(str,"Channel %d:%dMv",0,((data * 5)/1023)*1000 );
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 002D         //sprintf(str,"Channel %d:%d Mv",i,data );
; 0001 002E         lcd_gotoxy(0,0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 002F         lcd_puts(str);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0030 
; 0001 0031 
; 0001 0032 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;
;void init_adc_timer(void){
; 0001 0035 void init_adc_timer(void){
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0036 
; 0001 0037  // Declare your local variables here
; 0001 0038 
; 0001 0039 // Input/Output Ports initialization
; 0001 003A // Port A initialization
; 0001 003B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 003C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 003D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 003E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 003F 
; 0001 0040 // Port B initialization
; 0001 0041 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0042 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0043 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0044 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0045 
; 0001 0046 // Port C initialization
; 0001 0047 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0048 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0049 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 004A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 004B 
; 0001 004C // Port D initialization
; 0001 004D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 004E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 004F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0050 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 0051 
; 0001 0052 // ADC initialization
; 0001 0053 // ADC Clock frequency: 1000/000 kHz
; 0001 0054 // ADC Voltage Reference: AVCC pin
; 0001 0055 // ADC Auto Trigger Source: Free Running
; 0001 0056 
; 0001 0057 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 0058 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0059 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 005A 
; 0001 005B // Alphanumeric LCD initialization
; 0001 005C // Connections are specified in the
; 0001 005D // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 005E // RS - PORTC Bit 0
; 0001 005F // RD - PORTC Bit 1
; 0001 0060 // EN - PORTC Bit 2
; 0001 0061 // D4 - PORTC Bit 4
; 0001 0062 // D5 - PORTC Bit 5
; 0001 0063 // D6 - PORTC Bit 6
; 0001 0064 // D7 - PORTC Bit 7
; 0001 0065 // Characters/line: 16
; 0001 0066 
; 0001 0067 
; 0001 0068 // Timer/Counter 0 initialization
; 0001 0069 // Clock source: System Clock
; 0001 006A // Clock value: 7.813 kHz
; 0001 006B // Mode: Phase correct PWM top=0xFF
; 0001 006C // OC0 output: Non-Inverted PWM
; 0001 006D // Timer Period: 65.28 ms
; 0001 006E // Output Pulse(s):
; 0001 006F // OC0 Period: 65.28 ms Width: 32.768 ms
; 0001 0070 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 0071 TCNT0=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0072 OCR0=0x80;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0073 
; 0001 0074 // Timer/Counter 1 initialization
; 0001 0075 // Clock source: System Clock
; 0001 0076 // Clock value: Timer1 Stopped
; 0001 0077 // Mode: Normal top=0xFFFF
; 0001 0078 // OC1A output: Disconnected
; 0001 0079 // OC1B output: Disconnected
; 0001 007A // Noise Canceler: Off
; 0001 007B // Input Capture on Falling Edge
; 0001 007C // Timer1 Overflow Interrupt: Off
; 0001 007D // Input Capture Interrupt: Off
; 0001 007E // Compare A Match Interrupt: Off
; 0001 007F // Compare B Match Interrupt: Off
; 0001 0080 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0081 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0082 TCNT1H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0083 TCNT1L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0084 ICR1H=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0085 ICR1L=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0086 OCR1AH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 0087 OCR1AL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 0088 OCR1BH=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0089 OCR1BL=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 008A 
; 0001 008B // Timer/Counter 2 initialization
; 0001 008C // Clock source: System Clock
; 0001 008D // Clock value: Timer2 Stopped
; 0001 008E // Mode: Normal top=0xFF
; 0001 008F // OC2 output: Disconnected
; 0001 0090 ASSR=0<<AS2;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0091 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0092 TCNT2=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 0093 OCR2=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 0094 
; 0001 0095 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0096 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0097 
; 0001 0098 // External Interrupt(s) initialization
; 0001 0099 // INT0: Off
; 0001 009A // INT1: Off
; 0001 009B // INT2: Off
; 0001 009C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 009D MCUCSR=(0<<ISC2);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 009E 
; 0001 009F // USART initialization
; 0001 00A0 // USART disabled
; 0001 00A1 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 00A2 
; 0001 00A3 lcd_init(16);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 00A4 
; 0001 00A5 // Global enable interrupts
; 0001 00A6 #asm("sei")
;PCODE: $000000B9 VOL: 0
	sei
;PCODE: $000000BA VOL: 0
; 0001 00A7 
; 0001 00A8 }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0

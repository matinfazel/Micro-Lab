;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0001 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0006 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0007 // Delay needed for the stabilization of the ADC input voltage
; 0001 0008 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0001 0009 // Start the AD conversion
; 0001 000A ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 000B // Wait for the AD conversion to complete
; 0001 000C while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 000D ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 000E return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 000F }
;PCODE: $00000021 VOL: 0
;
;void init_acd(){
; 0001 0011 void init_acd(){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0012 
; 0001 0013 // Declare your local variables here
; 0001 0014 
; 0001 0015 // Input/Output Ports initialization
; 0001 0016 // Port A initialization
; 0001 0017 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0018 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0019 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 001A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 001B 
; 0001 001C // Port B initialization
; 0001 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 001E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0020 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0021 
; 0001 0022 // Port C initialization
; 0001 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0024 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0026 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0027 
; 0001 0028 // Port D initialization
; 0001 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 002A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 002C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 002D 
; 0001 002E // ADC initialization
; 0001 002F // ADC Clock frequency: 1000/000 kHz
; 0001 0030 // ADC Voltage Reference: AVCC pin
; 0001 0031 // ADC Auto Trigger Source: Free Running
; 0001 0032 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0033 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0034 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0035 
; 0001 0036 // Alphanumeric LCD initialization
; 0001 0037 // Connections are specified in the
; 0001 0038 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 0039 // RS - PORTC Bit 0
; 0001 003A // RD - PORTC Bit 1
; 0001 003B // EN - PORTC Bit 2
; 0001 003C // D4 - PORTC Bit 4
; 0001 003D // D5 - PORTC Bit 5
; 0001 003E // D6 - PORTC Bit 6
; 0001 003F // D7 - PORTC Bit 7
; 0001 0040 // Characters/line: 16
; 0001 0041 lcd_init(16);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0042 
; 0001 0043 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;
;void check_acds(){
; 0001 0046 void check_acds(){
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0047     char str[16];
; 0001 0048     int data;
; 0001 0049     int i;
; 0001 004A 
; 0001 004B    for (i=0;i<8;i++){
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;	str -> Y+4
;	data -> R16,R17
;	i -> R18,R19
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 004C         data = read_adc(i);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 004D         //sprintf(str,"Channel%d:%d.%d Mv",i,((ADCH*5)/256) * 1000,(((ADCH*5)/256) * 1000 )%10 );
; 0001 004E         sprintf(str,"Channel %d:%dMv",i,((data * 5)/1023)*1000 );
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 004F         //sprintf(str,"Channel %d:%d Mv",i,data );
; 0001 0050         lcd_puts(str);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0051         delay_ms(1000);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0052         lcd_clear();
;PCODE: $00000068 VOL: 0
; 0001 0053         }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0054 
; 0001 0055 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;
;interrupt [ADC_INT] void adc_isr(void)
; 0001 0059 {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 005A static unsigned char input_index=0;
; 0001 005B // Read the AD conversion result
; 0001 005C adc_data[input_index]=ADCW;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 005D // Select next ADC input
; 0001 005E if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 005F    input_index=0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0060 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0061 // Delay needed for the stabilization of the ADC input voltage
; 0001 0062 delay_us(10);
;PCODE: $00000086 VOL: 0
; 0001 0063 // Start the AD conversion
; 0001 0064 ADCSRA|=(1<<ADSC);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 0065 
; 0001 0066 
; 0001 0067 
; 0001 0068 
; 0001 0069 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;
;void init_acd_interupt(void){
; 0001 006C void init_acd_interupt(void){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 006D 
; 0001 006E char str[16];
; 0001 006F int i;
; 0001 0070 // Declare your local variables here
; 0001 0071 
; 0001 0072 // Input/Output Ports initialization
; 0001 0073 // Port A initialization
; 0001 0074 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0075 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;	str -> Y+2
;	i -> R16,R17
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0076 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0077 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0078 
; 0001 0079 // Port B initialization
; 0001 007A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 007B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 007C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 007D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 007E 
; 0001 007F // Port C initialization
; 0001 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0081 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0083 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0084 
; 0001 0085 // Port D initialization
; 0001 0086 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0087 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0088 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0089 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 008A 
; 0001 008B // ADC initialization
; 0001 008C // ADC Clock frequency: 1000/000 kHz
; 0001 008D // ADC Voltage Reference: AVCC pin
; 0001 008E // ADC Auto Trigger Source: Free Running
; 0001 008F ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 0090 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0091 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0092 
; 0001 0093 // Alphanumeric LCD initialization
; 0001 0094 // Connections are specified in the
; 0001 0095 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 0096 // RS - PORTC Bit 0
; 0001 0097 // RD - PORTC Bit 1
; 0001 0098 // EN - PORTC Bit 2
; 0001 0099 // D4 - PORTC Bit 4
; 0001 009A // D5 - PORTC Bit 5
; 0001 009B // D6 - PORTC Bit 6
; 0001 009C // D7 - PORTC Bit 7
; 0001 009D // Characters/line: 16
; 0001 009E lcd_init(16);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 009F 
; 0001 00A0 // Global enable interrupts
; 0001 00A1 #asm("sei")
;PCODE: $000000A9 VOL: 0
	sei
;PCODE: $000000AA VOL: 0
; 0001 00A2 
; 0001 00A3 
; 0001 00A4 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;
;
;
;void func2_interupt(void){
; 0001 00A8 void func2_interupt(void){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 00A9       int i ;
; 0001 00AA       char str[16];
; 0001 00AB       static int indexing = 0;
; 0001 00AC       for(i = FIRST_ADC_INPUT ;i<= LAST_ADC_INPUT ; i++){
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;	i -> R16,R17
;	str -> Y+2
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 00AD 
; 0001 00AE            if ( ((adc_data[i]* 5)/1023)* 1000 <  tmp_adc[i] * 0.95 ||  ((adc_data[i]* 5)/1023)* 1000 >  tmp_adc[i] * 1.0 ...
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 00AF 
; 0001 00B0                    sprintf(str , "Channel %d:%dMv" ,i, ((adc_data[i]* 5)/1023)* 1000 );
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 00B1                    lcd_puts(str);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 00B2                    delay_ms(600);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0001 00B3                    lcd_clear();
;PCODE: $00000112 VOL: 0
; 0001 00B4 
; 0001 00B5            }
; 0001 00B6 
; 0001 00B7             tmp_adc[i] = ((adc_data[i]* 5)/1023)* 1000 ;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 00B8 
; 0001 00B9         }
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 00BA        indexing =1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 00BB 
; 0001 00BC 
; 0001 00BD }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;
;
;
;void init_adc_timer(void){
; 0001 00C1 void init_adc_timer(void){
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00C2 
; 0001 00C3  // Declare your local variables here
; 0001 00C4 
; 0001 00C5 // Input/Output Ports initialization
; 0001 00C6 // Port A initialization
; 0001 00C7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00C8 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 00C9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00CA PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 00CB 
; 0001 00CC // Port B initialization
; 0001 00CD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00CE DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0001 00CF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00D0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 00D1 
; 0001 00D2 // Port C initialization
; 0001 00D3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00D4 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0001 00D5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00D6 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 00D7 
; 0001 00D8 // Port D initialization
; 0001 00D9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00DA DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 00DB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00DC PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 00DD 
; 0001 00DE // ADC initialization
; 0001 00DF // ADC Clock frequency: 1000/000 kHz
; 0001 00E0 // ADC Voltage Reference: AVCC pin
; 0001 00E1 // ADC Auto Trigger Source: Free Running
; 0001 00E2 
; 0001 00E3 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 00E4 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0001 00E5 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 00E6 
; 0001 00E7 // Alphanumeric LCD initialization
; 0001 00E8 // Connections are specified in the
; 0001 00E9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 00EA // RS - PORTC Bit 0
; 0001 00EB // RD - PORTC Bit 1
; 0001 00EC // EN - PORTC Bit 2
; 0001 00ED // D4 - PORTC Bit 4
; 0001 00EE // D5 - PORTC Bit 5
; 0001 00EF // D6 - PORTC Bit 6
; 0001 00F0 // D7 - PORTC Bit 7
; 0001 00F1 // Characters/line: 16
; 0001 00F2 
; 0001 00F3 
; 0001 00F4 // Timer/Counter 0 initialization
; 0001 00F5 // Clock source: System Clock
; 0001 00F6 // Clock value: 7.813 kHz
; 0001 00F7 // Mode: Phase correct PWM top=0xFF
; 0001 00F8 // OC0 output: Non-Inverted PWM
; 0001 00F9 // Timer Period: 65.28 ms
; 0001 00FA // Output Pulse(s):
; 0001 00FB // OC0 Period: 65.28 ms Width: 32.768 ms
; 0001 00FC TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0001 00FD TCNT0=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 00FE OCR0=0x80;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0001 00FF 
; 0001 0100 // Timer/Counter 1 initialization
; 0001 0101 // Clock source: System Clock
; 0001 0102 // Clock value: Timer1 Stopped
; 0001 0103 // Mode: Normal top=0xFFFF
; 0001 0104 // OC1A output: Disconnected
; 0001 0105 // OC1B output: Disconnected
; 0001 0106 // Noise Canceler: Off
; 0001 0107 // Input Capture on Falling Edge
; 0001 0108 // Timer1 Overflow Interrupt: Off
; 0001 0109 // Input Capture Interrupt: Off
; 0001 010A // Compare A Match Interrupt: Off
; 0001 010B // Compare B Match Interrupt: Off
; 0001 010C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0001 010D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 010E TCNT1H=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 010F TCNT1L=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0001 0110 ICR1H=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 0111 ICR1L=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0001 0112 OCR1AH=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0001 0113 OCR1AL=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0001 0114 OCR1BH=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0001 0115 OCR1BL=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0001 0116 
; 0001 0117 // Timer/Counter 2 initialization
; 0001 0118 // Clock source: System Clock
; 0001 0119 // Clock value: Timer2 Stopped
; 0001 011A // Mode: Normal top=0xFF
; 0001 011B // OC2 output: Disconnected
; 0001 011C ASSR=0<<AS2;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 011D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 011E TCNT2=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0001 011F OCR2=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0001 0120 
; 0001 0121 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0122 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 0123 
; 0001 0124 // External Interrupt(s) initialization
; 0001 0125 // INT0: Off
; 0001 0126 // INT1: Off
; 0001 0127 // INT2: Off
; 0001 0128 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0001 0129 MCUCSR=(0<<ISC2);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0001 012A 
; 0001 012B // USART initialization
; 0001 012C // USART disabled
; 0001 012D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0001 012E 
; 0001 012F lcd_init(16);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0001 0130 
; 0001 0131 // Global enable interrupts
; 0001 0132 #asm("sei")
;PCODE: $00000179 VOL: 0
	sei
;PCODE: $0000017A VOL: 0
; 0001 0133 
; 0001 0134 }
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0001 0138 {
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0001 0139     char str[16];
; 0001 013A     int tmp;
; 0001 013B     int tmp_value;
; 0001 013C     data = adc_data[0];
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;	str -> Y+4
;	tmp -> R16,R17
;	tmp_value -> R18,R19
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 013D 
; 0001 013E     tmp = ((data*90)/1024) ;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0001 013F      tmp_value =(2.55 * tmp + 5 ) + 0.5;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 0140     OCR0 = tmp_value;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0001 0141     sprintf(str,"Channel %d:%dMv",0,((data * 5)/1023)*1000 );
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0001 0142         //sprintf(str,"Channel %d:%d Mv",i,data );
; 0001 0143         lcd_gotoxy(0,0);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0001 0144         lcd_puts(str);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0001 0145 
; 0001 0146 
; 0001 0147 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0

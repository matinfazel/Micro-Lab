
AVRASM ver. 2.1.30  D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm Sun Jun 05 15:40:26 2022

D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1095): warning: Register r4 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1096): warning: Register r13 already defined by the .DEF directive
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R5
                 	.DEF _tmp=R6
                 	.DEF _tmp_msb=R7
                 	.DEF _count=R8
                 	.DEF _count_msb=R9
                 	.DEF _include_w=R10
                 	.DEF _include_w_msb=R11
                 	.DEF _rx_wr_index=R4
                 	.DEF _rx_rd_index=R13
                 	.DEF _rx_counter=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00a7 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 00dd 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0001      	.DB  0x0,0x0,0x1,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x0:
000039 6e65
00003a 6574
00003b 2072
00003c 5400      	.DB  0x65,0x6E,0x74,0x65,0x72,0x20,0x0,0x54
00003d 6568
00003e 6620
00003f 6172
000040 656d      	.DB  0x68,0x65,0x20,0x66,0x72,0x61,0x6D,0x65
000041 6920
000042 2073
000043 6f63
000044 7272      	.DB  0x20,0x69,0x73,0x20,0x63,0x6F,0x72,0x72
000045 6365
000046 0d74
000047 000a
000048 6854      	.DB  0x65,0x63,0x74,0xD,0xA,0x0,0x54,0x68
000049 2065
00004a 7266
00004b 6d61
00004c 2065      	.DB  0x65,0x20,0x66,0x72,0x61,0x6D,0x65,0x20
00004d 756d
00004e 7473
00004f 6220
000050 2065      	.DB  0x6D,0x75,0x73,0x74,0x20,0x62,0x65,0x20
000051 2035
000052 6e69
000053 6574
000054 6567      	.DB  0x35,0x20,0x69,0x6E,0x74,0x65,0x67,0x65
000055 0d72
000056 000a
000057 6e69
000058 6f63      	.DB  0x72,0xD,0xA,0x0,0x69,0x6E,0x63,0x6F
000059 7272
00005a 6365
00005b 2074
00005c 7266      	.DB  0x72,0x72,0x65,0x63,0x74,0x20,0x66,0x72
00005d 6d61
00005e 2065
00005f 6973
000060 657a      	.DB  0x61,0x6D,0x65,0x20,0x73,0x69,0x7A,0x65
000061 0a0d
D:\Lecture\Micro-lab\Hw7_matin_fazel_9825583\a\Debug\List\a.asm(1155): warning: .cseg .db misalignment - padding zero byte
000062 0000      	.DB  0xD,0xA,0x0
                 _0x2000003:
000063 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000064 0001      	.DW  0x01
000065 0002      	.DW  0x02
000066 0066      	.DW  __REG_BIT_VARS*2
                 
000067 000a      	.DW  0x0A
000068 0004      	.DW  0x04
000069 0068      	.DW  __REG_VARS*2
                 
00006a 0007      	.DW  0x07
00006b 0160      	.DW  _0x1C
00006c 0072      	.DW  _0x0*2
                 
00006d 0017      	.DW  0x17
00006e 0167      	.DW  _0x1C+7
00006f 0079      	.DW  _0x0*2+7
                 
000070 001e      	.DW  0x1E
000071 017e      	.DW  _0x1C+30
000072 0090      	.DW  _0x0*2+30
                 
000073 0017      	.DW  0x17
000074 019c      	.DW  _0x1C+60
000075 00ae      	.DW  _0x0*2+60
                 
000076 0002      	.DW  0x02
000077 01c6      	.DW  __base_y_G100
000078 00c6      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000079 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007a 94f8      	CLI
00007b 27ee      	CLR  R30
00007c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007d e0f1      	LDI  R31,1
00007e bffb      	OUT  GICR,R31
00007f bfeb      	OUT  GICR,R30
000080 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000081 e08d      	LDI  R24,(14-2)+1
000082 e0a2      	LDI  R26,2
000083 27bb      	CLR  R27
                 __CLEAR_REG:
000084 93ed      	ST   X+,R30
000085 958a      	DEC  R24
000086 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000087 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000088 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000089 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00008a 93ed      	ST   X+,R30
00008b 9701      	SBIW R24,1
00008c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008d ece8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008f 9185      	LPM  R24,Z+
000090 9195      	LPM  R25,Z+
000091 9700      	SBIW R24,0
000092 f061      	BREQ __GLOBAL_INI_END
000093 91a5      	LPM  R26,Z+
000094 91b5      	LPM  R27,Z+
000095 9005      	LPM  R0,Z+
000096 9015      	LPM  R1,Z+
000097 01bf      	MOVW R22,R30
000098 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000099 9005      	LPM  R0,Z+
00009a 920d      	ST   X+,R0
00009b 9701      	SBIW R24,1
00009c f7e1      	BRNE __GLOBAL_INI_LOOP
00009d 01fb      	MOVW R30,R22
00009e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a0 bfed      	OUT  SPL,R30
0000a1 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a2 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a3 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a4 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a5 940c 0129 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;       char a;
                 ;       int tmp = 1;
                 ;       int count = 0;
                 ;       int include_w = 0;
                 ;void func3();
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0029 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000a7 93ea      	ST   -Y,R30
0000a8 93fa      	ST   -Y,R31
0000a9 b7ef      	IN   R30,SREG
0000aa 93ea      	ST   -Y,R30
                 ; 0000 002A char status,data;
                 ; 0000 002B status=UCSRA;
0000ab 931a      	ST   -Y,R17
0000ac 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000ad b11b      	IN   R17,11
                 ; 0000 002C data=UDR;
0000ae b10c      	IN   R16,12
                 ; 0000 002D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000af 2fe1      	MOV  R30,R17
0000b0 71ec      	ANDI R30,LOW(0x1C)
0000b1 f489      	BRNE _0x3
                 ; 0000 002E    {
                 ; 0000 002F    rx_buffer[rx_wr_index++]=data;
0000b2 2de4      	MOV  R30,R4
0000b3 9443      	INC  R4
0000b4 e0f0      	LDI  R31,0
0000b5 54ed      	SUBI R30,LOW(-_rx_buffer)
0000b6 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0000b7 8300      	ST   Z,R16
                 ; 0000 0030 #if RX_BUFFER_SIZE == 256
                 ; 0000 0031    // special case for receiver buffer size=256
                 ; 0000 0032    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0033 #else
                 ; 0000 0034    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000b8 e0e8      	LDI  R30,LOW(8)
0000b9 15e4      	CP   R30,R4
0000ba f409      	BRNE _0x4
0000bb 2444      	CLR  R4
                 ; 0000 0035    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
0000bc 94c3      	INC  R12
0000bd e0e8      	LDI  R30,LOW(8)
0000be 15ec      	CP   R30,R12
0000bf f419      	BRNE _0x5
                 ; 0000 0036       {
                 ; 0000 0037       rx_counter=0;
0000c0 24cc      	CLR  R12
                 ; 0000 0038       rx_buffer_overflow=1;
0000c1 9468      	SET
0000c2 f820      	BLD  R2,0
                 ; 0000 0039       }
                 ; 0000 003A #endif
                 ; 0000 003B    }
                 _0x5:
                 ; 0000 003C }
                 _0x3:
0000c3 9109      	LD   R16,Y+
0000c4 9119      	LD   R17,Y+
0000c5 91e9      	LD   R30,Y+
0000c6 bfef      	OUT  SREG,R30
0000c7 91f9      	LD   R31,Y+
0000c8 91e9      	LD   R30,Y+
0000c9 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0043 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0044 char data;
                 ; 0000 0045 while (rx_counter==0);
0000ca 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
0000cb 20cc      	TST  R12
0000cc f3f1      	BREQ _0x6
                 ; 0000 0046 data=rx_buffer[rx_rd_index++];
0000cd 2ded      	MOV  R30,R13
0000ce 94d3      	INC  R13
0000cf e0f0      	LDI  R31,0
0000d0 54ed      	SUBI R30,LOW(-_rx_buffer)
0000d1 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0000d2 8110      	LD   R17,Z
                 ; 0000 0047 #if RX_BUFFER_SIZE != 256
                 ; 0000 0048 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000d3 e0e8      	LDI  R30,LOW(8)
0000d4 15ed      	CP   R30,R13
0000d5 f409      	BRNE _0x9
0000d6 24dd      	CLR  R13
                 ; 0000 0049 #endif
                 ; 0000 004A #asm("cli")
                 _0x9:
0000d7 94f8      	cli
                 ; 0000 004B --rx_counter;
0000d8 94ca      	DEC  R12
                 ; 0000 004C #asm("sei")
0000d9 9478      	sei
                 ; 0000 004D return data;
0000da 2fe1      	MOV  R30,R17
0000db 9119      	LD   R17,Y+
0000dc 9508      	RET
                 ; 0000 004E }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0064 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000dd 93aa      	ST   -Y,R26
0000de 93ea      	ST   -Y,R30
0000df 93fa      	ST   -Y,R31
0000e0 b7ef      	IN   R30,SREG
0000e1 93ea      	ST   -Y,R30
                 ; 0000 0065 if (tx_counter)
0000e2 91e0 01c5 	LDS  R30,_tx_counter
0000e4 30e0      	CPI  R30,0
0000e5 f0a9      	BREQ _0xA
                 ; 0000 0066    {
                 ; 0000 0067    --tx_counter;
0000e6 50e1      	SUBI R30,LOW(1)
0000e7 93e0 01c5 	STS  _tx_counter,R30
                 ; 0000 0068    UDR=tx_buffer[tx_rd_index++];
0000e9 91e0 01c4 	LDS  R30,_tx_rd_index
0000eb 5fef      	SUBI R30,-LOW(1)
0000ec 93e0 01c4 	STS  _tx_rd_index,R30
0000ee 50e1      	SUBI R30,LOW(1)
0000ef e0f0      	LDI  R31,0
0000f0 54e5      	SUBI R30,LOW(-_tx_buffer)
0000f1 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000f2 81e0      	LD   R30,Z
0000f3 b9ec      	OUT  0xC,R30
                 ; 0000 0069 #if TX_BUFFER_SIZE != 256
                 ; 0000 006A    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000f4 91a0 01c4 	LDS  R26,_tx_rd_index
0000f6 30a8      	CPI  R26,LOW(0x8)
0000f7 f419      	BRNE _0xB
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 93e0 01c4 	STS  _tx_rd_index,R30
                 ; 0000 006B #endif
                 ; 0000 006C    }
                 _0xB:
                 ; 0000 006D }
                 _0xA:
0000fb 91e9      	LD   R30,Y+
0000fc bfef      	OUT  SREG,R30
0000fd 91f9      	LD   R31,Y+
0000fe 91e9      	LD   R30,Y+
0000ff 91a9      	LD   R26,Y+
000100 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0074 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0075 while (tx_counter == TX_BUFFER_SIZE);
000101 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xC:
000102 91a0 01c5 	LDS  R26,_tx_counter
000104 30a8      	CPI  R26,LOW(0x8)
000105 f3e1      	BREQ _0xC
                 ; 0000 0076 #asm("cli")
000106 94f8      	cli
                 ; 0000 0077 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000107 91e0 01c5 	LDS  R30,_tx_counter
000109 30e0      	CPI  R30,0
00010a f411      	BRNE _0x10
00010b 995d      	SBIC 0xB,5
00010c c018      	RJMP _0xF
                 _0x10:
                 ; 0000 0078    {
                 ; 0000 0079    tx_buffer[tx_wr_index++]=c;
00010d 91e0 01c3 	LDS  R30,_tx_wr_index
00010f 5fef      	SUBI R30,-LOW(1)
000110 93e0 01c3 	STS  _tx_wr_index,R30
000112 50e1      	SUBI R30,LOW(1)
000113 e0f0      	LDI  R31,0
000114 54e5      	SUBI R30,LOW(-_tx_buffer)
000115 4ffe      	SBCI R31,HIGH(-_tx_buffer)
000116 81a8      	LD   R26,Y
000117 83a0      	STD  Z+0,R26
                 ; 0000 007A #if TX_BUFFER_SIZE != 256
                 ; 0000 007B    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000118 91a0 01c3 	LDS  R26,_tx_wr_index
00011a 30a8      	CPI  R26,LOW(0x8)
00011b f419      	BRNE _0x12
00011c e0e0      	LDI  R30,LOW(0)
00011d 93e0 01c3 	STS  _tx_wr_index,R30
                 ; 0000 007C #endif
                 ; 0000 007D    ++tx_counter;
                 _0x12:
00011f 91e0 01c5 	LDS  R30,_tx_counter
000121 5fef      	SUBI R30,-LOW(1)
000122 93e0 01c5 	STS  _tx_counter,R30
                 ; 0000 007E    }
                 ; 0000 007F else
000124 c002      	RJMP _0x13
                 _0xF:
                 ; 0000 0080    UDR=c;
000125 81e8      	LD   R30,Y
000126 b9ec      	OUT  0xC,R30
                 ; 0000 0081 #asm("sei")
                 _0x13:
000127 9478      	sei
                 ; 0000 0082 }
000128 c114      	RJMP _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 008A {
                 _main:
                 ; .FSTART _main
                 ; 0000 008B //char a;
                 ; 0000 008C        char a;
                 ; 0000 008D        int tmp = 1;
                 ; 0000 008E        int count = 0;
                 ; 0000 008F        int include_w = 0;
                 ; 0000 0090 // Declare your local variables here
                 ; 0000 0091 
                 ; 0000 0092 // Input/Output Ports initialization
                 ; 0000 0093 // Port A initialization
                 ; 0000 0094 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0095 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000129 9722      	SBIW R28,2
00012a e0e0      	LDI  R30,LOW(0)
00012b 83e8      	ST   Y,R30
00012c 83e9      	STD  Y+1,R30
                 ;	a -> R17
                 ;	tmp -> R18,R19
                 ;	count -> R20,R21
                 ;	include_w -> Y+0
                +
00012d e021     +LDI R18 , LOW ( 1 )
00012e e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                +
00012f e040     +LDI R20 , LOW ( 0 )
000130 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000131 bbea      	OUT  0x1A,R30
                 ; 0000 0096 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0097 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000132 bbeb      	OUT  0x1B,R30
                 ; 0000 0098 
                 ; 0000 0099 // Port B initialization
                 ; 0000 009A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000133 bbe7      	OUT  0x17,R30
                 ; 0000 009C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000134 bbe8      	OUT  0x18,R30
                 ; 0000 009E 
                 ; 0000 009F // Port C initialization
                 ; 0000 00A0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A1 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000135 bbe4      	OUT  0x14,R30
                 ; 0000 00A2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A3 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000136 bbe5      	OUT  0x15,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Port D initialization
                 ; 0000 00A6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A7 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000137 bbe1      	OUT  0x11,R30
                 ; 0000 00A8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A9 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000138 bbe2      	OUT  0x12,R30
                 ; 0000 00AA 
                 ; 0000 00AB // USART initialization
                 ; 0000 00AC // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00AD // USART Receiver: On
                 ; 0000 00AE // USART Transmitter: On
                 ; 0000 00AF // USART Mode: Asynchronous
                 ; 0000 00B0 // USART Baud Rate: 9600
                 ; 0000 00B1 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000139 b9eb      	OUT  0xB,R30
                 ; 0000 00B2 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00013a ede8      	LDI  R30,LOW(216)
00013b b9ea      	OUT  0xA,R30
                 ; 0000 00B3 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00013c e8e6      	LDI  R30,LOW(134)
00013d bde0      	OUT  0x20,R30
                 ; 0000 00B4 UBRRH=0x00;
00013e e0e0      	LDI  R30,LOW(0)
00013f bde0      	OUT  0x20,R30
                 ; 0000 00B5 UBRRL=0x33;
000140 e3e3      	LDI  R30,LOW(51)
000141 b9e9      	OUT  0x9,R30
                 ; 0000 00B6 
                 ; 0000 00B7 lcd_init(16);
000142 e1a0      	LDI  R26,LOW(16)
000143 d0cc      	RCALL _lcd_init
                 ; 0000 00B8 
                 ; 0000 00B9 // Global enable interrupts
                 ; 0000 00BA #asm("sei")
000144 9478      	sei
                 ; 0000 00BB while (1)
                 _0x14:
                 ; 0000 00BC       {
                 ; 0000 00BD       // Place your code here
                 ; 0000 00BE     func3();
000145 d002      	RCALL _func3
                 ; 0000 00BF       }
000146 cffe      	RJMP _0x14
                 ; 0000 00C0 
                 ; 0000 00C1 }
                 _0x17:
000147 cfff      	RJMP _0x17
                 ; .FEND
                 ;
                 ;void func3(){
                 ; 0000 00C3 void func3(){
                 _func3:
                 ; .FSTART _func3
                 ; 0000 00C4 
                 ; 0000 00C5       while (1){
                 _0x18:
                 ; 0000 00C6 
                 ; 0000 00C7        a = getchar();
000148 df81      	RCALL _getchar
000149 2e5e      	MOV  R5,R30
                 ; 0000 00C8        putchar(a);
00014a 2da5      	MOV  R26,R5
00014b dfb5      	RCALL _putchar
                 ; 0000 00C9        if (a == '\r')
00014c e0ed      	LDI  R30,LOW(13)
00014d 15e5      	CP   R30,R5
00014e f431      	BRNE _0x1B
                 ; 0000 00CA        {    putchar('5');
00014f e3a5      	LDI  R26,LOW(53)
000150 dfb0      	RCALL _putchar
                 ; 0000 00CB             lcd_puts("enter ");
                +
000151 e6a0     +LDI R26 , LOW ( _0x1C + ( 0 ) )
000152 e0b1     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
000153 d0ab      	RCALL _lcd_puts
                 ; 0000 00CC             return;
000154 9508      	RET
                 ; 0000 00CD        }
                 ; 0000 00CE        if (tmp == 1 && a == '(')
                 _0x1B:
000155 e0e1      	LDI  R30,LOW(1)
000156 e0f0      	LDI  R31,HIGH(1)
000157 15e6      	CP   R30,R6
000158 05f7      	CPC  R31,R7
000159 f419      	BRNE _0x1E
00015a e2e8      	LDI  R30,LOW(40)
00015b 15e5      	CP   R30,R5
00015c f009      	BREQ _0x1F
                 _0x1E:
00015d c003      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00CF             tmp = 0;
00015e 2466      	CLR  R6
00015f 2477      	CLR  R7
                 ; 0000 00D0       else if (tmp == 0 && a >= '0' && a<= '9')
000160 c01a      	RJMP _0x20
                 _0x1D:
000161 2400      	CLR  R0
000162 1406      	CP   R0,R6
000163 0407      	CPC  R0,R7
000164 f431      	BRNE _0x22
000165 e3e0      	LDI  R30,LOW(48)
000166 165e      	CP   R5,R30
000167 f018      	BRLO _0x22
000168 e3e9      	LDI  R30,LOW(57)
000169 15e5      	CP   R30,R5
00016a f408      	BRSH _0x23
                 _0x22:
00016b c005      	RJMP _0x21
                 _0x23:
                 ; 0000 00D1             count++;
00016c 01f4      	MOVW R30,R8
00016d 9631      	ADIW R30,1
00016e 014f      	MOVW R8,R30
00016f 9731      	SBIW R30,1
                 ; 0000 00D2       else if (a >= 'A' && a<= 'z'){
000170 c00a      	RJMP _0x24
                 _0x21:
000171 e4e1      	LDI  R30,LOW(65)
000172 165e      	CP   R5,R30
000173 f018      	BRLO _0x26
000174 e7ea      	LDI  R30,LOW(122)
000175 15e5      	CP   R30,R5
000176 f408      	BRSH _0x27
                 _0x26:
000177 c003      	RJMP _0x25
                 _0x27:
                 ; 0000 00D3               include_w = 1;
000178 e0e1      	LDI  R30,LOW(1)
000179 e0f0      	LDI  R31,HIGH(1)
00017a 015f      	MOVW R10,R30
                 ; 0000 00D4 
                 ; 0000 00D5       }
                 ; 0000 00D6 
                 ; 0000 00D7       if (tmp == 0 && a == ')'){
                 _0x25:
                 _0x24:
                 _0x20:
00017b 2400      	CLR  R0
00017c 1406      	CP   R0,R6
00017d 0407      	CPC  R0,R7
00017e f419      	BRNE _0x29
00017f e2e9      	LDI  R30,LOW(41)
000180 15e5      	CP   R30,R5
000181 f009      	BREQ _0x2A
                 _0x29:
000182 c01c      	RJMP _0x28
                 _0x2A:
                 ; 0000 00D8             if (count == 5 && !include_w){
000183 e0e5      	LDI  R30,LOW(5)
000184 e0f0      	LDI  R31,HIGH(5)
000185 15e8      	CP   R30,R8
000186 05f9      	CPC  R31,R9
000187 f419      	BRNE _0x2C
000188 2c0a      	MOV  R0,R10
000189 280b      	OR   R0,R11
00018a f009      	BREQ _0x2D
                 _0x2C:
00018b c003      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00D9                 lcd_puts("The frame is correct\r\n");
                +
00018c e6a7     +LDI R26 , LOW ( _0x1C + ( 7 ) )
00018d e0b1     +LDI R27 , HIGH ( _0x1C + ( 7 ) )
                 	__POINTW2MN _0x1C,7
00018e c008      	RJMP _0x31
                 ; 0000 00DA                 }
                 ; 0000 00DB             else if (include_w)
                 _0x2B:
00018f 2c0a      	MOV  R0,R10
000190 280b      	OR   R0,R11
000191 f019      	BREQ _0x2F
                 ; 0000 00DC                  lcd_puts("The frame must be 5 integer\r\n");
                +
000192 e7ae     +LDI R26 , LOW ( _0x1C + ( 30 ) )
000193 e0b1     +LDI R27 , HIGH ( _0x1C + ( 30 ) )
                 	__POINTW2MN _0x1C,30
000194 c002      	RJMP _0x31
                 ; 0000 00DD             else
                 _0x2F:
                 ; 0000 00DE                  lcd_puts("incorrect frame size\r\n");
                +
000195 e9ac     +LDI R26 , LOW ( _0x1C + ( 60 ) )
000196 e0b1     +LDI R27 , HIGH ( _0x1C + ( 60 ) )
                 	__POINTW2MN _0x1C,60
                 _0x31:
000197 d067      	RCALL _lcd_puts
                 ; 0000 00DF 
                 ; 0000 00E0             tmp = 1;
000198 e0e1      	LDI  R30,LOW(1)
000199 e0f0      	LDI  R31,HIGH(1)
00019a 013f      	MOVW R6,R30
                 ; 0000 00E1             count = 0;
00019b 2488      	CLR  R8
00019c 2499      	CLR  R9
                 ; 0000 00E2             include_w = 0;
00019d 24aa      	CLR  R10
00019e 24bb      	CLR  R11
                 ; 0000 00E3       }
                 ; 0000 00E4 
                 ; 0000 00E5       }
                 _0x28:
00019f cfa8      	RJMP _0x18
                 ; 0000 00E6 
                 ; 0000 00E7 }
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000160           	.BYTE 0x53
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001a0 93aa      	ST   -Y,R26
0001a1 b3e5      	IN   R30,0x15
0001a2 70ef      	ANDI R30,LOW(0xF)
0001a3 2fae      	MOV  R26,R30
0001a4 81e8      	LD   R30,Y
0001a5 7fe0      	ANDI R30,LOW(0xF0)
0001a6 2bea      	OR   R30,R26
0001a7 bbe5      	OUT  0x15,R30
                +
0001a8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a9 958a     +DEC R24
0001aa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ab 9aaa      	SBI  0x15,2
                +
0001ac e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001ad 958a     +DEC R24
0001ae f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001af 98aa      	CBI  0x15,2
                +
0001b0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001b1 958a     +DEC R24
0001b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001b3 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001b4 93aa      	ST   -Y,R26
0001b5 81a8      	LD   R26,Y
0001b6 dfe9      	RCALL __lcd_write_nibble_G100
0001b7 81e8          ld    r30,y
0001b8 95e2          swap  r30
0001b9 83e8          st    y,r30
0001ba 81a8      	LD   R26,Y
0001bb dfe4      	RCALL __lcd_write_nibble_G100
                +
0001bc e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001bd 958a     +DEC R24
0001be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001bf c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001c0 93aa      	ST   -Y,R26
0001c1 81e8      	LD   R30,Y
0001c2 e0f0      	LDI  R31,0
0001c3 53ea      	SUBI R30,LOW(-__base_y_G100)
0001c4 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001c5 81e0      	LD   R30,Z
0001c6 81a9      	LDD  R26,Y+1
0001c7 0fae      	ADD  R26,R30
0001c8 dfeb      	RCALL __lcd_write_data
0001c9 81e9      	LDD  R30,Y+1
0001ca 93e0 01ca 	STS  __lcd_x,R30
0001cc 81e8      	LD   R30,Y
0001cd 93e0 01cb 	STS  __lcd_y,R30
0001cf 9622      	ADIW R28,2
0001d0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001d1 e0a2      	LDI  R26,LOW(2)
0001d2 940e 023f 	CALL SUBOPT_0x0
0001d4 e0ac      	LDI  R26,LOW(12)
0001d5 dfde      	RCALL __lcd_write_data
0001d6 e0a1      	LDI  R26,LOW(1)
0001d7 940e 023f 	CALL SUBOPT_0x0
0001d9 e0e0      	LDI  R30,LOW(0)
0001da 93e0 01cb 	STS  __lcd_y,R30
0001dc 93e0 01ca 	STS  __lcd_x,R30
0001de 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001df 93aa      	ST   -Y,R26
0001e0 81a8      	LD   R26,Y
0001e1 30aa      	CPI  R26,LOW(0xA)
0001e2 f031      	BREQ _0x2000005
0001e3 91e0 01cc 	LDS  R30,__lcd_maxx
0001e5 91a0 01ca 	LDS  R26,__lcd_x
0001e7 17ae      	CP   R26,R30
0001e8 f060      	BRLO _0x2000004
                 _0x2000005:
0001e9 e0e0      	LDI  R30,LOW(0)
0001ea 93ea      	ST   -Y,R30
0001eb 91a0 01cb 	LDS  R26,__lcd_y
0001ed 5faf      	SUBI R26,-LOW(1)
0001ee 93a0 01cb 	STS  __lcd_y,R26
0001f0 dfcf      	RCALL _lcd_gotoxy
0001f1 81a8      	LD   R26,Y
0001f2 30aa      	CPI  R26,LOW(0xA)
0001f3 f409      	BRNE _0x2000007
0001f4 c048      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
0001f5 91e0 01ca 	LDS  R30,__lcd_x
0001f7 5fef      	SUBI R30,-LOW(1)
0001f8 93e0 01ca 	STS  __lcd_x,R30
0001fa 9aa8      	SBI  0x15,0
0001fb 81a8      	LD   R26,Y
0001fc dfb7      	RCALL __lcd_write_data
0001fd 98a8      	CBI  0x15,0
0001fe c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001ff 93ba      	ST   -Y,R27
000200 93aa      	ST   -Y,R26
000201 931a      	ST   -Y,R17
                 _0x2000008:
000202 81a9      	LDD  R26,Y+1
000203 81ba      	LDD  R27,Y+1+1
000204 91ed      	LD   R30,X+
000205 83a9      	STD  Y+1,R26
000206 83ba      	STD  Y+1+1,R27
000207 2f1e      	MOV  R17,R30
000208 30e0      	CPI  R30,0
000209 f019      	BREQ _0x200000A
00020a 2fa1      	MOV  R26,R17
00020b dfd3      	RCALL _lcd_putchar
00020c cff5      	RJMP _0x2000008
                 _0x200000A:
00020d 8118      	LDD  R17,Y+0
00020e 9623      	ADIW R28,3
00020f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000210 93aa      	ST   -Y,R26
000211 b3e4      	IN   R30,0x14
000212 6fe0      	ORI  R30,LOW(0xF0)
000213 bbe4      	OUT  0x14,R30
000214 9aa2      	SBI  0x14,2
000215 9aa0      	SBI  0x14,0
000216 9aa1      	SBI  0x14,1
000217 98aa      	CBI  0x15,2
000218 98a8      	CBI  0x15,0
000219 98a9      	CBI  0x15,1
00021a 81e8      	LD   R30,Y
00021b 93e0 01cc 	STS  __lcd_maxx,R30
00021d 58e0      	SUBI R30,-LOW(128)
                +
00021e 93e0 01c8+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000220 81e8      	LD   R30,Y
000221 54e0      	SUBI R30,-LOW(192)
                +
000222 93e0 01c9+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000224 e1a4      	LDI  R26,LOW(20)
000225 e0b0      	LDI  R27,0
000226 940e 024d 	CALL _delay_ms
000228 940e 0245 	CALL SUBOPT_0x1
00022a 940e 0245 	CALL SUBOPT_0x1
00022c 940e 0245 	CALL SUBOPT_0x1
00022e e2a0      	LDI  R26,LOW(32)
00022f df70      	RCALL __lcd_write_nibble_G100
                +
000230 ec88     +LDI R24 , LOW ( 200 )
000231 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000232 9701     +SBIW R24 , 1
000233 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000234 e2a8      	LDI  R26,LOW(40)
000235 df7e      	RCALL __lcd_write_data
000236 e0a4      	LDI  R26,LOW(4)
000237 df7c      	RCALL __lcd_write_data
000238 e8a5      	LDI  R26,LOW(133)
000239 df7a      	RCALL __lcd_write_data
00023a e0a6      	LDI  R26,LOW(6)
00023b df78      	RCALL __lcd_write_data
00023c df94      	RCALL _lcd_clear
                 _0x2080001:
00023d 9621      	ADIW R28,1
00023e 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
0001b3           	.BYTE 0x8
                 _tx_buffer:
0001bb           	.BYTE 0x8
                 _tx_wr_index:
0001c3           	.BYTE 0x1
                 _tx_rd_index:
0001c4           	.BYTE 0x1
                 _tx_counter:
0001c5           	.BYTE 0x1
                 __base_y_G100:
0001c6           	.BYTE 0x4
                 __lcd_x:
0001ca           	.BYTE 0x1
                 __lcd_y:
0001cb           	.BYTE 0x1
                 __lcd_maxx:
0001cc           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00023f 940e 01b4 	CALL __lcd_write_data
000241 e0a3      	LDI  R26,LOW(3)
000242 e0b0      	LDI  R27,0
000243 940c 024d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000245 e3a0      	LDI  R26,LOW(48)
000246 940e 01a0 	CALL __lcd_write_nibble_G100
                +
000248 ec88     +LDI R24 , LOW ( 200 )
000249 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00024a 9701     +SBIW R24 , 1
00024b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00024c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00024d 9610      	adiw r26,0
00024e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00024f ed80     +LDI R24 , LOW ( 0x7D0 )
000250 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000251 9701     +SBIW R24 , 1
000252 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000253 95a8      	wdr
000254 9711      	sbiw r26,1
000255 f7c9      	brne __delay_ms0
                 __delay_ms1:
000256 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   1 r2 :   1 r3 :   0 r4 :   4 r5 :   9 r6 :   5 r7 :   4 
r8 :   4 r9 :   2 r10:   4 r11:   3 r12:   5 r13:   4 r14:   0 r15:   0 
r16:   4 r17:  12 r18:   1 r19:   1 r20:   1 r21:   1 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  59 r27:  11 r28:   5 r29:   1 r30: 154 r31:  23 
x  :   4 y  :  53 z  :  12 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   5 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   8 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  15 cpc   :   4 cpi   :   8 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   3 jmp   :  23 ld    :  27 ldd   :   5 ldi   :  81 
lds   :  12 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  11 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   1 out   :  25 pop   :   0 push  :   0 rcall :  20 ret   :   8 
reti  :   2 rjmp  :  21 rol   :   0 ror   :   0 sbc   :   0 sbci  :   5 
sbi   :   5 sbic  :   1 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   4 sts   :  15 sub   :   0 subi  :  15 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004ae   1038    160   1198   16384   7.3%
[.dseg] 0x000060 0x0001cd      0    109    109    1024  10.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
